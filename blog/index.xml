<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>The Brew Pub</title>
    <link href="http://brewhouse.io/index.xml" rel="self"/>
    <link href="http://brewhouse.io"/>
    <updated>2014-11-24T15:58:03-08:00</updated>
    <id>http://brewhouse.io</id>
    <author>
        <name>Brewhouse Team</name>
        <email>hello@brewhouse.io</email>
    </author>
    
    
      <entry>
          <title>RubyConf 2014 - The human bits</title>
          <author>
            <name>Philippe Creux</name>
            <email>philippe@brewhouse.io</email>
          </author>
          <link href="http://brewhouse.io/blog/2014/11/20/rubyconf-2014-the-human-bits.html"/>
          <updated>2014-11-20T08:00:00-08:00</updated>
          <id>http://brewhouse.io/blog/2014/11/20/rubyconf-2014-the-human-bits</id>
          <content type="html">&lt;p&gt;There were tons of great technical talks at &lt;a href=&quot;http://rubyconf.org/&quot;&gt;Rubyconf 2014&lt;/a&gt;: performance, testing, architecture, new frameworks and new language features. However, &lt;a href=&quot;https://twitter.com/yukihiro_matz&quot;&gt;Matz&lt;/a&gt; kicked off the conference from a different perspective: he described the Ruby community being made of sharks who need to be fed with new shiny stuff. Otherwise we may lose interest and move away from Ruby. I’d rather be a dolphin, or a unicorn. But in the end I was quite excited (as a shark might be) to hear about Ruby 3.0.&lt;/p&gt;

&lt;!-- break --&gt;

&lt;h3 id=&quot;in-open-source-no-one-can-hear-you-scream----justin-searls&quot;&gt;“In open-source, no one can hear you scream” – Justin Searls&lt;/h3&gt;

&lt;p&gt;In “&lt;a href=&quot;https://speakerdeck.com/searls/the-social-coding-contract&quot;&gt;The social coding contract&lt;/a&gt;”, &lt;a href=&quot;https://twitter.com/searls&quot;&gt;Justin Searls&lt;/a&gt; didn’t depict the ruby community as a happy people singing in harmony “MINASWAN” (“Matz Is Nice And So We Are Nice”). “Late adopters [of open source projects] often behave as consumers”.&lt;/p&gt;

&lt;p&gt;Here is the story of a typical open source project: You google for a ruby gem (i.e. a SOAP client for Ruby). You can’t find it so you make one and release it. Other people with the same need start using it and submit a few patches. Your library is becoming quite popular, it feels so great to see other people use your stuff! After a couple of months, things start to change. You get less contributions. You get more requests to fix bugs and add features from late adopters. These late adopters are often not really cooperative, and you can be left feeling that they don’t value your efforts. You are then likely to get overwhelmed by trolls and rants.&lt;/p&gt;

&lt;p&gt;Justin insists on the fact that maintainers should learn to say “No”, otherwise they may burn out. And he adds: “In open-source, no one can hear you scream”. We can fix this by going beyond emails and GitHub comments using video chat to pair with people. The lack of real human interaction is what makes trolling a thing. He adds that people don’t seem to get to a consensus on Twitter, and it seems they have a better time when they speak to each other.&lt;/p&gt;

&lt;h3 id=&quot;languages-are-not-only-tools-to-communicate-but-also-to-think----randy-coulman&quot;&gt;“Languages are not only tools to communicate but also to think” – Randy Coulman&lt;/h3&gt;

&lt;p&gt;Speaking of language, &lt;a href=&quot;https://twitter.com/randycoulman&quot;&gt;Randy Coulman&lt;/a&gt; points out that “languages are not only tools to communicate but also to think”. Language influences our thoughts and learning new languages increases our “solution space”. This solution space can greatly benefit from mathematics.&lt;/p&gt;

&lt;h3 id=&quot;if-you-can-write-a-program-you-are-good-at-mathematic----tom-stuart&quot;&gt;“If you can write a program, you are good at mathematic” – Tom Stuart&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://twitter.com/tomstuart&quot;&gt;Tom Stuart&lt;/a&gt; did a brilliant talk where he demonstrated how mathematics are not about greek symbols, numbers,  and formulas to learn by heart but instead that mathematics are abstractions used to solve problems. When we find an honest and minimal abstraction to a problem, we can solve it in interesting, simpler ways. And even if we don’t want to hear it, he believes that “if you can write a program, you are good at mathematics”.&lt;/p&gt;

&lt;h3 id=&quot;your-future-is-decay-and-obsolescence----sandy-metz&quot;&gt;“Your future is Decay and Obsolescence” – Sandy Metz&lt;/h3&gt;

&lt;p&gt;And mathematics could be what saves us in the long run, since &lt;a href=&quot;https://twitter.com/sandimetz&quot;&gt;Sandy Metz&lt;/a&gt; told us that our future is Decay and Obsolescence. After inviting us to take 30 seconds to introduce ourselves to the people around us, she brought us along on a journey where we learned about the history of scrolls, codex, books, press and &lt;a href=&quot;http://en.wikipedia.org/wiki/Linotype_machine&quot;&gt;Linotype&lt;/a&gt;. Her dad worked on Linotypes for decades and he would “never ever have clean hands”. The Linotype was used to print newspapers until the late 70s. Almost overnight, newspaper switched from the Linotype to modern printers. And her dad had to move on.&lt;/p&gt;

&lt;p&gt;We work in IT, but most of what we do relies on the web. It’s been around for only 20 years and our jobs depend on it. So from there, Madame Sandy told us our future: “Everything will change. The first thing is that you’ll die. And everybody you know will die”. People we love will die. It will be hard. Death, decay and obsolescence is our future. Along the way, our body will fail us. We will develop low back trouble. Our job will change as well.&lt;/p&gt;

&lt;p&gt;What really matters is happiness, health and the world we leave to our children. &lt;strong&gt;Happiness&lt;/strong&gt;, do real things and tell the ones you love that you love them. &lt;strong&gt;Health&lt;/strong&gt;, get some exercise, take care of your body. &lt;strong&gt;Community&lt;/strong&gt;, we can contribute to open-source but we are bigger than Rails and Ruby so we should also teach, do things for others and help the ones who need it the most.&lt;/p&gt;

&lt;h3 id=&quot;we-deserve-our-success-but-we-are-lucky-enough-to-have-the-wind-in-our-back----sandy-metz&quot;&gt;“We deserve our success but we are lucky enough to have the wind in our back.” – Sandy Metz&lt;/h3&gt;

&lt;p&gt;Several speakers brought humanity and community to their talks. They helped us step back, see the big picture and keep in mind what is really important. Ruby conferences gather Ruby developers in the same place for a couple of days. We learn new practices and discover new tools but the most vibrant memories we have happen in the hallway or during the 5K run, Karaoke, Birds of a Feather, drinks and social ice-cream. Those memories are the social interactions. This is how we take care of our community.&lt;/p&gt;
</content>
      </entry>
    
    
    
      <entry>
          <title>Healthy Codebase and Preparatory Refactoring</title>
          <author>
            <name>Philippe Creux</name>
            <email>philippe@brewhouse.io</email>
          </author>
          <link href="http://brewhouse.io/blog/2014/11/10/healthy-codebase-and-preparatory-refactoring.html"/>
          <updated>2014-11-10T08:00:00-08:00</updated>
          <id>http://brewhouse.io/blog/2014/11/10/healthy-codebase-and-preparatory-refactoring</id>
          <content type="html">&lt;p&gt;In a &lt;a href=&quot;http://devchat.tv/ruby-rogues/178-rr-book-club-refactoring-ruby-with-martin-fowler&quot;&gt;recent episode of the RubyRogues podcast&lt;/a&gt;, &lt;a href=&quot;http://martinfowler.com&quot;&gt;Martin Fowler&lt;/a&gt; and &lt;a href=&quot;https://twitter.com/jessitron&quot;&gt;Jessica Kerr&lt;/a&gt; literally spoke my mind. They named two concepts that I deeply believe in and care about: Healthy Codebase and Preparatory Refactoring. The fact that they have expressed them in beautiful words and powerful metaphors enables me to share them with you in this article.&lt;/p&gt;

&lt;!-- break --&gt;

&lt;p&gt;After 43 minutes of discussions on the steps of refactoring, Martin introduced the concept of Healthy Codebase.&lt;/p&gt;

&lt;p&gt;“&lt;em&gt;A healthy codebase allows you to keep going fast. You’re slowed down by having stuff that’s unclear.&lt;/em&gt;”, says Martin. &lt;em&gt;“The analogy is often made between code and writing. And of course, this is part of the theme of &lt;a href=&quot;http://www.confreaks.com/videos/3315-railsconf-keynote-writing-software&quot;&gt;David’s RailsConf talk&lt;/a&gt; that was so controversial, that he thinks of code not as mathematics but as writing. And I’m very much in agreement with him on this. But that has a consequence which says that if code is writing, it means you have to put a lot of effort into making it clear. And ask any good rewriter what they do most of the time, and it’s rewriting.”&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;We have to realize that unclear code slows us down. It is &lt;em&gt;“an economic judgment”&lt;/em&gt; that code quality results in speed. So the &lt;em&gt;“Code quality versus Speed”&lt;/em&gt; is nonsense.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;“Many times, I run into teams that say: ‘Management isn’t allowing us to do a quality job here because it will slow us down. And we’ve appealed to management and said we need to put more quality in the code, but they’ve said no, we need to go faster instead’. And my comment to that is that as soon as you’re framing it in terms of code quality versus speed, you’ve lost. Because the whole point of refactoring is to go faster.”&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/2014/Nov/code-quality-speed-chart.jpg&quot; alt=&quot;Speed goes with code quality&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Martin then illustrates his metaphor of the “Healthy Codebase”:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;“If you keep yourself healthy then you’ll be able to run faster. But if you just say: ‘Well, I want to run a lot so I’m therefore going to run a whole load all the time and not eat properly and not pay attention about this shooting pain going up my leg’, then you’re not going to be able to run quickly very long. You have to pay attention to your health. And same with the codebase. You have to continuously say: ‘How do we keep it in a healthy state?’ Then we can go fast, because we’re running marathons here with codebases. And if we neglect that internal quality of the codebase, it hits you surprisingly fast.”&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;So a “Healthy codebase” is a well written codebase that is clean and easy to understand. Keeping a codebase healthy allows us to move fast. But how do we ensure that we take some time to refactor before moving on to the next task? &lt;a href=&quot;https://twitter.com/cmaxw&quot;&gt;Charles Max Wood&lt;/a&gt; asks this exact question: &lt;em&gt;“A lot of people pick up TDD and they do red, green and go to the next ticket. How do you get to the point where you actually have [the refactoring step] as part of your workflow and make it automatic?”&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;This is where Jessica Kerr jumps in to talk about Preparatory Refactoring and illustrates it with a beautiful metaphor.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;“So, my strategy is before the red test […] I’m going to go refactor the code […] to make the change I want to make really easy. It’s like I want to go 100 miles east but instead of just traipsing through the woods, I’m going to drive 20 miles north to the highway and then I’m going to go 100 miles east at three times the speed I could have if I just went straight there. When people are pushing you to just go straight there, sometimes you need to say, ‘Wait, I need to check the map and find the quickest route’. The preparatory refactoring does that for me. And plus, it puts the refactoring at the beginning so it’s sure to get done.”&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/2014/Nov/preparatory-refactoring-map.jpg&quot; alt=&quot;Look at the map&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Preparatory Refactoring has some great benefits as it makes you go through the following steps:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;1 - understand the architecture of the code you are about to change&lt;/li&gt;
  &lt;li&gt;2 - plan and design the changes you are about to make&lt;/li&gt;
  &lt;li&gt;3 - refactor the code while you are still in the confortable “green” zone&lt;/li&gt;
  &lt;li&gt;4 - share the code resulting from the refactoring step (it can be reviewed and deployed separately from the new functionality)&lt;/li&gt;
  &lt;li&gt;5 - write the code for the new functionality (it is easy and fast since the codebase is ready for this change)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As Martin describes:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;“[This process] asks you ‘What would this code need to look like to make this change I’m about to make simple?’ So, you ask yourself that question and then you say, ‘Well, can I refactor it to be like that?’ and then make the change. And if you can do that, it’s almost always going to be faster because in the refactoring step, you’re not going to be in debug land. It’s a relatively straightforward process. And then you’ve made the hard part, which is adding the new functionality, a hell of a lot easier.”&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;I am very grateful to &lt;a href=&quot;http://martinfowler.com&quot;&gt;Martin Fowler&lt;/a&gt; and &lt;a href=&quot;https://twitter.com/jessitron&quot;&gt;Jessica Kerr&lt;/a&gt; for expressing Healthy Codebase and Preparatory Refactoring in such clear words and powerful analogies. I hope that they have convinced you to experiment with these concepts unless you are already enjoying their benefits.&lt;/p&gt;
</content>
      </entry>
    
    
    
      <entry>
          <title>Big data in minutes with the ELK Stack</title>
          <author>
            <name>Philippe Creux</name>
            <email>philippe@brewhouse.io</email>
          </author>
          <link href="http://brewhouse.io/blog/2014/11/04/big-data-with-elk-stack.html"/>
          <updated>2014-11-04T08:00:00-08:00</updated>
          <id>http://brewhouse.io/blog/2014/11/04/big-data-with-elk-stack</id>
          <content type="html">&lt;p&gt;We’ve built a data analysis and dashboarding infrastructure for one of our clients over the past few weeks. They collect about 10 million data points a day. Yes, that’s big data.&lt;/p&gt;

&lt;p&gt;My highest priority was to allow them to browse the data they collect so that they can ensure that the data points are consistent and contain all the attributes required to generate the reports and dashboards they need.&lt;/p&gt;

&lt;p&gt;I chose to give the &lt;a href=&quot;http://www.elasticsearch.org/overview/&quot;&gt;ELK stack&lt;/a&gt; a try: &lt;a href=&quot;http://www.elasticsearch.org/overview/elasticsearch/&quot;&gt;ElasticSearch&lt;/a&gt;, &lt;a href=&quot;http://www.elasticsearch.org/overview/logstash/&quot;&gt;logstash&lt;/a&gt; and &lt;a href=&quot;http://www.elasticsearch.org/overview/kibana/&quot;&gt;Kibana&lt;/a&gt;.&lt;/p&gt;

&lt;!-- break --&gt;

&lt;p&gt;&lt;a href=&quot;http://www.elasticsearch.org/overview/elasticsearch/&quot;&gt;ElasticSearch&lt;/a&gt; is a schema-less database that has powerful search capabilities and is easy to scale horizontally. Schema-less means that you just throw JSON at it and it updates the schema as you go. It indexes every single field, so you can search anything (with full-text search) and it will aggregate and group the data. Registering a new node to a cluster is a matter of installing ElasticSearch on a machine and editing a config file. ElasticSearch takes care of spreading data around and splitting out requests over multiple servers.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.elasticsearch.org/overview/logstash/&quot;&gt;logstash&lt;/a&gt; allows you to pipeline data to and from anywhere. This is called an ETL (for Extract, Transform, Load) pipeline in the Business Intelligence and Data warehousing world, and it is what allows us to fetch, transform, and store events into ElasticSearch.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.elasticsearch.org/overview/kibana/&quot;&gt;Kibana&lt;/a&gt; is a web-based data analysis and dashboarding tool for ElasticSearch. It leverages ElasticSearch’s search capabilities to visualise your (big) data in seconds.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/2014/Nov/flow.jpg&quot; alt=&quot;flow&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;logstash-etl-pipeline-made-simple&quot;&gt;&lt;em&gt;logstash&lt;/em&gt;: ETL pipeline made simple&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;logstash&lt;/em&gt; is a simple tool that streams data from one or many inputs, transforms it and outputs it to one or many outputs.&lt;/p&gt;

&lt;h3 id=&quot;inputs-read-and-parse-data&quot;&gt;Inputs: read and parse data&lt;/h3&gt;

&lt;p&gt;Inputs are data sources such as log files (&lt;code&gt;/var/log/*.log&lt;/code&gt;) or data stored in a &lt;em&gt;S3 bucket&lt;/em&gt;, &lt;em&gt;RabbitMQ&lt;/em&gt;, &lt;em&gt;redis&lt;/em&gt;, etc. Once the raw data is read, &lt;em&gt;logstash&lt;/em&gt; parses it using codecs such as &lt;em&gt;JSON&lt;/em&gt;, &lt;em&gt;key=value&lt;/em&gt;, &lt;em&gt;graphite format&lt;/em&gt; etc. You can find a &lt;a href=&quot;http://logstash.net/docs/1.4.2/&quot;&gt;full list of inputs and codecs&lt;/a&gt; on &lt;a href=&quot;http://logstash.net/docs/1.4.2/&quot;&gt;&lt;em&gt;logstash&lt;/em&gt; documentation&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Let’s write a &lt;em&gt;logstash&lt;/em&gt; configuration file to load data from an S3 bucket containing text files with one JSON blob per line.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# logstash.conf&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;s3&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;bucket&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;my-bucket&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;credentials&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;aws-key&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;aws-token&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;codec&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;json&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;filters-transform-and-extend-data&quot;&gt;Filters: transform and extend data&lt;/h3&gt;

&lt;p&gt;We now have data in the &lt;em&gt;logstash&lt;/em&gt; pipeline. It’s time to transform it a little. Take this sample input file:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;json&quot;&gt;&lt;span class=&quot;err&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;://my-bucket/input&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;-1&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;.txt&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;quot;action&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;start game&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;quot;user&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;bob&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;nt&quot;&gt;&amp;quot;time&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;123456789&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;ip:&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;quot;56.42.42.42&amp;quot;&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;quot;action&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;win game&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;   &lt;span class=&quot;nt&quot;&gt;&amp;quot;user&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;kale&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;quot;time&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;123456792&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;ip:&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;quot;134.26.26.26&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;err&quot;&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We can get &lt;em&gt;logstash&lt;/em&gt; to generate a proper &lt;em&gt;@timestamp&lt;/em&gt; field (later used by Kibana) and to add geolocalization using the IP address with the following filters:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# logstash.conf&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;filter&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# Parse the `time` attribute as a UNIX timestamp (seconds since epoch)&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# and store it in `@timestamp` attribute. This will be used in Kibana later on.&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;date&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;time&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;UNIX&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;# Add geolocalization attributes based on ip.&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;geoip&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;source&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;ip&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;output-load-data&quot;&gt;Output: load data&lt;/h3&gt;

&lt;p&gt;The output section is quite similar to the input one. You can output to stdout (handy for debugging purpose or to pipe into another command) as well as storing on S3, loading into a database such as ElasticSearch etc.&lt;/p&gt;

&lt;p&gt;Let’s output to stdout using the &lt;code&gt;ruby-debug&lt;/code&gt; format:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;filter&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;output&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;stdout&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;codec&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ruby&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;debug&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;and run &lt;em&gt;logstash&lt;/em&gt; to ensure that everything is wound up properly:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# $&amp;gt; logstash -f logstash.conf&lt;/span&gt;


&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;s2&quot;&gt;&amp;quot;action&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;start game&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;s2&quot;&gt;&amp;quot;user&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;bob&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;s2&quot;&gt;&amp;quot;time&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;123456789&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;s2&quot;&gt;&amp;quot;ip&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;56.42.42.42&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;s2&quot;&gt;&amp;quot;@version&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;1&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&amp;quot;@timestamp&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;1973-11-29T21:33:09.000Z&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;s2&quot;&gt;&amp;quot;path&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;s3://my-bucket/input-1.txt&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
         &lt;span class=&quot;s2&quot;&gt;&amp;quot;geoip&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                      &lt;span class=&quot;s2&quot;&gt;&amp;quot;ip&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;56.42.42.42&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
           &lt;span class=&quot;s2&quot;&gt;&amp;quot;country_code2&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;US&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
           &lt;span class=&quot;s2&quot;&gt;&amp;quot;country_code3&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;USA&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;s2&quot;&gt;&amp;quot;country_name&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;United States&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;s2&quot;&gt;&amp;quot;continent_code&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;NA&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
             &lt;span class=&quot;s2&quot;&gt;&amp;quot;region_name&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;NC&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
               &lt;span class=&quot;s2&quot;&gt;&amp;quot;city_name&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Raleigh&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
             &lt;span class=&quot;s2&quot;&gt;&amp;quot;postal_code&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;27668&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;s2&quot;&gt;&amp;quot;latitude&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;35&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;79769999999999&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
               &lt;span class=&quot;s2&quot;&gt;&amp;quot;longitude&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;78&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6253&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;s2&quot;&gt;&amp;quot;dma_code&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;560&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
               &lt;span class=&quot;s2&quot;&gt;&amp;quot;area_code&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;919&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;s2&quot;&gt;&amp;quot;timezone&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;America/New_York&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s2&quot;&gt;&amp;quot;real_region_name&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;North Carolina&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;s2&quot;&gt;&amp;quot;location&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;78&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6253&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;35&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;79769999999999&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Nice, all attributes were parsed properly and we now have &lt;em&gt;@timestamp&lt;/em&gt; and &lt;em&gt;geoip&lt;/em&gt; attributes.&lt;/p&gt;

&lt;p&gt;Our final configuration file looks like this:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;s3&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;bucket&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;my-bucket&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;credentials&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;my-aws-key&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;my-aws-token&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;region_endpoint&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;us-east-1&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# keep track of the last processed file&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;sincedb_path&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;./last-s3-file&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;codec&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;json&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;filter&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# set the event timestamp&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;date&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;time&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;UNIX&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;# add geoip attributes&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;geoip&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;source&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;ip&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;


&lt;span class=&quot;n&quot;&gt;output&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;elasticsearch_http&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;host&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;localhost&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;port&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;9200&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;There is quite a lot going on in just a few lines of code, eh?&lt;/p&gt;

&lt;p&gt;On top of this, &lt;em&gt;logstash&lt;/em&gt; keeps track of the inputs it has processed. So you can restart it without being concerned of data duplication.&lt;/p&gt;

&lt;p&gt;Although &lt;em&gt;logstash&lt;/em&gt; is written in &lt;em&gt;Ruby&lt;/em&gt;, it is really fast. The packaged version runs on &lt;em&gt;JRuby&lt;/em&gt; and it takes advantage of the JVM’s threading capabilities by throwing dozens of threads to parallelize data processing.&lt;/p&gt;

&lt;h2 id=&quot;elasticsearch--kibana&quot;&gt;ElasticSearch &amp;amp; Kibana&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;logstash&lt;/em&gt; is now ready to store data in &lt;em&gt;ElasticSearch&lt;/em&gt;. Getting ElasticSearch running on your machine &lt;a href=&quot;http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/setup.html&quot;&gt;takes minutes&lt;/a&gt;. &lt;a href=&quot;http://www.elasticsearch.org/overview/kibana/installation/&quot;&gt;Setup Kibana&lt;/a&gt;. A couple of clicks later, you’ve got a good looking dashboard.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/2014/Nov/kibana.jpg&quot; alt=&quot;kibana-dashboard&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;setting-this-up-in-production&quot;&gt;Setting this up in production&lt;/h3&gt;

&lt;p&gt;There is an excellent &lt;a href=&quot;https://github.com/lusis/chef-logstash&quot;&gt;chef cookbook&lt;/a&gt; to deploy &lt;em&gt;logstash&lt;/em&gt; in minutes.&lt;/p&gt;

&lt;p&gt;We decided to use a hosted solution to manage the ElasticSearch cluster. The top two seem to be &lt;a href=&quot;http://qbox.io&quot;&gt;qbox.io&lt;/a&gt; and &lt;a href=&quot;http://found.no&quot;&gt;found.no&lt;/a&gt;. &lt;a href=&quot;http://found.no&quot;&gt;found.no&lt;/a&gt; provides reserved instances and allows you to scale your cluster without any downtime.&lt;/p&gt;

&lt;p&gt;Kibana comes as a plugin on all hosted ElasticSearch services, so you just have to tick a checkbox and you’re ready to go!&lt;/p&gt;

&lt;p&gt;Performance wise, an ElasticSearch cluster with 4x &lt;a href=&quot;http://aws.amazon.com/ec2/instance-types/#Compute_Optimized&quot;&gt;Amazon EC2 c3.xlarge&lt;/a&gt; is sufficient to run Kibana reports on the last 30 days. This is about 3 billion data entries.&lt;/p&gt;

&lt;h2 id=&quot;elk---to-store-and-visualize-huge-amounts-of-data-in-minutes&quot;&gt;ELK - to store and visualize huge amounts of data in minutes&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;logstash&lt;/em&gt; enabled us to deliver an ETL pipeline that is highly performant, reliable and easy to maintain in a matter of hours. &lt;em&gt;Elastic Search&lt;/em&gt; is a no brainer database that ingests anything you throw at it and scales horizontally when need be. &lt;em&gt;Kibana&lt;/em&gt; allows you to make sense of your data and publish dashboards in minutes. I recommend you giving it a try to these powerful and simple tools.&lt;/p&gt;

&lt;p&gt;Kibana 4 is on the way, and a final version should be released in the next couple of months. It provides new features to generate business-oriented reports such as unique counts, funnels, etc. Until then, and to report on years of data, we’ve implemented a pipeline to load data into the data warehouse solution &lt;a href=&quot;http://aws.amazon.com/redshift/&quot;&gt;Amazon Redshift&lt;/a&gt;. But this is a whole other story.&lt;/p&gt;

&lt;p&gt;If this is a project you’re working on and would like some help with, reach out for a chat!&lt;/p&gt;
</content>
      </entry>
    
    
    
      <entry>
          <title>The Evolution of Brewhouse Software</title>
          <author>
            <name></name>
            <email></email>
          </author>
          <link href="http://brewhouse.io/blog/2014/09/30/the-evolution-of-brewhouse-software.html"/>
          <updated>2014-09-30T08:00:00-07:00</updated>
          <id>http://brewhouse.io/blog/2014/09/30/the-evolution-of-brewhouse-software</id>
          <content type="html">&lt;p&gt;
  &lt;img class=&quot;img-responsive&quot; alt=&quot;tea that looks like coffee&quot; src=&quot;/images/posts/2014/Sept/coff.jpg&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;&lt;em&gt;“Brewhouse – so you brew beer?”&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Everyone on the team has been asked this question at some point when introducing ourselves at an event or conference – it’s a valid question! However, we brew up a much different batch of awesome.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Brewhouse Software&lt;/em&gt;. It took about two weeks of defining and then redefining what was important about the brand and the creative process attached to it. The notion of coffee kept coming up. Code and coffee. Coffee and creating. And within the team, the fuss we made about a fantastic cup of high quality, craft coffee.&lt;/p&gt;

&lt;!-- break --&gt;

&lt;p&gt;Craft coffee is huge in the west coast, craft beer is surging and what &lt;em&gt;we&lt;/em&gt; actually do is create “craft software”. We really care about the tools used, the process to create the software and the people that we work with. Craft implies care and quality. So naturally, the perfect name for us was &lt;em&gt;Brewhouse Software&lt;/em&gt;.&lt;/p&gt;

&lt;h2 id=&quot;coffee-connection&quot;&gt;Coffee Connection&lt;/h2&gt;

&lt;p&gt;
  &lt;img class=&quot;img-responsive&quot; alt=&quot;coffee tools used&quot; src=&quot;/images/posts/2014/Sept/coffee-tools.jpg&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;Coffee &lt;em&gt;and&lt;/em&gt; tea (for those Brits out there!) – it’s not just associated with our name, &lt;a href=&quot;https://vimeo.com/101646332&quot;&gt;we love the stuff&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;As a group of individuals, design is important to us. Design in building software and design in the tools we use. We’re not a full on design firm but we try and learn as much as we can from other crafts.&lt;/p&gt;

&lt;p&gt;We think the elements that go into creating coffee overlap with how we create our software. Patience. The slow process of brewing a stellar cup of coffee applies to the work we do. We appreciate the relevance between the aspects of the coffee brewing world and how that relates to our processes.&lt;/p&gt;

&lt;h2 id=&quot;movin-on-up&quot;&gt;Movin’ On Up&lt;/h2&gt;

&lt;p&gt;
  &lt;img class=&quot;img-responsive&quot; alt=&quot;Map of location&quot; src=&quot;/images/posts/2014/Sept/map.jpg&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;The time was right. We added two more to the team of four and realized that it wouldn’t cost much more to have our own dedicated space.  It was always our intention to branch out, as our previous digs, a co-working space (&lt;a href=&quot;http://chloi.io/&quot;&gt;Chloi HQ&lt;/a&gt;), lacked the ability to brand and limited us in what we could do. After all, it is a shared space! We’re creative and we needed to be able to feel like the space we worked in was our own. So Brewhouse Software HQ was born.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;And then there were six.&lt;/em&gt;
&lt;img class=&quot;img-responsive&quot; alt=&quot;Gabe face and Lana face&quot; src=&quot;/images/posts/2014/Sept/gabe-me.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Another big step was adding two more to the team. &lt;a href=&quot;https://twitter.com/gabescholz&quot;&gt;Gabe&lt;/a&gt; was a welcome addition. He is an amazing developer, specializing in AngularJS. We now have the capacity to bring on more customers, and tackle more work with our products.&lt;/p&gt;

&lt;p&gt;Adding &lt;a href=&quot;https://twitter.com/MsTopham&quot;&gt;Lana&lt;/a&gt; (aka, Me) to the team was more of a leap. Having someone who wasn’t a developer or a designer – someone who read copy from a whole different perspective. That was big. We’re no longer just “techies”. We’re now a bonafide business with multi-functions and roles to help us grow.&lt;/p&gt;

&lt;h2 id=&quot;its-custom-baby&quot;&gt;It’s Custom, Baby&lt;/h2&gt;

&lt;p&gt;
  &lt;img class=&quot;img-responsive&quot; alt=&quot;Brewhouse HQ office view&quot; src=&quot;/images/posts/2014/Sept/office.jpg&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;Our 1,400 square ft. space is roomy – too big for six but egging us on to grow. It boasts a fully stocked kitchen of snacks, a deep selection of coffee and tea (it’s kinda our thing!) and small features which make it feel custom: like beanbag chairs, art created by &lt;a href=&quot;https://twitter.com/ChuckBergeron&quot;&gt;Chuck&lt;/a&gt; and our whiteboard on wheels, moonlighting as a Visual Timeline.&lt;/p&gt;

&lt;p&gt;
  &lt;img class=&quot;img-responsive&quot; alt=&quot;Vanruby event&quot; src=&quot;/images/posts/2014/Sept/vanruby.jpg&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;This large space calls for multi-purpose use. We’re fond of the startup community and feel it is our duty to share our space to allow others to host small meetups or &lt;a href=&quot;http://vanruby.org/2014-heroes.html&quot;&gt;larger events&lt;/a&gt;. This is our home, but we love to open the doors so others can enjoy our beautiful spread as much as we do.&lt;/p&gt;

&lt;p&gt;If you’re interested in working with us, stop by for a cup &lt;img src=&quot;/images/posts/2014/Sept/coffee-emoji.png&quot; alt=&quot;&quot; /&gt; or &lt;a href=&quot;http://brewhouse.io/#contact&quot;&gt;get in touch&lt;/a&gt;.&lt;/p&gt;
</content>
      </entry>
    
    
    
      <entry>
          <title>Ruby Kaigi 2014: Day 3</title>
          <author>
            <name>Godfrey Chan</name>
            <email>godfrey@brewhouse.io</email>
          </author>
          <link href="http://brewhouse.io/blog/2014/09/26/ruby-kaigi-2014-day-3.html"/>
          <updated>2014-09-26T11:00:00-07:00</updated>
          <id>http://brewhouse.io/blog/2014/09/26/ruby-kaigi-2014-day-3</id>
          <content type="html">&lt;p&gt;
  &lt;a href=&quot;/images/posts/ruby-kaigi-2014/the-end.jpg&quot;&gt;
    &lt;img class=&quot;img-responsive&quot; alt=&quot;#rubykaigi has finally come to an end!&quot; src=&quot;/images/posts/ruby-kaigi-2014/the-end.jpg&quot; /&gt;
  &lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;Continuing from &lt;a href=&quot;/blog/2014/09/18/ruby-kaigi-2014-day-1&quot;&gt;part 1&lt;/a&gt; and &lt;a href=&quot;/blog/2014/09/19/ruby-kaigi-2014-day-2&quot;&gt;part 2&lt;/a&gt;,
of my Ruby Kaigi blog posts, here is the final day at Ruby Kaigi!&lt;/p&gt;

&lt;!-- break --&gt;

&lt;h2 id=&quot;talks-will-be-available-soon&quot;&gt;Talks will be available soon™&lt;/h2&gt;

&lt;p&gt;Good news everyone! It looks like the wait is almost over – the official Ruby
Kaigi account has &lt;a href=&quot;https://twitter.com/rubykaigi/status/513917550128660481&quot;&gt;tweeted&lt;/a&gt;
that the talks will be made available on YouTube soon™. Follow them to get
notified when that happens!&lt;/p&gt;

&lt;h2 id=&quot;brief-notes-on-the-day-3-talks&quot;&gt;Brief notes on the day 3 talks&lt;/h2&gt;

&lt;p&gt;To be honest, I didn’t go to as many talks on the third day, not because they
weren’t great (those I attended was excellent), but because I was spending time
hanging out with the #rubyfriends I made at the conference. With that said, here
are some highlights of my last conference day:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Speeding up Rails 4.2&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;The &lt;a href=&quot;https://twitter.com/tenderlove&quot;&gt;@tenderlover&lt;/a&gt; session, in Japanese! Here
Aaron showed off his adequate Japanese skillz by delivering a full talk in
fluent Japanese; he even made a few puns in Japanese! For those who couldn’t
wait for the talk to become available (or those who don’t speak Japanese), you
can catch watch &lt;a href=&quot;http://www.confreaks.com/videos/4142-cascadiaruby2014-speed-up-rails-speed-up-your-code&quot;&gt;a similar talk&lt;/a&gt;
Aaron gave at &lt;a href=&quot;http://cascadiaruby.com/&quot;&gt;Cascadia Ruby&lt;/a&gt; today.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;The Ruby Challenge&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;In this session, &lt;a href=&quot;https://twitter.com/sikachu&quot;&gt;@sikachu&lt;/a&gt; hosted an interactive
Ruby game show. The contestants were picked from the audience randomly (we
were given a card with a unique number when we walked in) to answer five
questions about the performance characteristics of 10 pair of Ruby snippets
that performs the same task.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Tending the Ruby ecosystem&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;https://twitter.com/_zzak&quot;&gt;@_zzak&lt;/a&gt; shared his journey of becoming a open-
source contributor in the Ruby ecosystem, why it is important to give back
to the community and some pointers on how you can start contributing.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Ruby 2.1 in Production&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;In this closing keynote, the legendary &lt;a href=&quot;https://twitter.com/tmm1&quot;&gt;@tmm1&lt;/a&gt; shed
some light on Github’s experience on rolling out Ruby 2.1 in production, how
it improved the performance on their site, as well as his history with Ruby,
the story of him becoming a Ruby committer and more.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As always, there are many more great talks at the conference, so be sure to
check out the full &lt;a href=&quot;http://rubykaigi.org/2014/schedule&quot;&gt;conference schedule&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;see-you-next-year&quot;&gt;See you next year?&lt;/h2&gt;

&lt;p&gt;Overall, Ruby Kaigi has been a great conference for me. Here, you will find some
in-depth technical talks that you won’t find in other conferences.&lt;/p&gt;

&lt;p&gt;In addition to being an excellent platform for facilitating the exchange of
technical knowledge, it is also an incredible platform for cultural exchange. It
was a breath of fresh air for me to attend a conference outside of my “bubble”
in North America. It was a such a great learning experience for me to see some
of the Japanese Rubyist (and other Rubyist coming from around the world) are
using the language to solve problems in ways that I am not used to (or to solve
problems that I didn’t even think of before).&lt;/p&gt;

&lt;p&gt;
  &lt;a href=&quot;/images/posts/ruby-kaigi-2014/matz-lunch-box.jpg&quot;&gt;
    &lt;img class=&quot;img-responsive&quot; alt=&quot;Matz handing out lunch boxes&quot; src=&quot;/images/posts/ruby-kaigi-2014/matz-lunch-box.jpg&quot; /&gt;
  &lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;It also reminded me of why I loved being part of the Ruby community. Ruby Kaigi
is the conference where the creator of the language hands you your lunch box,
where the core committers hold signs at the door and greet you as you walk into
the conference venue every morning, where English and Japanese-speking Rubyists
learn and deliver talks in each other’s native language.&lt;/p&gt;

&lt;p&gt;
  &lt;a href=&quot;/images/posts/ruby-kaigi-2014/ruby-friends.jpg&quot;&gt;
    &lt;img class=&quot;img-responsive&quot; alt=&quot;My #rubyfriends!&quot; src=&quot;/images/posts/ruby-kaigi-2014/ruby-friends.jpg&quot; /&gt;
  &lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;I am very greatful to be part of this amazing conference and the greater Ruby
community. I am looking forward to coming back to Ruby Kaigi in the future – and
I hope see you there too!&lt;/p&gt;
</content>
      </entry>
    
    
    
      <entry>
          <title>Writing Rails-flavored AngularJS</title>
          <author>
            <name>Gabe Scholz</name>
            <email>gabe@brewhouse.io</email>
          </author>
          <link href="http://brewhouse.io/blog/2014/09/23/writing-rails-flavored-angularjs.html"/>
          <updated>2014-09-23T11:00:00-07:00</updated>
          <id>http://brewhouse.io/blog/2014/09/23/writing-rails-flavored-angularjs</id>
          <content type="html">&lt;p&gt;When I think about Ruby on Rails and AngularJS in the same codebase, I kind of cringe. After
spending more than a year trying to reconcile how Rails plays with Angular, not only
have I been unsuccessful, but I have not been satisfied with any of the suggested
solutions. There is a ton of material on the numerous Rails hacks you should employ
so that Rails and AngularJS feel compatible; however, I’m beginning to
wonder whether this problem is being approached from the wrong direction.
Instead, how can we hack AngularJS so that it plays nice with Rails?&lt;/p&gt;

&lt;!-- break --&gt;

&lt;p&gt;As a Ruby on Rails developer, I want to feel that I’m writing a Rails
application. I’m OK with a page refresh when I’m browsing between features. I don’t
want to feel like I have to submit to the ‘Single Page Application’ paradigm.
I want my JavaScript to be sprinkled on the page to augment my application. I
don’t want my JavaScript to consume the entire thing. AngularJS has a tendency
to pull you out of developing Rails in the Rails way.&lt;/p&gt;

&lt;p&gt;Rails comes bundled with vanilla jQuery, which is very easy to get started with,
but it is difficult to maintain. I love how Angular encapsulates, localizes and contains
JavaScript functionality. It’s maintainable, modular, and easier to understand
than a sputtering of jQuery files. It would be nice if I could focus on writing
JavaScript for components and leave the application bit to my Rails server.&lt;/p&gt;

&lt;p&gt;My solution to solve this problem is appropriately called
&lt;a href=&quot;https://github.com/BrewhouseTeam/angular_sprinkles&quot;&gt;Angular Sprinkles&lt;/a&gt;.
This gem hides all of the usual setup required for a tranditional AngularJS
application while dynamically generating one at run time. Developers use Rails
helper methods to enable two-way binding, render directives, and call evented
functions. It’s a cleaner approach to JavaScript in your Rails application.
Let’s take a look.&lt;/p&gt;

&lt;h2 id=&quot;binding-attributes&quot;&gt;Binding attributes&lt;/h2&gt;

&lt;p&gt;Two-way binding works right out of the box with Sprinkles. Wrapping objects
with the &lt;code&gt;bindable&lt;/code&gt; controller helper gives them the &lt;code&gt;bind&lt;/code&gt; method.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# app/controllers/user_controller.rb&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;UserController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ApplicationController&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;show&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@user&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bindable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And then in the view, you can either bind to the entire JSONified object with &lt;code&gt;@user.bind&lt;/code&gt;,
or just a single attribute with an argument.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;erb&quot;&gt;&lt;span class=&quot;x&quot;&gt;&amp;lt;!-- app/views/users/show.html.erb --&amp;gt;&lt;/span&gt;

&lt;span class=&quot;x&quot;&gt;&amp;lt;p&amp;gt;My name is: {{ &lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;%=&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;%&amp;gt;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; }}&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;&amp;lt;input type=&amp;quot;text&amp;quot; ng-model=&amp;quot;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;%=&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;%&amp;gt;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&amp;quot; /&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;inlined-directives&quot;&gt;Inlined directives&lt;/h2&gt;

&lt;p&gt;We’ll take this a step further by creating a directive to make our name blink very rapidly (obviously).
Let’s first write the directive.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;js&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// app/assets/javascripts/directives/blink.js&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;sprinkles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;directive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;blink&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$timeout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;restrict&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;A&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;transclude&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;scope&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;period&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;=&amp;#39;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;link&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;opacity&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

      &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;blink&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;$timeout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;nx&quot;&gt;opacity&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;opacity&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
          &lt;span class=&quot;nx&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;css&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;opacity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;opacity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
          &lt;span class=&quot;nx&quot;&gt;blink&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;period&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

      &lt;span class=&quot;nx&quot;&gt;blink&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And now we can include the directive in our view with the &lt;code&gt;directive&lt;/code&gt; helper.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;erb&quot;&gt;&lt;span class=&quot;x&quot;&gt;&amp;lt;!-- app/views/users/show.html.erb --&amp;gt;&lt;/span&gt;

&lt;span class=&quot;cp&quot;&gt;&amp;lt;%=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;directive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:blink&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;period&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;250&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;%&amp;gt;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;  &amp;lt;p&amp;gt;My name is: {{ &lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;%=&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;%&amp;gt;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; }}&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;&amp;lt;%&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;%&amp;gt;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;&amp;lt;input type=&amp;quot;text&amp;quot; ng-model=&amp;quot;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;%=&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;%&amp;gt;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&amp;quot; /&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;BOOM! Annoying blinking tag!&lt;/p&gt;

&lt;h2 id=&quot;evented-javascript-functions&quot;&gt;Evented JavaScript functions&lt;/h2&gt;

&lt;p&gt;Finally, it’s very important to be able to still use Angular’s built-in event
bindings. For example, clicking a button and showing an alert box. Sprinkles
solves this by allowing developers to inline Angular services with the &lt;code&gt;service&lt;/code&gt;
helper method.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;js&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// app/assets/javascripts/services/alert_me.js&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;sprinkles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;service&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;alertMe&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;alert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;My name is: &amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And then in the view,&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;erb&quot;&gt;&lt;span class=&quot;x&quot;&gt;&amp;lt;!-- app/views/users/show.html.erb --&amp;gt;&lt;/span&gt;

&lt;span class=&quot;x&quot;&gt;&amp;lt;button ng-click=&amp;quot;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;%=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;service&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:alert_me&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;%&amp;gt;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&amp;quot;&amp;gt;CLICK ME!&amp;lt;/button&amp;gt;&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;&amp;lt;input type=&amp;quot;text&amp;quot; ng-model=&amp;quot;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;%=&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;%&amp;gt;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&amp;quot; /&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;In all of these examples there was no additional setup involved. An Angular application
is generated behind the scenes, allowing the developer to keep focused on smaller
JavaScript components. Focused on the… sprinkles.&lt;/p&gt;

&lt;h2 id=&quot;let-us-know-what-you-think&quot;&gt;Let us know what you think&lt;/h2&gt;

&lt;p&gt;Angular Sprinkles is a new approach to Angular-Rails development. It’s for those of us
that love both of these great technologies and want to see them work together pleasantly.
Please &lt;a href=&quot;https://github.com/BrewhouseTeam/angular_sprinkles&quot;&gt;have a look at the gem&lt;/a&gt;
for more information on setup and leave some feedback. We would love to know what you think.&lt;/p&gt;
</content>
      </entry>
    
    
    
    
    
      <entry>
          <title>Ruby Kaigi 2014: Day 2</title>
          <author>
            <name>Godfrey Chan</name>
            <email>godfrey@brewhouse.io</email>
          </author>
          <link href="http://brewhouse.io/blog/2014/09/19/ruby-kaigi-2014-day-2.html"/>
          <updated>2014-09-19T11:00:00-07:00</updated>
          <id>http://brewhouse.io/blog/2014/09/19/ruby-kaigi-2014-day-2</id>
          <content type="html">&lt;p&gt;
  &lt;a href=&quot;/images/posts/ruby-kaigi-2014/i-feel-happy.jpg&quot;&gt;
    &lt;img class=&quot;img-responsive&quot; alt=&quot;I feel happy!&quot; src=&quot;/images/posts/ruby-kaigi-2014/i-feel-happy.jpg&quot; /&gt;
  &lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;Continuing from &lt;a href=&quot;/blog/2014/09/18/ruby-kaigi-2014-day-1&quot;&gt;my last post&lt;/a&gt;, here is
day 2 at Ruby Kaigi!&lt;/p&gt;

&lt;p&gt;(The talks are being &lt;a href=&quot;http://rubykaigi.org/2014&quot;&gt;live streamed&lt;/a&gt; on the Internet,
you can find the links at the middle of the Ruby Kaigi homepage.)&lt;/p&gt;

&lt;h2 id=&quot;matzs-keynote&quot;&gt;Matz’s Keynote&lt;/h2&gt;

&lt;p&gt;
  &lt;a href=&quot;/images/posts/ruby-kaigi-2014/matz.jpg&quot;&gt;
    &lt;img class=&quot;img-responsive&quot; alt=&quot;It&#39;s Matz!&quot; src=&quot;/images/posts/ruby-kaigi-2014/matz.jpg&quot; /&gt;
  &lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://twitter.com/yukihiro_matz&quot;&gt;Matsumoto-san&lt;/a&gt; gave a keynote address in the
morning to kick off the second day of Ruby Kaigi 2014.&lt;/p&gt;

&lt;!-- break --&gt;

&lt;p&gt;In the first half of the keynote, Matz did a very detailed analysis of all the
keynotes he has given in previous years at Ruby Kaigi, RubyConf and elsewhere –
a meta-keynote, perhaps. Matz recounted all the new ideas that he proposed at
the previous keynotes vs. when they were actually implemented and shipped, if at
all.&lt;/p&gt;

&lt;p&gt;For example, Matz talked about “staby lambda” (i.e. &lt;code&gt;-&amp;gt;{ ... }&lt;/code&gt;) in the RubyConf
2005 keynote and was implemented in Ruby 1.9 that shipped in 2007. (Matz
recalled that the feature was initially met with some backlash when he first
proposed it but turned out to be one of the most liked features when it was
finally shipped.) Similarly, keyword arguments and a redesign of local variables
scoping was proposed in 2004. The former made it 9 years later in Ruby 2.0, and
the latter was ultimately abandoned due to backwards-compatibility concerns.&lt;/p&gt;

&lt;p&gt;As you can see, some of these ideas took a long time to complete. Some of them
never made it. So far, 7 out of the 22 ideas that were proposed still haven’t
been implemented, yielding a “false rate” of ~32%.&lt;/p&gt;

&lt;p&gt;Perhaps partly due to this, Matz took a break from announcing new feature ideas
in his keynotes from 2011 to 2014. Meanwhile, the Ruby core team has focused on
stabilizing the 2.x release series (and have been doing that amazingly well).&lt;/p&gt;

&lt;p&gt;However, Matz said that “OSS community is like a shark, must move forward or we
will die”. With Ruby 2.x cruising along a stable and steady trajectory, Matz
thinks that it’s about time to dream big again and start thinking about the
features that would ultimately lead us to Ruby 3.0. This might take 10 years
again, but we must fuel ourselves with the desire to move forward because without it
Ruby 3.0 will not happen.&lt;/p&gt;

&lt;p&gt;With that said, Matz proposed some grand ideas: concurrency, a JIT compiler
(and potentially adopt the LLVM infrastructure) and static typing.&lt;/p&gt;

&lt;h3 id=&quot;static-typing&quot;&gt;Static Typing&lt;/h3&gt;

&lt;p&gt;The first two of those probably aren’t very controversial, but &lt;em&gt;static typing&lt;/em&gt;
…?!&lt;/p&gt;

&lt;p&gt;Well, all the new kids in the street these days, like Scala, TypeScript, Dart
and Go, they are all static typed language, so why not Ruby?&lt;/p&gt;

&lt;p&gt;This was proposed by Davide D’Agostino as feature &lt;a href=&quot;https://bugs.ruby-lang.org/issues/9999&quot;&gt;#9999&lt;/a&gt;
under the name “Type Annotation”. It looks like this:&lt;/p&gt;

&lt;pre&gt;def connect(r -&amp;gt; Stream, c -&amp;gt; Client) -&amp;gt; Fiber
  ...
end&lt;/pre&gt;

&lt;p&gt;It turns out that our long-time rival Python has a similar proposal under PEP
&lt;a href=&quot;http://legacy.python.org/dev/peps/pep-3107/&quot;&gt;#3107&lt;/a&gt; called Function Annotations.
It looks like this:&lt;/p&gt;

&lt;pre&gt;def connect(r: Stream, c: Client) -&amp;gt; Fiber:
  ...&lt;/pre&gt;

&lt;p&gt;As you can see, the two proposals are quite similar in their syntax (the Python
syntax conflicts with keyword arguments in Ruby, so the &lt;code&gt;-&amp;gt;&lt;/code&gt; form was proposed).&lt;/p&gt;

&lt;p&gt;It is worth noting that in the Python proposal, this is purely a form of
documentation – the specification does not require the implementations to
enforce the types at runtime (Dart doesn’t either). There is also an optional
type checker called “mypy” that uses these annotations to perform static type
checking.&lt;/p&gt;

&lt;h3 id=&quot;why-static-typing&quot;&gt;Why static typing?&lt;/h3&gt;

&lt;p&gt;Before going any deeper into this, perhaps it would be worthwhile to understand
the problems that static typing is supposed to solve. The follow reasons are
usually thrown around to support static typing:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;em&gt;Performance&lt;/em&gt;: the type information will allow the implementations to perform
more optimization which would lead to increased performance.&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;Compile-time check&lt;/em&gt;: to discover bugs early on.&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;Documentation&lt;/em&gt;: the type information is important to the consumer of the APIs
so it is better to have this explicitly conveyed rather than implied from the
method/argument names and so on.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;performance&quot;&gt;Performance&lt;/h4&gt;

&lt;p&gt;While no one would complain about a faster Ruby, Matz noted that we don’t really
need static typing for good performance. For example, V8 and LuaJIT are both
highly performant VMs for dynamically typed languages (JavaScript and Lua,
respectively).&lt;/p&gt;

&lt;p&gt;While it is true that techniques such as specialization can help improve
performance, it is possible to achieve that to a certain degree without explicit
type information, and we still haven’t explored that (and many other kind of
possible optimizations) yet.&lt;/p&gt;

&lt;p&gt;So overall, performance alone is not a good reason for introducing static typing
to Ruby.&lt;/p&gt;

&lt;h4 id=&quot;compile-time-check&quot;&gt;Compile-time check&lt;/h4&gt;

&lt;p&gt;Having the type information available allows for static analysis of the code and
would make refactoring easier as well.&lt;/p&gt;

&lt;p&gt;(Matz made a comment about test coverage here, but after translation I wasn’t
sure if it was sarcastic or not :P)&lt;/p&gt;

&lt;h4 id=&quot;documentation&quot;&gt;Documentation&lt;/h4&gt;

&lt;p&gt;Matz thinks that there is a value to the self-documenting nature of the type
annotation. It is much better than comments, because it will not get out of sync
with the code and contradicts how the code actually works. Furthermore, when
learning to use a library or when debugging &lt;a href=&quot;https://twitter.com/pcreux/status/481154970364825600&quot;&gt;some code that you didn’t write
(this morning)&lt;/a&gt;, it spares
you from having to dig deep into the internals just to figure out what the
method returns.&lt;/p&gt;

&lt;p&gt;This point is the primary intention of PEP #3107 as well.&lt;/p&gt;

&lt;h3 id=&quot;why-not-static-typing&quot;&gt;Why not static typing?&lt;/h3&gt;

&lt;p&gt;With all that said, are there any reasons to not introduce static typing? Matz
gave a few things to consider:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;It works™ without it&lt;/li&gt;
  &lt;li&gt;It is against duck typing&lt;/li&gt;
  &lt;li&gt;It will be optional&lt;/li&gt;
  &lt;li&gt;DRY&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;duck-typing&quot;&gt;Duck typing&lt;/h4&gt;

&lt;p&gt;Perhaps one of the biggest drawback with static typing is that it works against
duck typing. Currently, it is possible to pass a string-like object that doesn’t
inherit from &lt;code&gt;String&lt;/code&gt;. With static typing, this is not possible.&lt;/p&gt;

&lt;p&gt;A Ruby without duck typing… is that really still Ruby?&lt;/p&gt;

&lt;h4 id=&quot;optional&quot;&gt;Optional&lt;/h4&gt;

&lt;p&gt;Naturally, if such a feature is introduced, it will have to be optional to
maintain backwards compatibility with existing code. However, Matz asserts that
optional typing has no use as the compiler’s hands are tied as soon as you call
into an untyped method. (TypeScript has the same problem.)&lt;/p&gt;

&lt;h4 id=&quot;dry&quot;&gt;DRY&lt;/h4&gt;

&lt;p&gt;Rubist, especially Rails developers, like to avoid duplication. To Matz, the
type information seems like a lot of duplication (between the code and the
declaration, a problem that is more evident in small functions). Matz hates
writing types.&lt;/p&gt;

&lt;h3 id=&quot;soft-typing--type-inference&quot;&gt;Soft-typing / Type inference&lt;/h3&gt;

&lt;p&gt;Matz also mentioned a related technique that is perhaps more suitable for
Ruby.&lt;/p&gt;

&lt;p&gt;Soft-typing is a kind of best-effort type checker that works based on the code
structure and duck typing, so no declaration is required.&lt;/p&gt;

&lt;p&gt;For example, consider the follow code:&lt;/p&gt;

&lt;pre&gt;a = 1 # type of a is integer

def foo(a)
  print a.to_int
end

foo(1) # OK: 1 has to_int
food(&quot;a&quot;) # NG: &quot;a&quot; doesn&#39;t have to_int&lt;/pre&gt;

&lt;p&gt;As you can see, the compiler can deduce from the code structure that anything
passed into &lt;code&gt;foo&lt;/code&gt; must respond to &lt;code&gt;to_int&lt;/code&gt; and can reject anything that doesn’t
have that method.&lt;/p&gt;

&lt;p&gt;In this case, a “type” is really a represented by classes as well as a set of
methods (name + aguments type + return value type). This is going to be very
difficult to do in Ruby because of dynamic requires (&lt;code&gt;require some_variable&lt;/code&gt;),
dynamicly defined methods (&lt;code&gt;defined_method&lt;/code&gt;) and meta-programming features like
&lt;code&gt;method_missing&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;subset&quot;&gt;Subset&lt;/h3&gt;

&lt;p&gt;It is possible to target this feature for just a subset of the Ruby language
(for example, exclude programs that use dynamic &lt;code&gt;require&lt;/code&gt;s). This fits nicely
into Ruby’s philosophy as backwards compatibility is valued very highly by Matz
and the Ruby team.&lt;/p&gt;

&lt;p&gt;With that, we will have “two languages in one” – a soft-typed language (the
“subset”) and the dynamically typed language (the “superset”). The use of the
former will be highly encouraged, but it could fall back into the superset if
necessary.&lt;/p&gt;

&lt;h3 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;All of these things mentioned here are just ideas that might or might not
happen. However, it is time to start building new things that would pave the way
to Ruby 3.0.&lt;/p&gt;

&lt;p&gt;You can read more about this in Matz interview in the next volume of the Japan
Linux magazine. I highly recommend that you watch this talk when it becomes
available!&lt;/p&gt;

&lt;h2 id=&quot;other-talks&quot;&gt;Other talks&lt;/h2&gt;

&lt;p&gt;Besides Matz’s keynote, there are many other talks worth watching too. Here are
some of the talks I attended today.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;A Just in Time compiler for CRuby&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;In this talk, &lt;a href=&quot;https://twitter.com/imasahiro&quot;&gt;@imasahiro&lt;/a&gt; showed us how he
built an experimental JIT compiler called &lt;a href=&quot;https://github.com/imasahiro/rujit&quot;&gt;RuJIT&lt;/a&gt;.&lt;/p&gt;

    &lt;p&gt;&lt;em&gt;RuJIT&lt;/em&gt; is a Trace-based JIT compiler, similar to the approach taken by
Firefox’s JS VM. It is based on the current version of CRuby, and resulted in
~2-5X speedup compared to trunk (and up to 100X in some cases).&lt;/p&gt;

    &lt;p&gt;In his talk, @imasahiro covered the details of his design, so if this sounds
interesting to you, definitely go catch it online when it becomes available.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Archeology of Ruby: Removed Features&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;This is a short (and sweet!) talk from &lt;a href=&quot;https://twitter.com/znz&quot;&gt;@znz&lt;/a&gt; that
tells us about the history of Ruby by going through the features that were
removed from the Ruby language.&lt;/p&gt;

    &lt;p&gt;Attending this talk was like learning about a city’s history in a museum. If
that’s something you enjoy doing, I think you will probably like this talk
too!&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Going the distance&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;https://twitter.com/schneems&quot;&gt;@schneems&lt;/a&gt; talked about how he learned to use
the Levenshtein distance algorithm to solve his typo problem, which resulted
in a &lt;a href=&quot;https://github.com/rails/rails/pull/15497&quot;&gt;pull request&lt;/a&gt; to Rails that
gives helpful suggestions when you mistyped a command.&lt;/p&gt;

    &lt;p&gt;If you always wondered what “algorithms” are about and were afraid to learn
them, this talk is for you!&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;wrapping-up&quot;&gt;Wrapping Up&lt;/h2&gt;

&lt;p&gt;That about wraps up my notes for Day 2 of Ruby Kaigi 2014. Of course, there are
many other talks that are equally interesting. I encourage you to check out the
&lt;a href=&quot;http://rubykaigi.org/2014/schedule&quot;&gt;conference schedule&lt;/a&gt; for a full list of
talks.&lt;/p&gt;

&lt;p&gt;Stay tuned for part 3!&lt;/p&gt;
</content>
      </entry>
    
    
    
      <entry>
          <title>Ruby Kaigi 2014: Day 1</title>
          <author>
            <name>Godfrey Chan</name>
            <email>godfrey@brewhouse.io</email>
          </author>
          <link href="http://brewhouse.io/blog/2014/09/18/ruby-kaigi-2014-day-1.html"/>
          <updated>2014-09-18T11:00:00-07:00</updated>
          <id>http://brewhouse.io/blog/2014/09/18/ruby-kaigi-2014-day-1</id>
          <content type="html">&lt;p&gt;
  &lt;a href=&quot;/images/posts/ruby-kaigi-2014/japan.jpg&quot;&gt;
    &lt;img class=&quot;img-responsive&quot; alt=&quot;I&#39;m in Japan!&quot; src=&quot;/images/posts/ruby-kaigi-2014/japan.jpg&quot; /&gt;
  &lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;ZOMG! I’m in Japan!&lt;/p&gt;

&lt;p&gt;This year, I am fortunate enough to be one of the 750 attendees at Ruby Kaigi in
Tokyo. If you are among one of them, I’d love to meet you and chat about Ruby,
Rails, etc. Just look for my name tag!&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;img-responsive img-right&quot; alt=&quot;My name tag&quot; src=&quot;/images/posts/ruby-kaigi-2014/name-tag.jpg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;For those of you who couldn’t make it this year, don’t feel left out! I’ll be
writing a three-part blog post (one for each day) to cover the things I’ve
learned here, so you can watch the talks online that interestes you when they
become available. (You can also watch the &lt;a href=&quot;http://rubykaigi.org/2014&quot;&gt;live streams&lt;/a&gt;!)&lt;/p&gt;

&lt;p&gt;Without further ado, here is day 1 at Ruby Kaigi!&lt;/p&gt;

&lt;!-- break --&gt;

&lt;h2 id=&quot;cool-stuff&quot;&gt;Cool Stuff&lt;/h2&gt;

&lt;p&gt;
  &lt;a href=&quot;/images/posts/ruby-kaigi-2014/headset.jpg&quot;&gt;
    &lt;img class=&quot;img-responsive&quot; alt=&quot;Translation headset&quot; src=&quot;/images/posts/ruby-kaigi-2014/headset.jpg&quot; /&gt;
  &lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;All the talks are real-time translated into English and Japanese via these
headsets.&lt;/p&gt;

&lt;p&gt;
  &lt;a href=&quot;/images/posts/ruby-kaigi-2014/goodies.jpg&quot;&gt;
    &lt;img class=&quot;img-responsive&quot; alt=&quot;This machine sells the goodies&quot; src=&quot;/images/posts/ruby-kaigi-2014/goodies.jpg&quot; /&gt;
  &lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;You can purchase some Ruby Kaigi goodies from this veding machine.&lt;/p&gt;

&lt;p&gt;
  &lt;a href=&quot;/images/posts/ruby-kaigi-2014/bento-box.jpg&quot;&gt;
    &lt;img class=&quot;img-responsive&quot; alt=&quot;A bento box!&quot; src=&quot;/images/posts/ruby-kaigi-2014/bento-box.jpg&quot; /&gt;
  &lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;Bento boxes for lunch!&lt;/p&gt;

&lt;p&gt;
  &lt;a href=&quot;/images/posts/ruby-kaigi-2014/ios8.jpg&quot;&gt;
    &lt;img class=&quot;img-responsive&quot; alt=&quot;iOS 8: The biggest release ever.&quot; src=&quot;/images/posts/ruby-kaigi-2014/ios8.jpg&quot; /&gt;
  &lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;Rule #1 and #2 of Ruby Kaigi – don’t upgrade your iPhone with the conference wifi!&lt;/p&gt;

&lt;h2 id=&quot;cruby-committers-whos-who-in-2014&quot;&gt;CRuby Committers Who’s Who in 2014&lt;/h2&gt;

&lt;p&gt;
  &lt;a href=&quot;/images/posts/ruby-kaigi-2014/zzak.jpg&quot;&gt;
    &lt;img class=&quot;img-responsive&quot; alt=&quot;It&#39;s @_zzak!&quot; src=&quot;/images/posts/ruby-kaigi-2014/zzak.jpg&quot; /&gt;
  &lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://twitter.com/nagachika&quot;&gt;@nogachika&lt;/a&gt;, who is known for his &lt;a href=&quot;http://d.hatena.ne.jp/nagachika/searchdiary?word=%2A%5Bchanges%5D&quot;&gt;ruby-trunk-changes&lt;/a&gt;
commentary (it’s like &lt;a href=&quot;http://rails-weekly.goodbits.io&quot;&gt;Rails weekly&lt;/a&gt; but for
Ruby trunk), gave a behind-the-scene view of CRuby development.&lt;/p&gt;

&lt;p&gt;There are 84 registered accounts on SVN (including a bot), 50 of which who had
at least one commit since Ruby Kaigi 2013. @nogachika introduced some of them in
his talk, including:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://twitter.com/yukihiro_matz&quot;&gt;@matz&lt;/a&gt; who invented Ruby (and
&lt;a href=&quot;https://github.com/mruby/mruby&quot;&gt;mruby&lt;/a&gt;), whose only commit of the year was to
&lt;a href=&quot;https://github.com/ruby/ruby/commit/ae9bda718da8181d47f379a243e384f892448c50&quot;&gt;bump the Ruby version&lt;/a&gt;
(Matz focuses more on the design aspect of Ruby as well as mruby development
these days).&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://twitter.com/koichisasada&quot;&gt;@ko1&lt;/a&gt; who introduced incremental GC in Ruby 2.2&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://twitter.com/nari3&quot;&gt;@nari&lt;/a&gt; who introduced Symbol GC, which played a key role in Rails’ plan to target 2.2+ exclusively in Rails 5&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://twitter.com/tmm1&quot;&gt;@tmm1&lt;/a&gt; who introduced many performance optimizations, including speeding up &lt;code&gt;Hash#[]&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://twitter.com/znz&quot;&gt;@kazu&lt;/a&gt; the typo fixer&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Watch the talk online to get to know more of these people who built the language
we love!&lt;/p&gt;

&lt;h2 id=&quot;building-the-ruby-interpreter--what-is-easy-and-what-is-difficult&quot;&gt;Building the Ruby interpreter – What is easy and what is difficult?&lt;/h2&gt;

&lt;p&gt;
  &lt;a href=&quot;/images/posts/ruby-kaigi-2014/ko1.jpg&quot;&gt;
    &lt;img class=&quot;img-responsive&quot; alt=&quot;@ko1 giving his talk&quot; src=&quot;/images/posts/ruby-kaigi-2014/ko1.jpg&quot; /&gt;
  &lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://twitter.com/koichisasada&quot;&gt;@ko1&lt;/a&gt; works on Matz’s Ruby team at Heroku.
Over the years, he has accumulated an impressive list of contributions to the
Ruby language/implementation, including native thread locking, fibers, the new
method cache, flonum, RGenGC and incremental GC in Ruby 2.2 (more about it in
vol 0048 of the &lt;a href=&quot;http://magazine.rubyist.net/&quot;&gt;Rubyist Magazine&lt;/a&gt; and his talk
at the upcoming &lt;a href=&quot;http://rubyconf.org/&quot;&gt;RubyConf 2014&lt;/a&gt;).&lt;/p&gt;

&lt;h3 id=&quot;tradeoffs&quot;&gt;Tradeoffs&lt;/h3&gt;

&lt;p&gt;The overarching theme of his talk is about making tradeoffs. Like many things in
life, most decisions we make as programmers are tradeoffs that affects multiple
intertwined goals that are often in conflict with each other. As engineers, it
is our job to understand about these tradeoffs, carefully consider the factors
in-play and overcome these challenges.&lt;/p&gt;

&lt;h3 id=&quot;parallel-execution&quot;&gt;Parallel Execution&lt;/h3&gt;

&lt;p&gt;One of the specific example @ko1 talked about is the problem of supporting
parallel execution in Ruby.&lt;/p&gt;

&lt;p&gt;Simply providing parallel threads (i.e. getting rid of the GVL) to enable
parallel execution is actually a relatively easy task. The difficulties here is
to maintain good programming experience, good serial execution performance (due
to increased synchronization) and CRuby source code quality/maintainability.&lt;/p&gt;

&lt;p&gt;Running multiple threads in parallel under the typical “share everything”
programming model often results in subtle bugs that falls under the following
categories: race conditions, atomicity violation and order violation. Making
matters worse, the non-deterministic nature of parallel execution make these bugs
very difficult to reproduce. All of these problems contribute negatively to the
“programmer happiness”, which is a very important cornerstone of the Ruby
language.&lt;/p&gt;

&lt;p&gt;
  &lt;a href=&quot;/images/posts/ruby-kaigi-2014/thread-wizards.jpg&quot;&gt;
    &lt;img class=&quot;img-responsive&quot; alt=&quot;Wizards use threads&quot; src=&quot;/images/posts/ruby-kaigi-2014/thread-wizards.jpg&quot; /&gt;
  &lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;@ko1 believes that the tradeoff here is not unlike other problems we faced in
the past, such as the safety/performance tradeoff of garbage collection vs
manual memory management. In this case, parallel threads is like manual memory
management – while it’s highly performant and flexible, it’s also extremely
error-prone and very difficult to reason about. He believes that Ruby’s job is
to provide an alternative programming model for parallel execution that is safe
and programmer-friendly, as well as good debugging tools. Ultimately these will
be preferred over utilizing threads directly for most applications, just like
how garbage collection is now preferred by many programmers.&lt;/p&gt;

&lt;p&gt;He then briefly introduced a few ideas for implementing such models in Ruby and
some academic research on making parallel execution deterministic.&lt;/p&gt;

&lt;h3 id=&quot;gc-benchmarking-community-and-more&quot;&gt;GC, Benchmarking, Community and more!&lt;/h3&gt;

&lt;p&gt;In the rest of his talk, @ko1 did a similar analysis on other topics such as
Ruby garbage collection, making measurements and becoming a CRuby committer. If
those topics interests you, be sure to check out this talk!&lt;/p&gt;

&lt;h2 id=&quot;symbol-gc&quot;&gt;Symbol GC&lt;/h2&gt;

&lt;p&gt;
  &lt;a href=&quot;/images/posts/ruby-kaigi-2014/symbols.jpg&quot;&gt;
    &lt;img class=&quot;img-responsive&quot; alt=&quot;@nari talking about symbol GC&quot; src=&quot;/images/posts/ruby-kaigi-2014/symbols.jpg&quot; /&gt;
  &lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://twitter.com/nari3&quot;&gt;@nari&lt;/a&gt; is a CRuby committer from NaCl. He gave an
overview of the “Symbol GC” feature he implemented for Ruby 2.2.&lt;/p&gt;

&lt;p&gt;As I mentioned earlier, this is one of the key drivers for the Rails team to
target Ruby 2.2 in Rails 5. A common misconception about this feature is to
think that all symbols will be GC-ed so we don’t have to worry about it anymore.
As @nari shows us in this talk, it turns out this is not entirely correct.&lt;/p&gt;

&lt;p&gt;To understand this, we first have to understand the problems associated with
using symbols in CRuby 2.1 and below. Currently, once a symbol is allocated,
they are associated with a fixed numeric ID internally, and are never garbage
collected. This includes symbol literals (&lt;code&gt;:a_literal&lt;/code&gt; in Ruby code), dynamic
symbols created in Ruby land (e.g. &lt;code&gt;&quot;a string&quot;.to_sym&lt;/code&gt;) and other side-effects
(e.g. defining a method “foo” allocates a symbol &lt;code&gt;:foo&lt;/code&gt; for use in the methods
table).&lt;/p&gt;

&lt;p&gt;The pitfall associated with this approach is that over the execution time of
your program, you could accumulate many symbols that you no longer need, thus
leaking memory. This is particularly problematic for programs that have a long
lifetime and handles a lot of user inputs, as it has the potential to be
exploited by malicious users and cause DOS attacks.&lt;/p&gt;

&lt;p&gt;Web applications written in Ruby (e.g. Rails applications) happens to fit this
description perfectly. For example, the following piece of pseudo-code is bad:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
value = store.fetch(params[:key].to_sym)
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;As you can see, a user supplied string is being converted into a symbol (a
dynamic symbol allocation). This is problematic, because an attack could send
a bunch of different strings under this parameter and eventually cause the
server to crash when it runs out of memory. In fact, this has been a common
source of security issue in Rails (e.g. CVE-2012-3424), which explains the
desire to require Ruby 2.2 in Rails 5.&lt;/p&gt;

&lt;p&gt;Currently, symbols cannot be GC’ed because they need to maintain the same ID
for the C code that depends on it (for example, if the corresponding symbol has
been GC’ed as the C code looks it up via &lt;code&gt;ID2SYM&lt;/code&gt;, then things would break).&lt;/p&gt;

&lt;p&gt;To solve this problem, symbols are now classified into two categories – immortal
symbols and mortal symbols. As the name implies, immortal symbols are not
garbage collected by the runtime and have a stable ID, so baiscally how symbols
work today. Mortal symbols, on the other hand, can be garbage collected by the
runtime just like any other objects. They don’t have an ID, so they are usually
only useful in Ruby-land.&lt;/p&gt;

&lt;p&gt;As it becomes necessary, mortal symbols will be “pinned-down” by the runtime and
becomes immortal symbols. Because they are marked as “uncollectable”, their
memory address becomes their IDs and hence they can be used in C code. For
example, consider this piece of code:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
define_method(method_name.to_sym) { ... }
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Here, the runtime first allocates a mortal symbol (from &lt;code&gt;method_name.to_sym&lt;/code&gt;)
that can be garbage collected. As it is passed into &lt;code&gt;define_method&lt;/code&gt;, however,
the runtime would convert it into a immortal symbol so that it could be used in
the methods table. Once this happens, the symbol can no longer be garbage
collected – it is impossible to convert an immortal symbol back into a mortal
symbol. Also, if an immortal symbol with the same name has previously been
allocated from a different place, the same symbol will be reused here instead.&lt;/p&gt;

&lt;p&gt;While this approach eliminates a entire class of potential bugs, it also
introduces some new pitfalls. In particular, if a dynamic symbol (mortal by
default) is converted into an immortal symbol, your program will suffer from the
same vulnerability as before.&lt;/p&gt;

&lt;p&gt;Therefore, as application programmers, we still need to be mindful of when a
dynamic symbol might be converted into an immortal symbol. While you probably
aren’t defining dynamic methods based on user inputs (if you are, you might
have bigger problems to worry about!), it is possible that passing a dynamic
symbol into a C function might cause it to become immortalized (e.g. when the C
code calls &lt;code&gt;SYM2ID&lt;/code&gt; on it). While most of the CRuby C code has been refactored
to avoid this landmine, it is still a common problem in third-party extensions.
@nari noted that our ecosystem is still undergoing a transition period, and
things would get better overtime (Rails 5 is probably going to help accelerate
that as well).&lt;/p&gt;

&lt;p&gt;I highly recommend that you watch this talk, especially if you maintain a gem
and/or C-extension.&lt;/p&gt;

&lt;h2 id=&quot;transactional-memory-and-ruby&quot;&gt;Transactional Memory and Ruby&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://twitter.com/ReiOdaira&quot;&gt;@ReiOdaira&lt;/a&gt; and &lt;a href=&quot;https://twitter.com/brucehsu&quot;&gt;@brucehsu&lt;/a&gt;
did two different talks on how transactional memory can benefit the Ruby
language.&lt;/p&gt;

&lt;p&gt;Transactional memory is similar to how a database transaction works. It allows
the programmer to place a block of code inside a memory transaction, during
which all memory operations will be perceived as a single atomic operation from
other threads (or fails and the operations are rolledback and aren’t observable
from outside of the thread that requested the transaction).&lt;/p&gt;

&lt;p&gt;@ReiOdaira’s talk focuses on his research at IBM that utilize hardware-based
transactional memory to reduce Ruby’s dependency on the global VM lock (GVL)
thus improving the degree of achievable parallization.&lt;/p&gt;

&lt;p&gt;@brucehsu’s talk focuses on software-based transactional memory techniques, and
showed the world how it could be done by writing a new Ruby VM in Go, aptly
called &lt;a href=&quot;https://github.com/brucehsu/GobiesVM&quot;&gt;Gobies&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you are interested in how these cutting edge technologies can be used in
Ruby, these talks are for you!&lt;/p&gt;

&lt;h2 id=&quot;wrapping-up&quot;&gt;Wrapping Up&lt;/h2&gt;

&lt;p&gt;That about wraps up my notes for Day 1 of Ruby Kaigi 2014. Of course, there are
many other talks that are equally interesting. However, it’s already 3AM here in
Japan and I should probably get some rest ;) I encourage you to check out the
&lt;a href=&quot;http://rubykaigi.org/2014/schedule&quot;&gt;conference schedule&lt;/a&gt; for a full list of
talks.&lt;/p&gt;

&lt;p&gt;Stay tuned for part 2 &amp;amp; 3!&lt;/p&gt;
</content>
      </entry>
    
    
    
      <entry>
          <title>Say Hello to Roundup Roger</title>
          <author>
            <name>Jenn Cooper</name>
            <email>cooper.jennl@gmail.com</email>
          </author>
          <link href="http://brewhouse.io/2014/06/27/say-hello-to-roundup-roger.html"/>
          <updated>2014-06-27T15:36:00-07:00</updated>
          <id>http://brewhouse.io/2014/06/27/say-hello-to-roundup-roger</id>
          <content type="html">&lt;p&gt;
  &lt;a href=&quot;https://github.com/BrewhouseTeam/roundup-roger&quot;&gt;
    &lt;img class=&quot;img-right img-responsive&quot; alt=&quot;This Week in Rails Logo&quot; src=&quot;https://s3.amazonaws.com/roundup-roger/roundup_roger_logo1.png&quot; /&gt;
  &lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;At Brewhouse, we spend Fridays doing creative work. During these wonderful days, we focus on interesting hacks and innovative projects. Over the last 10 weeks, I’ve been able to spend my Fridays working on a project with &lt;a href=&quot;https://github.com/pcreux&quot;&gt;Philippe Creux&lt;/a&gt; called &lt;a href=&quot;https://github.com/BrewhouseTeam/roundup-roger&quot;&gt;Roundup Roger&lt;/a&gt;. Roundup Roger is an open source tool to wrap-up a team’s day via email. A wrap-up is quite similar to an agile standup (or scrum), but at the end of the business day.&lt;/p&gt;

&lt;p&gt;You’re probably thinking, “How anti-social of you!”.  Yes, you’re right, we’re endorsing email correspondence over face-to-face interaction. But we’re talking about wrap-up meetings here, not beer Fridays.&lt;/p&gt;

&lt;p&gt;The point of a wrap-up is to educate the team on:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;What you’ve accomplished during the last business day&lt;/li&gt;
  &lt;li&gt;What you’ll be working on next&lt;/li&gt;
  &lt;li&gt;Whether you’ve hit any blockers that are impeding your progress&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- break --&gt;

&lt;p&gt;Email works well in this situation because it prevents &lt;em&gt;Chatty Carls&lt;/em&gt; from commandeering your meeting, and allows concise discourse that can be re-visited later if needed. Also, for those of us who have trouble with &lt;a href=&quot;http://www.joelonsoftware.com/articles/fog0000000022.html&quot;&gt;context switching&lt;/a&gt;, it can be easier to communicate the work you’ve accomplished by writing it out as opposed to communicating verbally.&lt;/p&gt;

&lt;p&gt;Another benefit of an email wrap-up is a flexible response time. Some of our team members finish later in the day than others, and often accomplish a lot after the in-person wrap-up happens. With Roundup Roger, team members have the flexibility to respond to the reminder email at any time. As long as they send their email before the roundup is sent in the morning, their contributions will be included.&lt;/p&gt;

&lt;h2 id=&quot;how-does-roundup-roger-work&quot;&gt;How Does Roundup Roger Work?&lt;/h2&gt;

&lt;p&gt;Reminder emails are sent out daily at a scheduled time. Each team member responds to the reminder email:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/reminder-email.png&quot; alt=&quot;reminder email&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;The following day, a roundup email is sent to the entire team with each member’s contributions from the previous day:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/roundup-email.png&quot; alt=&quot;roundup email&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;technical-details&quot;&gt;Technical Details&lt;/h2&gt;

&lt;p&gt;Roundup Roger is a &lt;a href=&quot;http://www.sinatrarb.com/&quot;&gt;Sinatra&lt;/a&gt; app, that capitalizes on &lt;a href=&quot;https://github.com/jeremyevans/sequel&quot;&gt;Sequel’s&lt;/a&gt; ORM layer.&lt;/p&gt;

&lt;p&gt;After using &lt;a href=&quot;http://rubyonrails.org/&quot;&gt;Rails&lt;/a&gt; over the last couple of years, I had become soft. It’s not the best realization to find you’ve become accustomed to having everything done for you. It took me a few weeks to stop trying to use &lt;a href=&quot;http://guides.rubyonrails.org/active_record_querying.html&quot;&gt;ActiveRecord&lt;/a&gt; when querying the database and in the end, I had a good cry and got over myself. I then became much better at using the Sequel gem’s ORM layer.&lt;/p&gt;

&lt;p&gt;I’ve also realized that Sinatra is not really a framework at all, but more of a library. I suppose this is why people call it a ‘micro-framework’.&lt;/p&gt;

&lt;p&gt;“Hey Sinatra! Thanks for nothing!”&lt;/p&gt;

&lt;p&gt;Jokes aside, Sinatra ended up being a great tool to solve this problem. As it turns out, we didn’t really need much of the ‘good stuff’ that comes along with Rails. The app itself doesn’t have a web UI and is meant to be run solely via scheduled tasks in production.&lt;/p&gt;

&lt;h3 id=&quot;building-emails&quot;&gt;Building Emails&lt;/h3&gt;

&lt;p&gt;To build emails, we used &lt;a href=&quot;https://github.com/solnic/virtus&quot;&gt;Virtus&lt;/a&gt; to create a common interface for defining attributes. It allowed us to do things like this:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;  &lt;span class=&quot;no&quot;&gt;OutboundEmail&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;recipients&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;subject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;subject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;When a user replies to a reminder email, we retrieve the payload passed from &lt;a href=&quot;https://www.mandrill.com/&quot;&gt;Mandrill&lt;/a&gt;, and grab the name, email and body, such that we can later apply these to the roundup email.&lt;/p&gt;

&lt;p&gt;When we build the roundup email, we strip each email body to remove signatures. This was somewhat tricky, as different email clients apply signatures differently.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;  &lt;span class=&quot;no&quot;&gt;PATTERNS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;—\n+Sent&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;--&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;&amp;gt;? ?On&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;freeze&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;stripped_body&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;PATTERNS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pattern&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
      &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;body&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strip_pattern&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pattern&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strip&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;strip_pattern&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pattern&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gsub&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/\n(&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pattern&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;| [^\n]+\n?[^\n]+\n+\&amp;gt;).*/m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We then separate each person’s contribution with a random ascii separator, because, WHY NOT?&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;separator&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;
      &lt;span class=&quot;s2&quot;&gt;&amp;quot;█║▌│ █│║▌ ║││█║▌ │║║█║ │║║█║ █│║▌&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;s2&quot;&gt;&amp;quot;▇ ▅ █ ▅ ▇ ▂ ▃ ▁ ▁ ▅ ▃ ▅ ▅ ▄ ▅&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;s2&quot;&gt;&amp;quot;★★★★★★★★★★★★★★★★★★&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;s2&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sample&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;sending-emails&quot;&gt;Sending Emails&lt;/h3&gt;

&lt;p&gt;We use &lt;a href=&quot;https://github.com/benprew/pony&quot;&gt;Pony&lt;/a&gt; to send emails. This is where the magic happens…&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SendOutboundEmail&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;email&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;Pony&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mail&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
      &lt;span class=&quot;ss&quot;&gt;:to&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;email&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;ss&quot;&gt;:from&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ENV&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;EMAIL_FROM&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;ss&quot;&gt;:subject&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;email&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;ss&quot;&gt;:html_body&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;email&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;ss&quot;&gt;:via&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:smtp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;ss&quot;&gt;:via_options&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;ss&quot;&gt;:address&lt;/span&gt;        &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ENV&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;SMTP_ADDRESS&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;ss&quot;&gt;:port&lt;/span&gt;           &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ENV&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;SMTP_PORT&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;ss&quot;&gt;:enable_starttls_auto&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;ss&quot;&gt;:user_name&lt;/span&gt;      &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ENV&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;SMTP_USER_NAME&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;ss&quot;&gt;:password&lt;/span&gt;       &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ENV&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;SMTP_PASSWORD&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;ss&quot;&gt;:authentication&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:plain&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;scheduling-and-business-time&quot;&gt;Scheduling and Business Time&lt;/h3&gt;

&lt;p&gt;We use the &lt;a href=&quot;https://github.com/bokmann/business_time&quot;&gt;Business Time&lt;/a&gt; gem to prevent reminders and roundups from being sent on weekends. Perhaps this item should be configurable for those of you who like to work on weekends (why??).&lt;/p&gt;

&lt;p&gt;The Heroku Scheduler plans our tasks for daily execution.&lt;/p&gt;

&lt;p&gt;We’d like to think setup is pretty simple. Just schedule the following two rake tasks based on your team’s needs:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;  &lt;span class=&quot;n&quot;&gt;rake&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;send_reminders&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;  &lt;span class=&quot;n&quot;&gt;rake&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;send_roundup&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;There is also a &lt;code&gt;send_test_email&lt;/code&gt; rake task to test whether SMTP settings are configured correctly.&lt;/p&gt;

&lt;h2 id=&quot;we-use-this&quot;&gt;We Use This&lt;/h2&gt;

&lt;p&gt;Since we like to &lt;a href=&quot;http://brewhouse.io/blog/2014/04/24/this-week-in-rails-the-backstory.html#dogfooding&quot;&gt;eat our own dog food&lt;/a&gt; at Brewhouse, we’ve been using Roundup Roger as part of our daily efforts for the last couple of months. Our hope is that others will find the same value that we’ve found. The more teams that try this out, the more we’ll know about how to improve it. As always, feedback and contributions are welcome.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/BrewhouseTeam/roundup-roger&quot;&gt;Give it a try!&lt;/a&gt;&lt;/p&gt;

</content>
      </entry>
    
    
    
      <entry>
          <title>Gourmet Service Objects</title>
          <author>
            <name>Philippe Creux</name>
            <email>philippe@brewhouse.io</email>
          </author>
          <link href="http://brewhouse.io/blog/2014/04/30/gourmet-service-objects.html"/>
          <updated>2014-04-30T12:37:00-07:00</updated>
          <id>http://brewhouse.io/blog/2014/04/30/gourmet-service-objects</id>
          <content type="html">&lt;p&gt;Is your Rails app’s business logic hidden in ugly controllers with 10+ lines long method and fat models powered by Linguini callbacks? Are your tests getting out of control and you spend most of your days looking at green dots? Do you want to impress your coworkers with Unicorn level code?&lt;/p&gt;

&lt;p&gt;You need Gourmet Service Objects™!&lt;/p&gt;

&lt;p&gt;I have been using service objects for the past three years and they reconciled my take on Rails (as much as automated testing reconciled my feelings for software programming!).&lt;/p&gt;

&lt;!-- break --&gt;

&lt;h2 id=&quot;a-service-object-does-one-thing&quot;&gt;A service object &lt;em&gt;does one thing&lt;/em&gt;&lt;/h2&gt;

&lt;p&gt;A service object (aka method object) performs one action. It holds the business logic to perform that action. Here is an example:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# app/services/accept_invite.rb&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;AcceptInvite&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;invite&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;invite&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;accept!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;UserMailer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;invite_accepted&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;invite&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;deliver&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The three conventions I follow are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Services go under the &lt;code&gt;app/services&lt;/code&gt; directory. I encourage you to use subdirectories for business logic-heavy domains. For instance:
    &lt;ul&gt;
      &lt;li&gt;The file &lt;code&gt;app/services/invite/accept.rb&lt;/code&gt; will define &lt;code&gt;Invite::Accept&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;while &lt;code&gt;app/services/invite/create.rb&lt;/code&gt; will define &lt;code&gt;Invite::Create&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Services start with a verb (and do not end with Service): &lt;code&gt;ApproveTransaction&lt;/code&gt;, &lt;code&gt;SendTestNewsletter&lt;/code&gt;, &lt;code&gt;ImportUsersFromCsv&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Services respond to the &lt;code&gt;call&lt;/code&gt; method. I found using another verb makes it a bit redundant: &lt;code&gt;ApproveTransaction.approve()&lt;/code&gt; does not read well. Also, the &lt;code&gt;call&lt;/code&gt; method is the de facto method for lambda, procs, and method objects.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;benefits&quot;&gt;Benefits&lt;/h2&gt;

&lt;h3 id=&quot;service-objects-show-what-my-application-does&quot;&gt;Service objects show what my application &lt;em&gt;does&lt;/em&gt;&lt;/h3&gt;

&lt;p&gt;I can just glance over the &lt;code&gt;services&lt;/code&gt; directory to see what my application &lt;strong&gt;does&lt;/strong&gt;: &lt;code&gt;ApproveTransaction&lt;/code&gt;, &lt;code&gt;CancelTransaction&lt;/code&gt;, &lt;code&gt;BlockAccount&lt;/code&gt;, &lt;code&gt;SendTransactionApprovalReminder&lt;/code&gt;…&lt;/p&gt;

&lt;p&gt;A quick look into a service object and I know what business logic is involved. I don’t have to go through the controllers, ActiveRecord model callbacks and observers to understand what “approving a transaction” involves.&lt;/p&gt;

&lt;h3 id=&quot;clean-up-models-and-controllers&quot;&gt;Clean-up models and controllers&lt;/h3&gt;

&lt;p&gt;Controllers turn the request (params, session, cookies) into arguments, pass them down to the service and redirect or render according to the service response.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;InviteController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ApplicationController&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;accept&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;invite&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Invite&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;find_by_token!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:token&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;AcceptInvite&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;invite&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;current_user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;redirect_to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;invite&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;notice&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Welcome!&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;redirect_to&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;alert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Oopsy!&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Models only deal with associations, scopes, validations and persistence.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Invite&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ActiveRecord&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Base&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;accept!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;update_attributes!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;accepted_by_user_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;accepted_at&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This makes models and controllers much easier to test and maintain!&lt;/p&gt;

&lt;h3 id=&quot;dry-and-embrace-change&quot;&gt;DRY and Embrace change&lt;/h3&gt;

&lt;p&gt;I keep service objects as simple and small as I can. I compose service
objects with other service objects, and I reuse them. My code is quite
modular and I’m ready to Embrace Change™.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SendTestNewsletter&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;newsletter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;campaign&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;CreateMailchimpCampaign&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;newsletter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;DeliverTestEmail&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;campaign&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;DeleteCampaign&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;campaign&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# Don&amp;#39;t keep the test campaign around&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SendNewsletter&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;newsletter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;campaign&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;CreateMailchimpCampaign&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;newsletter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;DeliverCampaign&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;campaign&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# Could easily delete here as well, but we want to retain the legit campaigns&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;clean-up-and-speed-up-your-test-suite&quot;&gt;Clean up and speed up your test suite&lt;/h3&gt;

&lt;p&gt;Services are easy and fast to test since they are small ruby objects with one point of entry (the &lt;code&gt;call&lt;/code&gt; method). Complex services are composed with other services, so you can split up your tests easily.&lt;/p&gt;

&lt;p&gt;I tend not to use any mocks or stub to test services that deal with ActiveRecord objects. &lt;a href=&quot;https://github.com/pcreux/rspec-set&quot;&gt;rspec-set&lt;/a&gt; helps me keep the running time quite low while having simple and robusts test. Once again, service objects are small and do one thing, so they tend to have a limited amount of dependencies.&lt;/p&gt;

&lt;h3 id=&quot;call-them-from-anywhere&quot;&gt;Call them from anywhere&lt;/h3&gt;

&lt;p&gt;Service objects are likely to be called from controllers as well as:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Other service objects:&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BatchSyncUsers&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;users&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;users&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;SyncUser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;DelayedJob / Rescue / Sidekiq Jobs:&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SyncInvoicesJob&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;work&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;SyncInvoices&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;call&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Rake tasks:&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;task&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:sync&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;no&quot;&gt;SyncInvoices&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;call&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;The console:&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span class=&quot;vg&quot;&gt;$&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ApproveTransaction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;transaction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;days&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ago&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Even from test helpers to setup my integration tests!&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;create_approved_transaction&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;transaction&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;FactoryGirl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:transaction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;no&quot;&gt;ApproveTransaction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;transaction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;FactoryGirl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;transaction&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;real-world-services&quot;&gt;Real world services&lt;/h2&gt;

&lt;p&gt;I like to use instances of service objects to take advantage of private methods. I add Virtus into the mix to handle parameters. For instance:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;AcceptInvite&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kp&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;call&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;kp&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Virtus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;attribute&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:invite&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;no&quot;&gt;Invite&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;attribute&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;    &lt;span class=&quot;no&quot;&gt;User&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;attribute&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:account&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Account&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;attribute&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;    &lt;span class=&quot;no&quot;&gt;Time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;   &lt;span class=&quot;ss&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;proc&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;now&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;unless&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;invite_already_accepted?&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;accept_invite&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;send_notification_to_inviter&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;kp&quot;&gt;private&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;invite_already_accepted?&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;accept_invite&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;send_notification_to_inviter&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I extracted the &lt;code&gt;def self.call&lt;/code&gt; into a helper module &lt;code&gt;Service&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Service&lt;/span&gt;
  &lt;span class=&quot;kp&quot;&gt;extend&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ActiveSupport&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Concern&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;included&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;kp&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;call&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;AcceptInvite&lt;/span&gt;

  &lt;span class=&quot;kp&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Service&lt;/span&gt;
  &lt;span class=&quot;kp&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Virtus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;attribute&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:invite&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Invite&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;attribute&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;User&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;attribute&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:account&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Account&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;attribute&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;proc&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;now&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;unless&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;invite_already_accepted?&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;accept_invite&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;send_notification_to_inviter&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;kp&quot;&gt;private&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I sometimes inject dependencies to test services that orchestrate
complex operations. Since services respond to the &lt;code&gt;call&lt;/code&gt; method, a
simple &lt;code&gt;proc&lt;/code&gt; does the job.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Trumpet&lt;/span&gt;
  &lt;span class=&quot;kp&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Service&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Bass&lt;/span&gt;
  &lt;span class=&quot;kp&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Service&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;OutOfTuneError&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;StandardError&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Conductor&lt;/span&gt;
  &lt;span class=&quot;kp&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Service&lt;/span&gt;
  &lt;span class=&quot;kp&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Virtus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;attribute&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:trumpet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Trumpet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;proc&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Trumpet&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;attribute&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:bass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;    &lt;span class=&quot;no&quot;&gt;Bass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;    &lt;span class=&quot;ss&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;proc&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Bass&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;trumpet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;C4 .. G4&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;bass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;C2 D2 E2 E2&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;rescue&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;OutOfTuneError&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;


&lt;span class=&quot;n&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Conductor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;ss&quot;&gt;trumpet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;  &lt;span class=&quot;nb&quot;&gt;proc&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;onk! onk!&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;ss&quot;&gt;bass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;     &lt;span class=&quot;nb&quot;&gt;proc&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;raise&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;OutOfTuneError&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sound_awful&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;values-the-return&quot;&gt;Values: The Return&lt;/h2&gt;

&lt;p&gt;The services I write have three flavours when it comes to communicating back to the caller.&lt;/p&gt;

&lt;h3 id=&quot;flavour-1-fail-loudly&quot;&gt;Flavour #1: Fail loudly&lt;/h3&gt;

&lt;p&gt;Most services are not supposed to fail. They do not return anything (meaningful) but they raise an exception when something goes wrong. Those services are likely to use methods that fail loudly such as &lt;code&gt;Hash#fetch&lt;/code&gt;, &lt;code&gt;create!&lt;/code&gt;, &lt;code&gt;save!&lt;/code&gt;, &lt;code&gt;find_by_name!&lt;/code&gt; etc.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ContractController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;LoggedInController&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sign&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;contract&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;current_user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;contracts&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;SignContract&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;contract&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;contract&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;current_user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;flash&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:notice&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Contract signed!&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;redirect_to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;contract&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;flavour-2-return-a-persisted-activerecord-model&quot;&gt;Flavour #2: Return a persisted ActiveRecord model&lt;/h3&gt;

&lt;p&gt;The caller can check if an AR instance is persisted and then has access to its errors.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;InviteController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;LoggedInController&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;create&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;attributes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;invite_params&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;merge&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;creator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;current_user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@invite&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;CreateInvite&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;attributes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@invite&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;persisted?&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;redirect_to&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@invite&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;render&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;alert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;errors_for_humans&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vi&quot;&gt;@invite&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;errors&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;kp&quot;&gt;private&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;invite_params&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:invite&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;permit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:token&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;flavour-3-response-object&quot;&gt;Flavour #3: Response object&lt;/h3&gt;

&lt;p&gt;Some services have several outcomes and complex error handling. They return a response object which responds to &lt;code&gt;success?&lt;/code&gt; and &lt;code&gt;error(s)&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;InviteController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;LoggedInController&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;accept&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;AcceptInvitation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;ss&quot;&gt;invite&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Invite&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;find_by_token!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:token&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
      &lt;span class=&quot;ss&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;current_user&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;success?&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;redirect_to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;root_path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;notice&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Welcome!&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;redirect_to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;root_path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;alert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;That’s it for service objects for now. Experiment with them, as I
believe they will make your codebase more expressive and easier to
maintain!&lt;/p&gt;

&lt;p&gt;I’m happy to respond to any question or concern you guys might have. Feel free to
leave a comment below. &amp;lt;3 &amp;lt;3 &amp;lt;3&lt;/p&gt;

</content>
      </entry>
    
    
    
      <entry>
          <title>This Week in Rails: the Backstory</title>
          <author>
            <name>Godfrey Chan</name>
            <email>godfrey@brewhouse.io</email>
          </author>
          <link href="http://brewhouse.io/blog/2014/04/24/this-week-in-rails-the-backstory.html"/>
          <updated>2014-04-24T09:04:00-07:00</updated>
          <id>http://brewhouse.io/blog/2014/04/24/this-week-in-rails-the-backstory</id>
          <content type="html">&lt;p&gt;
  &lt;a href=&quot;http://brewhouse.io/blog/2014/04/24/this-week-in-rails-the-backstory.html&quot;&gt;
    &lt;img class=&quot;img-right img-responsive&quot; alt=&quot;This Week in Rails Logo&quot; src=&quot;/images/2014-04-24-this-week-in-rails-backstory.jpg&quot; /&gt;
  &lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;I recently started a newsletter called &lt;a href=&quot;http://rails-weekly.goodbits.io&quot;&gt;&lt;em&gt;This week in Rails&lt;/em&gt;&lt;/a&gt;
(you may have &lt;a href=&quot;http://ruby5.envylabs.com/episodes/495-episode-458-april-22nd-2014#story-3&quot;&gt;heard&lt;/a&gt;
about it) – a weekly digest of notable commits, issues, pull-requests and other
interesting things happening around the Rails ecosystem. I’d like to share my
motivations behind the newsletter and some of the things I’ve learned along the way.&lt;/p&gt;

&lt;!-- break --&gt;

&lt;h2 id=&quot;knowledge-sharing&quot;&gt;Knowledge Sharing&lt;/h2&gt;

&lt;p&gt;My biggest goal of the newsletter is to share knowledge. Since I &lt;a href=&quot;https://twitter.com/bitsweat/status/413014212303024128&quot;&gt;joined&lt;/a&gt;
the Rails committer team last year, I had the opportunity to follow the
development of Rails very closely. This helped me to gain a much better
understanding of the tools I use at work and greatly enhanced my productivity.
It also forced me to read a lot of code written by other people, which is a
great way to learn and improve my craft as a programmer.&lt;/p&gt;

&lt;p&gt;Despite the tremendous benefits, following a project as large as Rails could be
quite overwhelming. On average, I receive about 40 email notifications from
GitHub every day, most of them from new comments on issues and pull-requests.
At times, it could also be quite difficult to understand the background of a
commit or pull-request just by reading the code.&lt;/p&gt;

&lt;p&gt;In my newsletter I attempt to unlock these learning opportunities for more
people by filtering out most of the noise and presenting the tidbits in an
easy-to-digest format. I also try to provide a little bit of background to help
my readers understand the context of the code.&lt;/p&gt;

&lt;h2 id=&quot;highlighting--encouraging-contributions&quot;&gt;Highlighting &amp;amp; Encouraging Contributions&lt;/h2&gt;

&lt;p&gt;If you aren’t paying close attention, you often only hear about the shiniest new
features on every major/minor release of Rails. However, open-source work is all
about the non-shiny, seemingly unimportant changes. Every week there are
countless individual contributors pouring hours upon hours of their personal
time to quietly improve rails – one bug report, one bug fix, one
documentation change, one small feature at a time. The stability you enjoy on
Rails today is a battle fought and won by &lt;a href=&quot;http://contributors.rubyonrails.org/&quot;&gt;literally thousands&lt;/a&gt;
of nameless heroes.&lt;/p&gt;

&lt;p&gt;By highlighting these smaller patches in my newsletter, my goal is to demystify
the process of contributing to Rails and hopefully encourage more contributions
(to Rails and other open-source projects) over time.&lt;/p&gt;

&lt;h2 id=&quot;dogfooding&quot;&gt;Dogfooding&lt;/h2&gt;

&lt;p&gt;I am also a big believer of &lt;a href=&quot;http://en.wikipedia.org/wiki/Eating_your_own_dog_food&quot;&gt;eating your own dogfood&lt;/a&gt;.
At Brewhouse, we are working on an in-house product called &lt;a href=&quot;https://goodbits.io/?utm_source=brewhouse-blog-backstory&quot;&gt;Goodbits&lt;/a&gt;
(you can read more about it &lt;a href=&quot;http://blog.goodbits.io/2014/04/15/we-built-goodbits/&quot;&gt;here&lt;/a&gt;).
The Rails newsletter gave me the perfect opportunity to use the product the same
way our customers would. This is a great way to learn about the need of our
customers needs and experience the quirks in the product first-hand.&lt;/p&gt;

&lt;p&gt;This effort has already paid off a few times by now. As an example, one of the
early issues of my newsletter tipped off the wrong wires inside Gmail’s spam
filter and never made it to my subscribers’ inbox. After a lot of
trial-and-error, we determined that it was because I hotlinked my custom logo
image from a public Dropbox folder. Following our findings, we implemented a
more robust image hosting solution before we officially rolled out the custom
logo feature for our customers.&lt;/p&gt;

&lt;h2 id=&quot;the-results&quot;&gt;The Results&lt;/h2&gt;

&lt;p&gt;The newsletter has been very well-received. In the span of a few weeks, over 450
readers subscribed to my newsletter. Except for the one issue that went into the
spam folder, the newsletter had consistently logged an open rate of over 80% and
over 40% click rate. (This is &lt;a href=&quot;http://mailchimp.com/resources/research/email-marketing-benchmarks/&quot;&gt;well above&lt;/a&gt;
typical “marketing” emails.)&lt;/p&gt;

&lt;p&gt;To be honest, this completely exceeded any expectations I had when I started
this as a &lt;a href=&quot;http://brewhouse.io/2014/04/04/welcome-to-brewhouse.html#staying-creative&quot;&gt;Friday afternoon project&lt;/a&gt;.
While not very “sexy”, it turns out that email newsletters could be a very
powerful medium to engage with your readers.&lt;/p&gt;

&lt;p&gt;If you haven’t already, you should &lt;a href=&quot;http://rails-weekly.goodbits.io/archive&quot;&gt;check out my newsletter&lt;/a&gt;
and consider &lt;a href=&quot;http://rails-weekly.goodbits.io&quot;&gt;subscribing&lt;/a&gt;! Got some
interesting niche content to share with your customers, coworkers or your
community? Give &lt;a href=&quot;https://goodbits.io/?utm_source=brewhouse-blog-backstory&quot;&gt;Goodbits&lt;/a&gt;
a spin and let us know what you think!&lt;/p&gt;
</content>
      </entry>
    
    
    
      <entry>
          <title>Welcome to Brewhouse</title>
          <author>
            <name>Kalvir Sandhu</name>
            <email>kalv@brewhouse.io</email>
          </author>
          <link href="http://brewhouse.io/2014/04/04/welcome-to-brewhouse.html"/>
          <updated>2014-04-04T16:34:00-07:00</updated>
          <id>http://brewhouse.io/2014/04/04/welcome-to-brewhouse</id>
          <content type="html">&lt;p&gt;Hello, we’re Brewhouse. We are a group of creative developers who have come together to continue building great products for ourselves and others.&lt;/p&gt;

&lt;p&gt;We love building applications. This has made us learn and evolve our techniques to best deliver great software products. Products that deliver value, fun, and are backed by quality code and tests.&lt;/p&gt;

&lt;p&gt;I want to expand a little – to those that know us, those that don’t, who we are and what we do.&lt;/p&gt;

&lt;!-- break --&gt;

&lt;h2 id=&quot;full-transparency&quot;&gt;Full Transparency&lt;/h2&gt;

&lt;p&gt;When I first started talking about Brewhouse I took everything I learned
from working with my friends at &lt;a href=&quot;http://gofreerange.com&quot;&gt;GoFreeRange&lt;/a&gt;.
The one thing I wanted to bring to this business was full transparency
internally and with clients. We’ve implemented this and are very happy with the results.&lt;/p&gt;

&lt;p&gt;As an example, in the early months, the team proposed to discount their salaries for a month so we could buy nice chairs for the office (yep, those lovely beauties in the picture below). That was important because we sit in them all day. The key learning here was that at the time, I didn’t know this was so important and without the transparency on the decision, this suggestion would not have been made.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/chairs.jpg&quot; alt=&quot;Our office chairs&quot; title=&quot;Our office chairs&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Our team has full visibility on everything. This includes data like our budget, salaries, cashflow, cap table and conversations with potential clients. We really want to continue this as we grow but understand that it is going to be challenging, however, we’re excited to learn more about this.&lt;/p&gt;

&lt;h2 id=&quot;staying-creative&quot;&gt;Staying Creative&lt;/h2&gt;

&lt;p&gt;Every week we meet for a “weekly brew”. As we work with different clients and internal projects on rotation, we find it important to have a meeting outside of the office to do a roundup and plan things for the weeks ahead.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/weekly-brew.jpg&quot; alt=&quot;Weekly brew at Timbertrain, Vancouver&quot; title=&quot;Weekly brew at Timbertrain, Vancouver&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We only charge out 30 hours of development time a week so that leaves a day to work on internal hacks, creative projects or to prepare for the week ahead. It’s very difficult to work for clients and on the company at the same time. Godfrey, for example, contributes his time to the &lt;a href=&quot;http://rubyonrails.org/&quot;&gt;Rails&lt;/a&gt; open source project and collects content for a &lt;a href=&quot;http://rails-weekly.goodbits.io&quot;&gt;rails weekly roundup&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Community is important to us and we gain value from others all the time. We help organize &lt;a href=&quot;http://vanruby.org/&quot;&gt;#vanruby&lt;/a&gt;’s meetups and hack nights. This is now baked into what we do at Brewhouse and is no longer something I do on my own. We’re going to brew as much tech here in Vancouver as we can.&lt;/p&gt;

&lt;h2 id=&quot;code-curation-and-mentorship&quot;&gt;Code Curation and Mentorship&lt;/h2&gt;

&lt;p&gt;With some of our clients-to-date, we’ve trialed the notion of CTO-for-hire, as well as code curation workshops. The results have been interesting and deserves another post.&lt;/p&gt;

&lt;p&gt;We are going to continue code curating services in a workshop format and will soon be providing these services part-time for some of our existing clients.&lt;/p&gt;

&lt;h2 id=&quot;product-amp-service&quot;&gt;Product &amp;amp; Service&lt;/h2&gt;

&lt;p&gt;Yep, we do product, as well as service. It’s hard but we’re doing it.&lt;/p&gt;

&lt;p&gt;In the past, I’ve worked with clients for long periods of time and then try to buy back time to then work on products – 4 months on service; 1 month on product. This didn’t work. It was very hard to keep momentum and the pace up. To ship &lt;a href=&quot;http://caliper.io&quot;&gt;Caliper&lt;/a&gt; last year, I found momentum helped keep focus and drive the solution to best fit the problem our customers were having.&lt;/p&gt;

&lt;p&gt;At Brewhouse, we’ll always be working on product. This has enabled us to start sending out invites to our new service, &lt;a href=&quot;https://goodbits.io&quot;&gt;Goodbits&lt;/a&gt;. This time split is working well for our business.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://goodbits.io&quot;&gt;&lt;img src=&quot;/images/posts/goodbits.jpg&quot; alt=&quot;Goodbits&quot; title=&quot;Goodbits&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;That’s all for now. We’ll be writing about some of the themes I touched on in this post and web development learnings in the future. If this is interesting to you, subscribe to our blog for new articles or our newsletter, where we’ll also be sharing what we read during the week.&lt;/p&gt;
</content>
      </entry>
    
    
    
      <entry>
          <title>What's new in Rails 4.1</title>
          <author>
            <name>Godfrey Chan</name>
            <email>godfrey@brewhouse.io</email>
          </author>
          <link href="http://brewhouse.io/blog/2013/12/17/whats-new-in-rails-4-1.html"/>
          <updated>2013-12-17T02:32:40-08:00</updated>
          <id>http://brewhouse.io/blog/2013/12/17/whats-new-in-rails-4-1</id>
          <content type="html">&lt;blockquote&gt;&lt;em&gt;This was originally published on the Coherence blog on December 17th, 2013. It has been migrated here for historical purposes.&lt;/em&gt;&lt;/blockquote&gt;

&lt;p&gt;In case you haven’t been paying attention, Rails 4.1 beta &lt;a href=&quot;http://weblog.rubyonrails.org/&quot;&gt;was released today&lt;/a&gt;!
While this is a minor release, there are still plenty of handy new features
that’s worth getting excited about. Here are a few of my favourites, along with
some thoughts on why I think they are useful.&lt;/p&gt;

&lt;!-- break --&gt;

&lt;p&gt;(This post is based on my lightning talk at &lt;a href=&quot;http://vanruby.org/&quot;&gt;#VANRUBY&lt;/a&gt;, the original
slides can be found &lt;a href=&quot;http://www.slideshare.net/godfreykfc/rails-41&quot;&gt;here&lt;/a&gt;.)&lt;/p&gt;

&lt;h2 id=&quot;action-mailer-previews&quot;&gt;Action Mailer Previews&lt;/h2&gt;

&lt;p&gt;Testing email templates in Rails has always been pretty painful. My current
workflow involves:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Make changes to the email template&lt;/li&gt;
  &lt;li&gt;Deliver the email via the rails console&lt;/li&gt;
  &lt;li&gt;Check the output in the browser&lt;/li&gt;
  &lt;li&gt;Rinse and repeat&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The &lt;a href=&quot;https://github.com/ryanb/letter_opener&quot;&gt;Letter Opener&lt;/a&gt; gem makes this easier, but this is still far
from ideal. Fortunately for us, &lt;a href=&quot;https://github.com/pixeltrix&quot;&gt;@pixeltrix&lt;/a&gt; did
the hard work to integrate the &lt;a href=&quot;https://github.com/37signals/mail_view&quot;&gt;MailView&lt;/a&gt; gem into Rails 4.1. You
can now easily create previews for your mailers and view them in the browser
from &lt;code&gt;http://localhost:3000/rails/mailers&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# In /test/mailers/previews/notifier_preview.rb&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;NotifierPreview&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ActionMailer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Preview&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;welcome&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# Mock up some data for the preview&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;FactoryGirl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# Return a Mail::Message here (but don&amp;#39;t deliver it!)&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;Notifier&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;welcome&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;It should be noted that although the preview files live under the test
directory by default (which can be changed via &lt;code&gt;config.action_mailer.preview_path&lt;/code&gt;),
it is actually run inside the development environment. So if you need to use
gems like &lt;code&gt;FactoryGirl&lt;/code&gt; to generate fake data, you’ll need to make sure they
are added to the development group in your Gemfile as well.&lt;/p&gt;

&lt;p&gt;If your app doesn’t currently have a &lt;code&gt;test&lt;/code&gt; folder (i.e. &lt;code&gt;rspec&lt;/code&gt; users), it
might be tempting to change the default &lt;code&gt;config.action_mailer.preview_path&lt;/code&gt;
to something like &lt;code&gt;/app/mailer/previews&lt;/code&gt;. However, please be aware that the
&lt;code&gt;/app&lt;/code&gt; folder is eager-loaded in production, so that’s probably not the best
place to put these preview files.&lt;/p&gt;

&lt;p&gt;Read more about this feature:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://edgeguides.rubyonrails.org/4_1_release_notes.html#action-mailer-previews&quot;&gt;Release notes&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://edgeapi.rubyonrails.org/classes/ActionMailer/Base.html&quot;&gt;Documentation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Pull request: &lt;a href=&quot;https://github.com/rails/rails/pull/13332&quot;&gt;#13332&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;active-record-enums&quot;&gt;Active Record Enums&lt;/h2&gt;

&lt;p&gt;Have you ever used multiple &lt;code&gt;boolean&lt;/code&gt; columns to compose a single complex state
on your models? I’ve definitely done this before and things get out of
hand really quickly.&lt;/p&gt;

&lt;p&gt;Enums to the rescue!&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Bug&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ActiveRecord&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Base&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# Relevant schema change looks like this:&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;#&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# create_table :bugs do |t|&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;#   t.column :status, :integer, default: 0 # defaults to the first value (i.e. :new)&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# end&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:assigned&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:in_progress&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:resolved&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:rejected&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:reopened&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;belongs_to&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:assignee&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;class_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;Developer&amp;#39;&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;assignee&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;developer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;developer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new?&lt;/span&gt;
      &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;status&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:assigned&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
      &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;status&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:new&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;Bug&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;resolved&lt;/span&gt;           &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; a scope to find all resolved bugs&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;bug&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;resolved?&lt;/span&gt;          &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; check if bug has the status :resolved&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;bug&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;resolved!&lt;/span&gt;          &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; update! the bug with status set to :resolved&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;bug&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;             &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; a symbol describing the bug&amp;#39;s status&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;bug&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;status&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:resolved&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; set the bug&amp;#39;s status to :resolved&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Internally, these states are mapped to integers in the database to
save space. It’s also worth mentioning that the methods added by the &lt;code&gt;enum&lt;/code&gt;
macro are mixed-in via a module. This means you can easily override them in
your model and use &lt;code&gt;super&lt;/code&gt; to reach the original implementation.&lt;/p&gt;

&lt;p&gt;There are a few caveats you should keep in mind when using this feature:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;I&lt;/strong&gt;. Despite its name, this feature doesn’t actually use the &lt;code&gt;ENUM&lt;/code&gt; type that is
   implemented in certain databases. The mapping between states
   and their corresponding integers are maintained in the Ruby model file.
   This means that you should not change the order of the &lt;code&gt;enum&lt;/code&gt; symbols once
   they are added. To remove unused states, you can use an explicit mapping:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Bug&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ActiveRecord&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Base&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kp&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;in_progress&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;ss&quot;&gt;resolved&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;ss&quot;&gt;rejected&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;ss&quot;&gt;reopened&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;II&lt;/strong&gt;. Avoid using the same names inside different enums in the same class!
   Doing so will leave Active Record very confused!&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Bug&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ActiveRecord&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Base&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;code_review_status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# WARNING: Don&amp;#39;t do this!&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;III&lt;/strong&gt;. If you need to write custom scopes to query the enum columns, you would have
   to pass the integers instead of the symbols. You can access the enum-integer
   mapping via a constant added by the macro:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Bug&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ActiveRecord&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Base&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;scope&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;where&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;status &amp;lt;&amp;gt; ? OR status &amp;lt;&amp;gt; ?&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;STATUS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:resolved&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;STATUS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:rejected&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;IV&lt;/strong&gt;. Currently, the dirty tracking methods (e.g. &lt;code&gt;status_was?&lt;/code&gt;) have not been
   updated to work with enums yet (they currently return the mapped integer
   instead of the symbols). This should be fixed before the final release. (See
   &lt;a href=&quot;https://github.com/rails/rails/pull/13267&quot;&gt;#13267&lt;/a&gt; for the progress.)&lt;/p&gt;

&lt;p&gt;Read more about this feature:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://edgeguides.rubyonrails.org/4_1_release_notes.html#active-record-enums&quot;&gt;Release notes&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://edgeapi.rubyonrails.org/classes/ActiveRecord/Enum.html&quot;&gt;Documentation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Original commit: &lt;a href=&quot;https://github.com/rails/rails/commit/db41eb8a6ea88b854bf5cd11070ea4245e1639c5&quot;&gt;db41eb8a&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;action-pack-variants&quot;&gt;Action Pack Variants&lt;/h2&gt;

&lt;p&gt;As web developers, we are well aware that we have fully transitioned into the
&lt;a href=&quot;http://en.wikipedia.org/wiki/Post-PC_era&quot;&gt;post-PC era&lt;/a&gt;. As much as I love &lt;a href=&quot;http://alistapart.com/article/responsive-web-design&quot;&gt;responsive design&lt;/a&gt;,
it is not a silver bullet for the multi-device web. In many cases, it is more
appropiate to tailor your views to serve the most relevant content and workflow
for specific device categories.&lt;/p&gt;

&lt;p&gt;With &lt;strong&gt;Action Pack Variants&lt;/strong&gt;, this will become much easier in Rails 4.1:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ApplicationController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ActionController&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Base&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;before_action&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:detect_device_variant&lt;/span&gt;

  &lt;span class=&quot;kp&quot;&gt;private&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;detect_device_variant&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user_agent&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;/iPad/i&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;variant&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:tablet&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;/iPhone/i&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;variant&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:phone&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;PostController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ApplicationController&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;show&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@post&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Post&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;respond_to&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
      &lt;span class=&quot;nb&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;json&lt;/span&gt;
      &lt;span class=&quot;nb&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;html&lt;/span&gt;               &lt;span class=&quot;c1&quot;&gt;# /app/views/posts/show.html.erb&lt;/span&gt;
      &lt;span class=&quot;nb&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;phone&lt;/span&gt;         &lt;span class=&quot;c1&quot;&gt;# /app/views/posts/show.html+phone.erb&lt;/span&gt;
      &lt;span class=&quot;nb&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tablet&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
        &lt;span class=&quot;vi&quot;&gt;@show_edit_link&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;false&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This example sets up a &lt;code&gt;before_action&lt;/code&gt; filter to match the &lt;code&gt;User-Agent&lt;/code&gt; HTTP
header against certain keywords, and assign the &lt;code&gt;request.variant&lt;/code&gt; accordingly.
By specifying the supported variants in the &lt;code&gt;respond_to&lt;/code&gt; block, Rails will
render the appropiate template for the specific format and variant combination.
It also allows you to run additional variant-specific code by passing a block.&lt;/p&gt;

&lt;p&gt;In fact, you can even skip the declaration - if you have the appropiate
template in your &lt;code&gt;views&lt;/code&gt; directory, Rails will automatically pick it up. On the
other hand, if a variant does not have a specialized template, Rails will
fallback to the default template for the format (i.e. &lt;code&gt;show.html.erb&lt;/code&gt;). This
allows you to share a template between two variants. In this example, the
&lt;code&gt;tablet&lt;/code&gt; variant will reuse the default template if &lt;code&gt;/app/views/posts/show.html+phone.erb&lt;/code&gt;
is absent.&lt;/p&gt;

&lt;p&gt;Although most examples use the &lt;code&gt;User-Agent&lt;/code&gt; header to showcase this feature,
it’s worth noting that the actual implementation in Rails is completely
agnostic from that. &lt;code&gt;request.variant&lt;/code&gt; can be assigned any time before the
template is rendered based on arbitrary conditions, such as the request
(sub)domain, HTTP headers, session data, or even the result of a coin flip.&lt;/p&gt;

&lt;p&gt;This makes the feature very flexible, and can potentially be used for many
things such as API versioning, A/B testing, or even feature rollouts!&lt;/p&gt;

&lt;p&gt;Read more about this feature:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://edgeguides.rubyonrails.org/4_1_release_notes.html#variants&quot;&gt;Release notes&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://edgeapi.rubyonrails.org/classes/ActionController/MimeResponds.html#method-i-respond_to&quot;&gt;Documentation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Pull requests: &lt;a href=&quot;https://github.com/rails/rails/pull/12977&quot;&gt;#12977&lt;/a&gt;, &lt;a href=&quot;https://github.com/rails/rails/pull/13290&quot;&gt;#13290&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;application-message-verifier&quot;&gt;Application Message Verifier&lt;/h2&gt;

&lt;p&gt;Rails 4.1 also included a built-in helper to generate signed messages with
&lt;a href=&quot;http://en.wikipedia.org/wiki/Hash-based_message_authentication_code&quot;&gt;HMAC&lt;/a&gt;. The message verifier was previously used to power things like
signed cookies, but it is now much easier to use it for other purposes.&lt;/p&gt;

&lt;p&gt;For example, you can implement a stateless “reset password” feature without
having to store any tokens in the database:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;User&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ActiveRecord&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Base&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;verifier_for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;purpose&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;vi&quot;&gt;@verifiers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
      &lt;span class=&quot;vi&quot;&gt;@verifiers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;purpose&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
        &lt;span class=&quot;vi&quot;&gt;@verifiers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Rails&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;application&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;message_verifier&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to_s&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;reset_password_token&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;verifier&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;verifier_for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;reset-password&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# Unique for each type of messages&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;verifier&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;generate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;reset_password!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;token&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;new_password&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;new_password_confirmation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# This raises an exception if the message is modified&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;user_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;timestamp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;verifier_for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;reset-password&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;verify&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;token&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;timestamp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;day&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ago&lt;/span&gt;
      &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;password&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;new_password&lt;/span&gt;
      &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;password_confirmation&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;new_password_confirmation&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;save!&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;# Token expired&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Notifier&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ActionMailer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Base&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;reset_password&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@user&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@reset_password_url&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;password_reset_url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;token&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reset_password_token&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;mail&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;email&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;subject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Your have requested to reset your password&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;That way, everything that is required to fufill the password reset request is
included in the link, nothing need to be stored in the database. This can also
be used for things like &lt;code&gt;OAuth&lt;/code&gt; (the &lt;code&gt;state&lt;/code&gt; parameter).&lt;/p&gt;

&lt;p&gt;When using this feature, it is important to conisder possible &lt;a href=&quot;http://en.wikipedia.org/wiki/Replay_attack&quot;&gt;replay attacks&lt;/a&gt;.
In the example above, if we did not include a timestamp to check for expiration,
the same URL can be used to reset the user’s password at any time if the email
ended up in the wrong hands!&lt;/p&gt;

&lt;p&gt;Also, the key used to sign the message is derived from your application’s
&lt;code&gt;secret_key_base&lt;/code&gt; and the “salt” you passed (&lt;code&gt;&quot;User-reset-password&quot;&lt;/code&gt; in the
example). Changing either will invalidate any previously signed messages.&lt;/p&gt;

&lt;h2 id=&quot;spring&quot;&gt;Spring&lt;/h2&gt;

&lt;p&gt;Depending on the gems you use, an average Rails app probably take around ~5
seconds to boot. That’s 5 seconds wasted every time you run your tests, even
when you are just running a single isolated test case! If you are following
&lt;a href=&quot;http://en.wikipedia.org/wiki/Test-driven_development&quot;&gt;TDD&lt;/a&gt;, you are probably doing this 50 times a day. That’s &lt;a href=&quot;http://xkcd.com/1205/&quot;&gt;5 days wasted&lt;/a&gt;
in the last five years!&lt;/p&gt;

&lt;p&gt;Luckily for all of us, new applications generated with Rails 4.1 comes with
built-in integration with the &lt;a href=&quot;https://github.com/jonleighton/spring&quot;&gt;Spring&lt;/a&gt; application preloader.&lt;/p&gt;

&lt;p&gt;Spring works by keeping your application running in the background so you
don’t need to boot it every time you run a test, rake task or migration. If
you are familiar with &lt;a href=&quot;https://github.com/burke/zeus&quot;&gt;Zeus&lt;/a&gt; gem or the &lt;a href=&quot;https://github.com/sporkrb/spork&quot;&gt;Spork&lt;/a&gt; gem, this should
sound famaliar. However, it transparently wraps common Rails commands
(&lt;code&gt;rake&lt;/code&gt; and &lt;code&gt;rails&lt;/code&gt; by default) with binstubs, so if you have &lt;code&gt;./bin&lt;/code&gt;
in your &lt;code&gt;PATH&lt;/code&gt;, things should automagically become much faster for you, no
actions required!&lt;/p&gt;

&lt;p&gt;I tried this on the &lt;a href=&quot;https://caliper.io/&quot;&gt;Caliper&lt;/a&gt; dashboard, and we can save almost 5
seconds between test runs when spring is loaded. Can I get my 5 extra days
off now? ;)&lt;/p&gt;

&lt;p&gt;You can read about how it works in the &lt;a href=&quot;https://github.com/jonleighton/spring#readme&quot;&gt;Spring README&lt;/a&gt; as
well as how to install this for existing applications.&lt;/p&gt;

&lt;p&gt;Read more about this feature:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://edgeguides.rubyonrails.org/4_1_release_notes.html#spring-application-preloader&quot;&gt;Release notes&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://edgeguides.rubyonrails.org/upgrading_ruby_on_rails.html#spring&quot;&gt;Upgrading guide&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/jonleighton/spring#readme&quot;&gt;Documentation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Pull request: &lt;a href=&quot;https://github.com/rails/rails/pull/12958&quot;&gt;#12958&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;even-more-features&quot;&gt;Even More Features&lt;/h2&gt;

&lt;p&gt;This is just scratching the surface of this release. There are many other
features that you might find useful, such as
&lt;a href=&quot;http://edgeguides.rubyonrails.org/4_1_release_notes.html#config-secrets-yml&quot;&gt;a &lt;code&gt;secrets.yml&lt;/code&gt; for all your secrets&lt;/a&gt;,
&lt;a href=&quot;https://github.com/rails/rails/pull/12824&quot;&gt;time travelling in tests&lt;/a&gt;,
&lt;a href=&quot;https://github.com/rails/rails/pull/12183&quot;&gt;better JSON handling&lt;/a&gt;,
&lt;a href=&quot;http://edgeguides.rubyonrails.org/4_1_release_notes.html#module-concerning&quot;&gt;&lt;code&gt;Module#concerning&lt;/code&gt;&lt;/a&gt;,
&lt;a href=&quot;https://github.com/rails/rails/pull/12891&quot;&gt;&lt;code&gt;to_param&lt;/code&gt; macro&lt;/a&gt; and more.
I encourage you to checkout the &lt;a href=&quot;http://edgeguides.rubyonrails.org/4_1_release_notes.html&quot;&gt;release notes&lt;/a&gt;
for a full list of changes!&lt;/p&gt;

&lt;h2 id=&quot;vanruby-upgrade-clinic&quot;&gt;#VANRUBY Upgrade Clinic&lt;/h2&gt;

&lt;p&gt;We will be running our &lt;a href=&quot;http://www.meetup.com/vancouver-ruby/messages/61805312/&quot;&gt;4.1 upgrade clinic&lt;/a&gt;
again at the &lt;a href=&quot;http://www.meetup.com/vancouver-ruby/events/154207602/&quot;&gt;#VANRUBY hack night&lt;/a&gt;
today. Stop by and say hi if you are in town!&lt;/p&gt;

</content>
      </entry>
    
    
</feed>
