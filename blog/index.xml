<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>The Brew Pub</title>
    <link href="http://brewhouse.io/index.xml" rel="self"/>
    <link href="http://brewhouse.io"/>
    <updated>2015-07-11T11:25:15-07:00</updated>
    <id>http://brewhouse.io</id>
    <author>
        <name>Brewhouse Team</name>
        <email>hello@brewhouse.io</email>
    </author>
    
      
        <entry>
            <title>Chan can seriously code and a lot more too!</title>
            <author>
              <name>Kalvir Sandhu</name>
              <email>kalv@brewhouse.io</email>
            </author>
            <link href="http://brewhouse.io/2015/07/10/chan-can-seriously-code-and-a-lot-more-too.html"/>
            <updated>2015-07-10T16:13:00-07:00</updated>
            <id>http://brewhouse.io/2015/07/10/chan-can-seriously-code-and-a-lot-more-too</id>
            <content type="html">&lt;p&gt;&lt;img src=&quot;/images/posts/2015/07/horse-chan.jpg&quot; alt=&quot;HorseChan&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Today is a bittersweet day for us, Godfrey Chan is moving on from Brewhouse and also Vancouver.&lt;/p&gt;

&lt;p&gt;I first met Godfrey when he came back to Vancouver from some time away, he became very involved with the &lt;a href=&quot;http://vanruby.org/&quot;&gt;Vancouver Ruby meetup&lt;/a&gt; I was helping to organize. We found a similar interest with disrupting the web application monitoring space and very soon found ourselves working together on &lt;a href=&quot;http://caliper.io&quot;&gt;Caliper&lt;/a&gt; (a Javascript monitoring startup) and then Brewhouse the end of 2013.&lt;/p&gt;

&lt;p&gt;Godfrey has been an essential member of the team that has helped build Brewhouse to what it is today. His passion for the development community both digitally and through in-person meetups has helped build the foundation on how Brewhouse works with the community today.&lt;/p&gt;

&lt;p&gt;He is an active &lt;a href=&quot;http://rubyonrails.org/core/&quot;&gt;core team member of Rails&lt;/a&gt; and helped get the developer nights going and mentored a number of developers in town.&lt;/p&gt;

&lt;!-- break --&gt;

&lt;p&gt;When I first saw him speak at a &lt;a href=&quot;https://vanruby.org&quot;&gt;VanRuby&lt;/a&gt; lightning talk event, his talk was more of a conference quality presentation, entertaining and educating. I knew at that moment he would give talks to even larger audience—he did that and much more; this year alone he’s spoken at  &lt;a href=&quot;https://www.youtube.com/watch?v=PXB93Z8azZE&quot;&gt;EmberConf&lt;/a&gt;, &lt;a href=&quot;https://www.youtube.com/watch?v=IjbYhE9mWuk&quot;&gt;RailsConf&lt;/a&gt;, &lt;a href=&quot;http://www.rubynation.org/&quot;&gt;Ruby Nation&lt;/a&gt; and &lt;a href=&quot;http://goruco.com/&quot;&gt;GoRuCo&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;He dogfooded our own product, &lt;a href=&quot;https://goodbits.io&quot;&gt;Goodbits.io&lt;/a&gt; by starting &lt;a href=&quot;https://rails-weekly.ongoodbits.com/&quot;&gt;This Week in Rails&lt;/a&gt;—the best email roundup focused on what’s happening with Rails and the Rails community. (&lt;a href=&quot;https://rails-weekly.ongoodbits.com/&quot;&gt;Sign up&lt;/a&gt; if you want to know what’s going on with edge Rails!)&lt;/p&gt;

&lt;p&gt;Amongst the many things we’ll miss, we’ll miss these the most:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The many uses of emoji icons in our team Slack, even more now that they’ve &lt;a href=&quot;http://slackhq.com/post/123561085920/reactions&quot;&gt;released emoji reactions&lt;/a&gt;!&lt;/li&gt;
  &lt;li&gt;His quick puns that truly are priceless, we’re going to have to make a bot from all his previous replies&lt;/li&gt;
  &lt;li&gt;Bowling with Godfrey, which was like watching a ballerina break dance (you have to see it to believe it)&lt;/li&gt;
  &lt;li&gt;His ability to pull the best face in all photos (below was our first Brewhouse meeting photo, I think he was trying to pull the trollface)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/2015/07/1st-team-meeting.jpg&quot; alt=&quot;First BrewhouseTeam meeting&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As for where Godfrey is going, he’ll be heading to Portland (so still cascadia!) to work with leaders in the open source community at &lt;a href=&quot;http://www.tilde.io/about-us/&quot;&gt;Tilde&lt;/a&gt;.&lt;/p&gt;

&lt;div id=&quot;teams&quot; class=&quot;brewhouse&quot;&gt;
  &lt;img id=&quot;godfrey&quot; src=&quot;/images/posts/2015/07/godfrey.png&quot; /&gt;
&lt;/div&gt;
&lt;audio id=&quot;power-up&quot;&gt;
  &lt;source src=&quot;/images/posts/2015/07/power-up.mp3&quot; /&gt;
  &lt;source src=&quot;/images/posts/2015/07/power-up.ogg&quot; /&gt;beep
&lt;/audio&gt;

&lt;p&gt;The Brewhouse team—and Vancouver’s development community at-large—will truly miss Godfrey, but we’re very happy and incredibly proud to have been able to work with him. Good luck with your next chapter in Portland, mate!&lt;/p&gt;

&lt;script type=&quot;text/javascript&quot; src=&quot;https://code.jquery.com/jquery-2.1.4.min.js&quot;&gt;&lt;/script&gt;

&lt;script&gt;
  $(window).scroll( function() {
    var bottom_of_teams = $(&quot;#teams&quot;).offset().top + $(&quot;#teams&quot;).outerHeight();
    var bottom_of_window = $(window).scrollTop() + $(window).height();

    if(bottom_of_window &gt; bottom_of_teams + $(window).height() * 0.1){
      to_tilde();
    } else {
      to_brewhouse();
    };
  });

  var to_tilde = function() {
    if($(&quot;#teams.brewhouse&quot;).length) {
      $(&quot;#power-up&quot;)[0].play();
    }
    $(&quot;#teams&quot;).removeClass(&quot;brewhouse&quot;).addClass(&quot;tilde&quot;);
  }

  var to_brewhouse = function() {
    $(&quot;#teams&quot;).removeClass(&quot;tilde&quot;).addClass(&quot;brewhouse&quot;);
  }
&lt;/script&gt;

&lt;style&gt;
  #teams {
    height: 396px;
    width: 680px;
    background: url(&#39;/images/posts/2015/07/brewhouse-tilde-bkg.png&#39;);
    transition: background-position 1s;
    position: relative;
    margin-bottom: 50px;
  }

  #teams.tilde {
    background-position: -733px 0;
  }

  #godfrey {
    position: absolute;
    bottom: 0;
    transition: height 1s, opacity 1s, left 1s;
    transition-timing-function: ease-out;
  }

  #teams.brewhouse #godfrey {
    opacity: 0.5;
    height: 155px;
    left: -22px;
  }

  #teams.tilde #godfrey {
    opacity: 1;
    height: 210px;
    left: -46px;
  }
&lt;/style&gt;

</content>

            
              <content type="image" src="http://brewhouse.io/images/posts/2015/07/horse-chan-social.jpg" />
            
        </entry>
      
    
      
        <entry>
            <title>Weather forecast retrospective meeting</title>
            <author>
              <name></name>
              <email></email>
            </author>
            <link href="http://brewhouse.io/blog/2015/07/07/weather-forecast-retrospective-meeting.html"/>
            <updated>2015-07-07T09:00:00-07:00</updated>
            <id>http://brewhouse.io/blog/2015/07/07/weather-forecast-retrospective-meeting</id>
            <content type="html">&lt;p&gt;At Brewhouse, we generally work on about 3 projects at a time from Monday to Thursday. Every Friday morning we all meet for 30 minutes to share how the week went with the rest of the team.&lt;/p&gt;

&lt;p&gt;We wanted this meeting to be a relaxed version of a retrospective but we found that most of us would just list what we had accomplished over the week. It was not obvious to know whether people were having a good time and if there was anything we could do, as a team, to improve happiness at work.&lt;/p&gt;

&lt;p&gt;We decided to experiment with a weather forecast method, giving others a sense of how our week went by associating it to a weather condition, e.g. sunny, cloudy, stormy, etc.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/2015/07/weather-retro.jpg&quot; alt=&quot;weather-forecast-retrospective&quot; /&gt;&lt;/p&gt;

&lt;!-- break --&gt;

&lt;p&gt;By using this technique, our comments went from:&lt;/p&gt;

&lt;blockquote&gt;
&quot;This week I have added the Slack integration to Goodbits and did customer support from time to time.&quot;
&lt;/blockquote&gt;

&lt;p&gt;to:&lt;/p&gt;

&lt;blockquote&gt;
&quot;It’s been a stormy week because I replied to customer as they were coming and could not really focus on developing the Slack integration for Goodbits.&quot;
&lt;/blockquote&gt;

&lt;p&gt;The weather metaphor gives us a good idea of the team morale. The weather roundup not only focuses on what’s been achieved but highlights what could be improved and how members are feeling about their work. It is a relaxed flavour of a retrospective meeting that enables us to engage with each other’s weeks in a more personal way with the goal of improving everyone’s happiness at work!&lt;/p&gt;

</content>

            
              <content type="image" src="http://brewhouse.io/images/posts/2015/07/weather-social.jpg" />
            
        </entry>
      
    
      
        <entry>
            <title>Brewhouse hires a creative beard</title>
            <author>
              <name>Lana Topham</name>
              <email>lana@brewhouse.io</email>
            </author>
            <link href="http://brewhouse.io/blog/2015/06/12/brewhouse-hires-a-creative-beard.html"/>
            <updated>2015-06-12T09:00:00-07:00</updated>
            <id>http://brewhouse.io/blog/2015/06/12/brewhouse-hires-a-creative-beard</id>
            <content type="html">&lt;p&gt;Feel free to pat us on the back – we’ve greatly increased the beard-to-face ratio of the office. And now we officially feel like we belong in &lt;a href=&quot;https://en.wikipedia.org/wiki/Gastown&quot;&gt;Gastown&lt;/a&gt;, with the addition of &lt;a href=&quot;https://twitter.com/patdryburgh&quot;&gt;Pat Dryburgh&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/2015/06/pat-bearday.jpg&quot; alt=&quot;Pat Dryburgh celebrating his bearday&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Pat’s past work includes a stretch at &lt;a href=&quot;https://perch.co/&quot;&gt;Perch&lt;/a&gt;, where he worked as Sr. User Experience Designer. In addition to designing the user experience and interface for their iOS apps, he also led the branding process, designed their website and most of the marketing materials, like shooting photos and videos to be used in the app and the website.&lt;/p&gt;

&lt;p&gt;For the past year and a half he’s been fruitful in his &lt;a href=&quot;http://dryburgh.co&quot;&gt;freelancing endeavours&lt;/a&gt; in London, Ontario.&lt;/p&gt;

&lt;p&gt;Let’s learn even more about our eighth hire.&lt;/p&gt;

&lt;!-- break --&gt;

&lt;p&gt;&lt;strong&gt;Q: What appealed to you about Brewhouse? Why did you want to work here?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;A: I have a tremendous amount of respect for &lt;a href=&quot;https://twitter.com/kalv&quot;&gt;Kalv&lt;/a&gt;, and so that was the first reason why I was interested in discussing a potential role with Brewhouse. Once I got to know the rest of the team and the values they hold as a company, I saw a lot of similarities to the way I think about building both products and a company culture.&lt;/p&gt;

&lt;p&gt;For instance, the vast majority of my knowledge comes from learning online. The web design and development community has, from the very beginning, been an open and collaborative community. Brewhouse has instilled these values of collaboration, transparency, and community into their culture, and I’m excited to have the opportunity to share what I’ve learned throughout my career as a freelancer and now as a &lt;strong&gt;Design Director&lt;/strong&gt; with the community that has given me so much.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Q: Describe your career path. How did you end up in design?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;A: I consider myself to be an autodidact, and that really started at the age of 13 when I taught myself how to play guitar. Without even the basic understanding of how to tune the damn thing (I focused on the top 3 strings, tuned to E, G#, and B), I set off on a path that would eventually take me all across Ontario and into several Northeastern states to play in a band. Near the beginning of my musical journey, I realized I needed a website and couldn’t afford to have one built for me. So, I did it myself.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/2015/06/pat-guitar.jpg&quot; alt=&quot;Pat Dryburgh playing the guitar&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Credit: &lt;a href=&quot;http://edwardplatero.com&quot;&gt;Edward Platero&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It took me a while to come around to the idea that this newfound passion for designing and building websites could actually be turned into a career. I’d never been an “art” guy in school and can’t draw a stick figure to save my life. However, I did understand problem solving and communication, which in my mind is what design is all about. After leaving a music director position at a church and deciding I didn’t want to pursue religious work any longer, I asked to meet with a friend’s father who ran a small design studio in London, Ontario. What I lacked in formal education I made up with passion and hard-work, and after two years of designing websites and managing the in-house digital printing, I left the studio and set off on my own to become a freelancer.&lt;/p&gt;

&lt;p&gt;Two years later, I found myself moving out to Vancouver to join &lt;a href=&quot;http://perch.co&quot;&gt;Perch&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;While my time at &lt;a href=&quot;http://perch.co&quot;&gt;Perch&lt;/a&gt; was the most challenging and exhilarating experience of my professional career, it also coincided with one of the most traumatic experiences of my life. In July of 2010, my mother was diagnosed with Mesothelioma. Beating all of the odds, she survived several years beyond the average prognosis, but after 18 months of living with the stress of startup life and the weight of seeing from a distance the demise of the woman who raised me I simply couldn’t take the pressure any longer. I ended up &lt;a href=&quot;http://adrivehome.tumblr.com&quot;&gt;driving home&lt;/a&gt; so I could slow things down in my professional life and spend more time being with her. She passed on July 7, 2014, two weeks after I officially launched my &lt;a href=&quot;http://dryburgh.co&quot;&gt;new freelance business&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;It was only a matter of time before I moved back to Vancouver, and I did so thinking I would be coming to continue to build my freelancing business and perhaps grow it into a full-fledged studio. However, shortly after arriving I received an email from Kalv inviting me to have lunch with him, and now here we are. :)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Q: We’re glad Vancouver called you back! And Kalv asked you on a date ;) Looking out 3 - 5 years, beyond the obvious trends, what do you think will be the next big change in our industry?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;A: I think the biggest change will be how users interact with the software we create. For decades we saw the keyboard and mouse as the only way to interact with digital interfaces, so much so that certain mobile devices even had little nubs to control a tiny little mouse pointer. Obviously all of that changed with the introduction of the iPhone and touch interactions, but since then we’ve seen even more advances in natural language input, speech-to-text, and even gestures which require no direct contact with the device. By the time we get to Minority Report style interactions, I’ll have to have really upped my cardio game.&lt;/p&gt;

&lt;iframe src=&quot;http://www.criticalcommons.org/Members/ironman28/clips/FFminorityReportGesturalinterfaceH264.mov/embed_view&quot; frameborder=&quot;0&quot; width=&quot;630&quot; height=&quot;460&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;&lt;strong&gt;Q: We’re looking forward to that world! So what do you think is the most embarrassing professional screw-up you’ve had?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;A: I don’t know whether it’s good or bad that it’s so hard to answer this question ;). I think one of the earliest lessons learned in my professional career is that everyone has a limited amount of energy, and that in order to best take care of business you best take care of yourself.&lt;/p&gt;

&lt;p&gt;This lesson was learned when I first took the music director position at Trinity Community Church. I was young and hungry, and had just adopted a team of over 50 volunteers from a guy with a wife, 5 kids, and over a hundred birds in his basement (the kids were on the main floor) who had seemingly limitless amounts of energy. In my first few months of working there, I put in countless hours and several all-nighters planning services and pulling all of our music teams together, but wasn’t spending any time on myself. If Sunday was supposed to be the sabbath, I was owed the death penalty several times over.&lt;/p&gt;

&lt;p&gt;All of this eventually came to a head one fateful Sunday morning when, having scheduled myself to lead the music that morning, I failed to arrive until just before the second of three services. Thankfully the team was able to step up and cover for me, but obviously I had let them, our church leaders, and the entire congregation down.&lt;/p&gt;

&lt;p&gt;The next day I sat with our lead pastor and one of the church elders to discuss the incident, and was basically told I had one more chance before I would be let go. As part of the conversation, we decided I would be allowed to take Tuesdays off as my own personal “Sabbath,” wherein I would focus on my own personal life and completely avoid all aspects of my work responsibilities.&lt;/p&gt;

&lt;p&gt;For the next several months, I spent every Tuesday feeding myself spiritually, emotionally, and mentally. I read veraciously, I started journalling consistently, and I relaxed. My sleep schedule started to normalize and I was finding it easier to wake up for those early Sunday morning rehearsals. But most importantly, I found that I was even more productive by focusing and working fewer hours. Then we made the decision to launch two churches in a month, and those Tuesdays went down the drain until I ended up leaving the church altogether.&lt;/p&gt;

&lt;p&gt;That need for rest has been incredibly important to my career and personal life, and I’m incredibly thankful that Brewhouse is a place where the need for rest and rejuvenation is not only respected by expected.&lt;/p&gt;

&lt;p&gt;But, now that I think of it, it may have been that time I farted in a client meeting.”&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Q: That wouldn’t be embarrassing, at all! I’m sure the client thought it was just part of the creative process. You mention that a lot of your skills are self taught. How do you learn about new information?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;A: Mostly through online publications such as &lt;a href=&quot;http://alistapart.com/&quot;&gt;A List Apart&lt;/a&gt;, &lt;a href=&quot;http://smashingmagazine.com&quot;&gt;Smashing Magazine&lt;/a&gt;, and the &lt;a href=&quot;http://tutsplus.com&quot;&gt;TutsPlus&lt;/a&gt; network. I also listen to a few business and design podcasts such as &lt;a href=&quot;http://www.muleradio.net/mistakes/&quot;&gt;Let’s Make Mistakes&lt;/a&gt; and &lt;a href=&quot;http://www.businessology.biz&quot;&gt;Businessology&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Q: Nice. And do you have a favourite twitter handle you follow?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;A: &lt;a href=&quot;https://twitter.com/thetweetofgod&quot;&gt;@thetweetofgod&lt;/a&gt;, because it’s far more entertaining than the bible.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Q: Last question. What is your favourite quote?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/2015/06/pat-quote.png&quot; alt=&quot;I&#39;m gonna build stuff until I die. --Loren Brichter&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Pat’s Expertise&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Pat will be adding design as a core competency of Brewhouse. His focus will be on the design process from a visual, user experience, and strategic branding perspective. He has full confidence that the spirit of collaboration will carry on and that he’ll be able to harness the design thinking already existing in the company to create even more compelling and irresistible products for Brewhouse and its clients.&lt;/p&gt;

</content>

            
              <content type="image" src="http://brewhouse.io/images/posts/2015/06/pat-bearday.jpg" />
            
        </entry>
      
    
      
        <entry>
            <title>Ember.js: An Antidote To Your Hype Fatigue</title>
            <author>
              <name>Godfrey Chan</name>
              <email>godfrey@brewhouse.io</email>
            </author>
            <link href="http://brewhouse.io/blog/2015/05/13/emberjs-an-antidote-to-your-hype-fatigue.html"/>
            <updated>2015-05-13T09:00:00-07:00</updated>
            <id>http://brewhouse.io/blog/2015/05/13/emberjs-an-antidote-to-your-hype-fatigue</id>
            <content type="html">&lt;p&gt;This is a write-up of the talk I gave at &lt;a href=&quot;http://www.meetup.com/vancouver-javascript-developers/&quot;&gt;VanJS&lt;/a&gt;
this month. You can find the slides &lt;a href=&quot;https://speakerdeck.com/chancancode/ember-dot-js-an-antidote-to-your-hype-fatigue&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you happen to be in Seattle, I’ll be giving a version of this talk on
Thursday May 28th at the &lt;a href=&quot;http://www.meetup.com/Ember-js-Seattle-Meetup/events/222195632/&quot;&gt;Ember.JS Seattle&lt;/a&gt;
meetup.&lt;/p&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/ASxwoyg40L4&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;!-- break --&gt;

&lt;hr /&gt;

&lt;p&gt;A while back, &lt;a href=&quot;https://twitter.com/apike&quot;&gt;Allen Pike&lt;/a&gt; coined the term
&lt;em&gt;JavaScript Framework Fatigue&lt;/em&gt; in &lt;a href=&quot;http://www.allenpike.com/2015/javascript-framework-fatigue/&quot;&gt;his essay&lt;/a&gt;
about the churns in the front-end JavaScript landscape. You really should read
it yourself, but I’ll summarize it for you here:&lt;/p&gt;

&lt;p&gt;
  &lt;a href=&quot;/images/posts/2015/05/pop-quiz.png&quot;&gt;
    &lt;img class=&quot;img-responsive&quot; alt=&quot;Pop quiz!&quot; src=&quot;/images/posts/2015/05/pop-quiz.png&quot; /&gt;
  &lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;If you are a web developer, and you don’t know the answer to this, or if you
don’t recognize half of the things on this slide, congratulations, you have
probably just experienced &lt;em&gt;JavaScript Framework Fatigue&lt;/em&gt;. On the other hand, if
you immediately know the answer to this and you can name all the things on this
here, then you are probably experiencing &lt;em&gt;JavaScript Framework Fatigue&lt;/em&gt; daily,
and I genuinely feel sorry for you.&lt;/p&gt;

&lt;p&gt;Unfortunately, that used to be me. I worked for a company that offered &lt;a href=&quot;http://caliper.io/&quot;&gt;application
monitoring service&lt;/a&gt; for front-end JavaScript applications.
As you can imagine, having to add support for a new framework every sixteen
minutes does not make a very scalable business.&lt;/p&gt;

&lt;p&gt;
  &lt;a href=&quot;/images/posts/2015/05/frameworks-1-0.png&quot;&gt;
    &lt;img class=&quot;img-responsive&quot; alt=&quot;JavaScript frameworks: 1.0 release dates&quot; src=&quot;/images/posts/2015/05/frameworks-1-0.png&quot; /&gt;
  &lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;To give you some perspective, this is some of the frameworks that reached “1.0”
during the last few years. I included a few pre-1.0 frameworks on the far right.
As you can see, one of them &lt;a href=&quot;https://github.com/batmanjs/batman/commit/87dd413e0c975e11e41c42a18ff0435e34869a32&quot;&gt;didn’t even make it to 1.0&lt;/a&gt;.
It also turns out these project all have pretty different views on what “1.0”
means, so this visualization didn’t quite match my mental timeline.&lt;/p&gt;

&lt;p&gt;(&lt;strong&gt;Correction:&lt;/strong&gt; in an earlier version of this post, Meteor was incorrectly put
on the pre-1.0 column)&lt;/p&gt;

&lt;p&gt;So I tried something else.&lt;/p&gt;

&lt;p&gt;
  &lt;a href=&quot;/images/posts/2015/05/frameworks-critical-mass.png&quot;&gt;
    &lt;img class=&quot;img-responsive&quot; alt=&quot;JavaScript frameworks: reaching critical mass&quot; src=&quot;/images/posts/2015/05/frameworks-critical-mass.png&quot; /&gt;
  &lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;Here, I consulted &lt;a href=&quot;https://www.google.com/trends/&quot;&gt;Google Trends&lt;/a&gt; and plotted
the month that each framework first reached an arbitrary threshold of “interest”
based on Google search queries. This turned out to be a pretty good
approximation of “when did I first hear about X?”, and it is pretty close to the
mental timeline I have in mind.&lt;/p&gt;

&lt;p&gt;As you can see, these frameworks didn’t just get popular for no reason – each of
them genuinely brings some valuable new ideas to the table. For example,
Backbone popularized the idea having a small library that gets out of your way,
Knockout introduced two-way bindings to the world, Meteor promises to let you
write the same code for both your server and on the client, Angular encourages
you to write highly reusable and composable directives, and React challenged
everyone with a more functional approach to view rendering.&lt;/p&gt;

&lt;p&gt;If you are a person with a lot of free time and curiosity, this is an excellent
time to be a front-end developer. If you are running a consulting agency, this
might even be good for business. Unfortunately, if you have a real job and a
product to maintain, then these new developments doesn’t really benefit you that
much unless you rewrite your project using the latest framework every three
months. Worse, even if you managed to resist the temptation to do that, you will
keep hearing people around you raving about their shiny new toys, making you
feel inferior about the way you approach your project.&lt;/p&gt;

&lt;p&gt;That, my friend, is what hype does to you.&lt;/p&gt;

&lt;h2 id=&quot;hype-fatigue&quot;&gt;Hype Fatigue&lt;/h2&gt;

&lt;p&gt;
  &lt;a href=&quot;/images/posts/2015/05/hype-cycle.png&quot;&gt;
    &lt;img class=&quot;img-responsive&quot; alt=&quot;The Hype Cycle by Brandon Hays&quot; src=&quot;/images/posts/2015/05/hype-cycle.png&quot; /&gt;
  &lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://twitter.com/tehviking&quot;&gt;Brandon Hays&lt;/a&gt; summarized this in a chart pretty
eloquently at &lt;a href=&quot;http://fluentconf.com/javascript-html-2015/public/schedule/speaker/192560&quot;&gt;Fluent Conf&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;When a new framework comes around, it probably solves an existing problem in a
new and interesting way, enabling you to take on some old challenges much more
easily, or even enables you to solve some new problems that you didn’t think you
could solve before. From there, you begin to extrapolate your experience. Wow,
if that problem that took me forever to solve before only takes a weekend now,
imagine what I can do in three months!&lt;/p&gt;

&lt;p&gt;Six months later, you begin to realize that you are running into other problems.
Perhaps you are spending a lot of time reinventing the tools you had from your
previous life in the other framework. Or perhaps, sometimes hard problems are
just hard regardless of your tools of choice. Whatever the reasons, this new
tool did not magically transform your into a 10X engineer you hoped to become.&lt;/p&gt;

&lt;p&gt;No worries though. During the time you focused on rewriting your app, a dozen
new frameworks have appeared, so you could just pick up another one of them and
start all over again.&lt;/p&gt;

&lt;p&gt;With that, you have completed the circuit that hype fatigue runs on.&lt;/p&gt;

&lt;h2 id=&quot;an-antidote-to-your-hype-fatigue&quot;&gt;An Antidote To Your Hype Fatigue&lt;/h2&gt;

&lt;p&gt;I’d like to introduce you to &lt;a href=&quot;https://twitter.com/tomdale/status/573326510670495744&quot;&gt;an antidote to your hype fatigue&lt;/a&gt;.
It’s called &lt;a href=&quot;http://emberjs.com/&quot;&gt;Ember.js&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;
  &lt;a href=&quot;/images/posts/2015/05/ember-hype.png&quot;&gt;
    &lt;img class=&quot;img-responsive&quot; alt=&quot;The Ember hype chart&quot; src=&quot;/images/posts/2015/05/ember-hype.png&quot; /&gt;
  &lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;You have probably seen charts like this, where Ember consistently dominate the
bottom-end of the hype contest regardless of the metric you choose. To a casual
observer, it’s actually pretty natural to arrive at the following conclusion:&lt;/p&gt;

&lt;p style=&quot;text-align: center; font-size: 24px&quot;&gt;&lt;em&gt;Isn’t Ember dead?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;I’ll let you ponder on that for a moment; we’ll come back to this later. For
now, let’s focus on what makes Ember different.&lt;/p&gt;

&lt;p&gt;Ember made some pretty bold bets during its early days:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Focus on ambitious web applications&lt;/li&gt;
  &lt;li&gt;Future web standards foresight&lt;/li&gt;
  &lt;li&gt;Stability without stagnation&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;These big bets have influenced a lot of the decision in the framework, and
consequently, its adoption pattern. So let’s take a closer look on each of them.&lt;/p&gt;

&lt;h2 id=&quot;big-bet-focus-on-ambitious-web-applications&quot;&gt;Big Bet: Focus on Ambitious Web Applications&lt;/h2&gt;

&lt;p&gt;A lot of frameworks set out to solve the &lt;em&gt;widget&lt;/em&gt; problem (e.g. a date-picker).
In other words, they start out by &lt;a href=&quot;http://facebook.github.io/react/&quot;&gt;providing a solution to the &lt;em&gt;V&lt;/em&gt; in the MVC&lt;/a&gt;,
and from there you can extrapolate the same patterns to build out a full
application.&lt;/p&gt;

&lt;p&gt;This is great, because every web developer needs to solve the widget problem.
This allows you to quickly sprinkle the new framework into your existing apps
and immediately benefit from it.&lt;/p&gt;

&lt;p&gt;By contrast, Ember sets out to provide a wholesale solution to the client-side
application problem. This came at a high cost. For one thing, it is a lot more
work. It also means a much steeper learning curve, and severely restricts the
pool of potential users.&lt;/p&gt;

&lt;p&gt;
  &lt;a href=&quot;/images/posts/2015/05/companies.png&quot;&gt;
    &lt;img class=&quot;img-responsive&quot; alt=&quot;Some serious Ember users&quot; src=&quot;/images/posts/2015/05/companies.png&quot; /&gt;
  &lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;On the other hand, focusing on the bigger problem wins you some very serious
users. Obviously this is only a very &lt;a href=&quot;http://emberjs.com/ember-users&quot;&gt;small&lt;/a&gt;
&lt;a href=&quot;http://builtwithember.io&quot;&gt;subset&lt;/a&gt; of them, but it should give you a good idea
on the scale that Ember operates on.&lt;/p&gt;

&lt;h3 id=&quot;solving-the-hard-problems&quot;&gt;Solving The Hard Problems™&lt;/h3&gt;

&lt;p&gt;Solving “the application problem” is easier said than done, though. Focusing on
the big picture forces you to take on a lot of extra responsibilities and edge
cases that you could otherwise delegate to the end users. In the end, that
forces you to solve a lot of Hard Problems™ in a generic fashion.&lt;/p&gt;

&lt;p&gt;For example, let’s say you decided you that you would provide a solution to the
entire MVC cross-section. But you will quickly realize that “MVC” is just a
component architecture. For an application, you would have many of these MVC
things working together on the same page, and you need something to orchestrate
them.&lt;/p&gt;

&lt;p&gt;So you add a router. But wait, in order for the components to seamlessly work
alongside each other, you need to have a “single source of truth”. So you throw
a data store into the mix.&lt;/p&gt;

&lt;p&gt;Great. Now that you have a serious application, you probably need a way to test
it as well.&lt;/p&gt;

&lt;p&gt;Hm, but there’s more! You need to set up a build pipeline for all of these
things: managing assets, modules, loaders, development server, different build
environments, configurations and all that jazz.&lt;/p&gt;

&lt;p&gt;Then of course, your application wouldn’t be of any use if you can’t ship it to
your users, so you also need to figure out the deployment strategies.&lt;/p&gt;

&lt;p&gt;And oh wait. Obviously, your team of 5 developers is not going to write all the
code you are going to use, so you need a sane way to share code between the
wider community as well.&lt;/p&gt;

&lt;p&gt;Of course, these problems are probably Not That Hard™. After all, anyone who
builds JavaScript applications using smaller libraries would have to solve these
problems themselves, so we know that could be done. So perhaps, we should just
say, focusing on applications forces you to solve a lot of &lt;del&gt;Hard&lt;/del&gt; Real
World Problems™.&lt;/p&gt;

&lt;p&gt;But as you can see, these Real World Problems™ are very boring, so they get a
lot less spotlight attention than, say, new programming paradigms. After all,
none of these are exactly uncharted territories.&lt;/p&gt;

&lt;p&gt;In a lot of ways, the “Ember is dead” sentiment feels a lot like “Apple has
stopped innovating”. At the end of the day, it’s still the same &lt;em&gt;LCD&lt;/em&gt; display,
&lt;em&gt;just more pixels&lt;/em&gt;, right? I don’t even know what it is, but it certainly sounds
a lot less innovative than an OLED display. Sure, the camera takes pretty good
pictures, but it’s only 8 mega pixels… why would anyone want that? A laptop
with all-day battery life? Who cares? Where are their augmented-reality glasses?&lt;/p&gt;

&lt;p&gt;This is pretty interesting. Because a lot of times (as geeks) we tend to be
carried away by the flashy new things rather than the boring stuff that actually
makes or breaks our day-to-day experience.&lt;/p&gt;

&lt;h3 id=&quot;the-boring-non-innovations&quot;&gt;The Boring Non-Innovations&lt;/h3&gt;

&lt;p&gt;Let’s take a look at some of the boring non-innovations in Ember that makes your
development experience a lot nicer.&lt;/p&gt;

&lt;h4 id=&quot;ember-inspector&quot;&gt;Ember Inspector&lt;/h4&gt;

&lt;p style=&quot;position: relative; overflow: hidden&quot;&gt;
  &lt;a href=&quot;/images/posts/2015/05/ember-inspector-1.png&quot; style=&quot;float: left; width: 25%&quot;&gt;
    &lt;img class=&quot;img-responsive&quot; alt=&quot;The Ember Inspector&quot; src=&quot;/images/posts/2015/05/ember-inspector-1.png&quot; /&gt;
  &lt;/a&gt;

  &lt;a href=&quot;/images/posts/2015/05/ember-inspector-2.png&quot; style=&quot;float: left; width: 25%&quot;&gt;
    &lt;img class=&quot;img-responsive&quot; alt=&quot;The Ember Inspector&quot; src=&quot;/images/posts/2015/05/ember-inspector-2.png&quot; /&gt;
  &lt;/a&gt;

  &lt;a href=&quot;/images/posts/2015/05/ember-inspector-3.png&quot; style=&quot;float: left; width: 25%&quot;&gt;
    &lt;img class=&quot;img-responsive&quot; alt=&quot;The Ember Inspector&quot; src=&quot;/images/posts/2015/05/ember-inspector-3.png&quot; /&gt;
  &lt;/a&gt;

  &lt;a href=&quot;/images/posts/2015/05/ember-inspector-4.png&quot; style=&quot;float: left; width: 25%&quot;&gt;
    &lt;img class=&quot;img-responsive&quot; alt=&quot;The Ember Inspector&quot; src=&quot;/images/posts/2015/05/ember-inspector-4.png&quot; /&gt;
  &lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;The &lt;a href=&quot;https://github.com/emberjs/ember-inspector/&quot;&gt;Ember inspector&lt;/a&gt; is a browser
extension for debugging Ember apps. Similar to &lt;a href=&quot;https://github.com/facebook/react-devtools&quot;&gt;React&lt;/a&gt;
and &lt;a href=&quot;https://github.com/angular/angularjs-batarang&quot;&gt;Angular’s&lt;/a&gt; inspectors, you
get a tree view of all your views, their rendering performance, and so on.&lt;/p&gt;

&lt;p&gt;Similar to the browsers’ native developer tools, you can also click on any
element on the screen and it would bring you to the corresponding view in the
tree.&lt;/p&gt;

&lt;p&gt;You can fiddle with its internal states directly from the inspector, or you can
interact with the view object from the JavaScript console.&lt;/p&gt;

&lt;p&gt;But because Ember is an application framework, you get to see a lot more from
the inspector. For example, you can look at your routes table, interact with the
route objects and look into the router’s current state.&lt;/p&gt;

&lt;p&gt;You  can also look at the data store and see all the models you have loaded,
follow their relationship and so on.&lt;/p&gt;

&lt;h4 id=&quot;ember-data&quot;&gt;Ember Data&lt;/h4&gt;

&lt;p&gt;That brings us to &lt;a href=&quot;https://github.com/emberjs/data&quot;&gt;Ember Data&lt;/a&gt;, the “official”
persistance/model layer for Ember.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// app/models/post.js&lt;/span&gt;

&lt;span class=&quot;kr&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;DS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;extend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;DS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;attr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;string&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;DS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;attr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;string&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;published&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;DS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;attr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;date&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;author&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;DS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;belongsTo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;user&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;comments&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;DS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;hasMany&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;comment&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This is how you would define your model objects in Ember Data. Just like you
would expect, a model can have attributes and relationships. For example, a blog
post would probably have a title, body, published at timestamp, an author and
many comments.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;nx&quot;&gt;store&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;post&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;store&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;post&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Rails&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;store&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;post&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;store&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;post&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;store&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createRecord&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;post&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Rails is Omakase&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;...&amp;quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Ember Data also manages your models while they are kept in-memory. It would make
sure that there is only one canonical copy of each model instance in the store,
and keep them in-sync with the server whenever data comes in over the wire.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// app/adapters/application.js&lt;/span&gt;

&lt;span class=&quot;kr&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;DS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;RestAdapter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;extend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;host&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;https://...&amp;quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// app/adapters/user.js&lt;/span&gt;

&lt;span class=&quot;kr&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;FirebaseAdapter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;extend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;firebase&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;https://...&amp;quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Of course, you can specify where your data comes from and how you communicate
with those data sources. &lt;a href=&quot;http://jsonapi.org/&quot;&gt;JSON API&lt;/a&gt; will soon become the
default interchange format between Ember Data and your server, but you can just
as easily define your own as well. For example, you can have most of your data
coming from your RESTful API, but store your user data on Firebase.&lt;/p&gt;

&lt;p&gt;(In fact, your data sources &lt;a href=&quot;/blog/2015/03/06/adapter-patterns-in-ember-js.html&quot;&gt;doesn’t even have to be an API&lt;/a&gt;.)&lt;/p&gt;

&lt;h4 id=&quot;ember-cli&quot;&gt;Ember CLI&lt;/h4&gt;

&lt;p&gt;Next, let’s talk about &lt;a href=&quot;http://www.ember-cli.com/&quot;&gt;Ember CLI&lt;/a&gt;. Ember CLI is a
set of command line tools for generating and developing your Ember apps, but
it also refers to the conventional setup generated by Ember CLI, the tooling
and ecosystem around it.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;% ember new test-app
version: 0.2.3
installing
  create .bowerrc
  create .editorconfig
  create .ember-cli
  create .jshintrc
  create .travis.yml
  create Brocfile.js
  create README.md
  create app/app.js
  create app/components/.gitkeep
  create app/controllers/.gitkeep
  create app/helpers/.gitkeep
  create app/index.html
  create app/models/.gitkeep
  create app/router.js
  create app/routes/.gitkeep
  create app/styles/app.css
  create app/templates/application.hbs
  create app/templates/components/.gitkeep
  create app/views/.gitkeep
  create bower.json
  create config/environment.js
  create .gitignore
  create package.json
  create public/crossdomain.xml
  create public/robots.txt
  create testem.json
  create tests/.jshintrc
  create tests/helpers/resolver.js
  create tests/helpers/start-app.js
  create tests/index.html
  create tests/test-helper.js
  create tests/unit/.gitkeep
  create vendor/.gitkeep
Installed packages for tooling via npm.
Installed browser packages via Bower.
Successfully initialized git.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;For example, running &lt;code&gt;ember new APP_NAME&lt;/code&gt; generates a new Ember app with the
default stack – which includes the conventional file/folder structure for your
app, Git, ES6 modules transpiler, a module loader, a development server, an
asset pipeline, test harness, module loader, package management, JSHint, Babel,
etc.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;% ember serve
version: 0.2.3
Livereload server on port 35729
Serving on http://localhost:4200/

Build successful - 3774ms.

Slowest Trees                                 | Total
----------------------------------------------+---------------------
Concat: Vendor                                | 3005ms

Slowest Trees (cumulative)                    | Total (avg)
----------------------------------------------+---------------------
Concat: Vendor (1)                            | 3005ms
Babel (2)                                     | 231ms (115 ms)

file changed templates/application.hbs

Build successful - 330ms.

Slowest Trees                                 | Total
----------------------------------------------+---------------------
Concat: Vendor                                | 103ms

Slowest Trees (cumulative)                    | Total (avg)
----------------------------------------------+---------------------
Concat: Vendor (1)                            | 103ms
Funnel (32)                                   | 37ms (1 ms)
SourcemapConcat (3)                           | 22ms (7 ms)
TreeMerger (67)                               | 17ms (0 ms)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The development server probably deserves a special call out. Under the hood,
Ember CLI uses &lt;a href=&quot;https://github.com/broccolijs/broccoli&quot;&gt;Broccoli&lt;/a&gt; for the build
pipeline. Whenever you change a file, it’ll automatically rebuild that part of
your app bundle incrementally. When that’s done, Ember automatically reloads
your app in any open browser tabs – all out of the box with zero configuration.&lt;/p&gt;

&lt;h4 id=&quot;testing&quot;&gt;Testing&lt;/h4&gt;

&lt;p&gt;You could design your architecture in a way that makes your components very
unit-testable in theory, but that’s usually not where the difficulty lies – the
most difficult part about testing is getting into the habit of writing them,
100% of the time.&lt;/p&gt;

&lt;p&gt;How many of you write tests for your front-end JavaScript projects? Do you write
unit tests? Do you write end-to-end acceptance tests? What about testing them in
multiple browsers? Continuously running them during development? Do you do all
of those things for your side projects too?&lt;/p&gt;

&lt;p&gt;Personally, I probably won’t do any of that because it feels like a lot of work
to set it up in the first place.&lt;/p&gt;

&lt;p&gt;Fortunately, you don’t have to. Out of the box, Ember CLI sets up the test
harness for your app. When you use the generator, it always generates the
corresponding test files for you:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;% ember generate resource post
version: 0.2.3
installing
  create app/models/post.js
installing
  create tests/unit/models/post-test.js
installing
  create app/routes/post.js
  create app/templates/post.hbs
installing
  create tests/unit/routes/post-test.js&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This is what your unit test might look like for a model:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;nx&quot;&gt;moduleForModel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;post&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;slug&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;post&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;subject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;Rails is omakase&amp;#39;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;equal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;slug&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;rails-is-omakase&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;For a component:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;nx&quot;&gt;moduleForComponent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;delete-button&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;delete confirmation&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;component&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;subject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;Delete post&amp;#39;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;component&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;click&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;equal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;component&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;Are you sure?&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;End-to-end integration tests:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Acceptance: check out&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Express checkout&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;visit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;/products/agile-web-development-with-rails&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;click&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;#express-checkout&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;fillIn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;#login .username&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;godfrey&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;fillIn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;#login .secret&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;secret&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;click&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;#login .submit&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;andThen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;confirmation&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;#notice h3&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

    &lt;span class=&quot;nx&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;equal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;confirmation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;Thank you for your order&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You can run them from the command-line using a headless browser:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;% ember test
version: 0.2.3
Built project successfully.
ok 1 PhantomJS 1.9 - JSHint - .: app.js should pass jshint
ok 2 PhantomJS 1.9 - JSHint - helpers: helpers/resolver.js should pass jshint
...
ok 11 PhantomJS 1.9 - route:post: it exists

1..11
# tests 11
# pass  11
# fail  0

# ok&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;As you can see, JSHint is also integrated into the testing pipeline. By default,
a failing JSHint rule would result in a failing test.&lt;/p&gt;

&lt;p&gt;Or you can run a test server, which automatically reruns your tests in multiple
browsers whenever you make changes to your files:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;% ember test --server

TEST&amp;#39;EM &amp;#39;SCRIPTS!
Open the URL below in a browser to connect.
http://localhost:7357/
━━━━━━━━━━━━━━┓
 PhantomJS 1.9┃  Chrome 43.0
    5/5 ✔     ┃    5/5 ✔
              ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━








✔ 5 tests complete.
[Press ENTER to run tests; q to quit; p to pause]&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h4 id=&quot;ember-addons&quot;&gt;Ember Addons&lt;/h4&gt;

&lt;p&gt;While generators and all the goodies that EmberCLI gives you in the standard
stack are pretty cool, the real breakthrough here is that we finally agreed on a
&lt;em&gt;canonical&lt;/em&gt;/&lt;em&gt;conventional&lt;/em&gt; set up for Ember applications. This enables the
community to augment the framework and extend its functionality through Ember
Addons.&lt;/p&gt;

&lt;p&gt;For example, if you prefer writing CoffeeScript, all you have to do is to run
&lt;code&gt;ember install ember-cli-coffeescript&lt;/code&gt; (which installs the package from NPM
under-the-hood), and everything Just Works™ with zero configuration – generators
now spit out CoffeeScript files (even the test files are in CoffeeScript), the
module loader and source maps continues to work as expected, it even sets up
&lt;a href=&quot;http://www.coffeelint.org/&quot;&gt;CoffeeLint&lt;/a&gt; to replace the default JSHint setup.&lt;/p&gt;

&lt;p&gt;Want to use Sass for your CSS? &lt;code&gt;ember install ember-cli-sass&lt;/code&gt;. Prefer Mocha
over of QUnit? &lt;code&gt;ember install ember-cli-mocha&lt;/code&gt;. Curious about your code coverage
stats? &lt;code&gt;ember install ember-cli-blanket&lt;/code&gt;. Need to test your app against multiple
browsers on Sauce Labs? &lt;code&gt;ember install ember-cli-sauce&lt;/code&gt;. Need a realtime
backend? &lt;code&gt;ember install emberfire&lt;/code&gt;. What about authentication? &lt;code&gt;ember install
ember-cli-simple-auth&lt;/code&gt;. Animated transitions? &lt;code&gt;ember install liquid-fire&lt;/code&gt;.
Wondering about deployment? &lt;code&gt;ember install ember-cli-deploy&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In my opinion, this is probably the most important benefit unlocked by EmberCLI.
In less than a year’s time, the community has already published &lt;a href=&quot;http://www.emberaddons.com/&quot;&gt;close to 1000 addons&lt;/a&gt;,
with new ones being added daily.&lt;/p&gt;

&lt;h2 id=&quot;big-bet-future-standards-foresight&quot;&gt;Big Bet: Future Standards Foresight&lt;/h2&gt;

&lt;p&gt;
  &lt;a href=&quot;/images/posts/2015/05/wycats.png&quot;&gt;
    &lt;img class=&quot;img-responsive&quot; alt=&quot;Yehuda Katz, a JavaScript thought leader&quot; src=&quot;/images/posts/2015/05/wycats.png&quot; /&gt;
  &lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;It helps to have some JavaScript Thought Leaders™ on your framework’s core team.
For example, &lt;a href=&quot;https://twitter.com/wycats&quot;&gt;Yehuda Katz&lt;/a&gt; happens to be a member on
TC39, which is the committee that is responsible for future versions of the
&lt;del&gt;JavaScript&lt;/del&gt;ECMAScript language. He was also on the W3C Technical
Architecture Group, which focus on the larger web platform.&lt;/p&gt;

&lt;p&gt;So naturally, you would expect that the core team would make decisions with the
web platform’s future roadmap in mind. And they do.&lt;/p&gt;

&lt;h3 id=&quot;promises&quot;&gt;Promises&lt;/h3&gt;

&lt;p&gt;One example of this is &lt;a href=&quot;https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Promise&quot;&gt;Promises&lt;/a&gt;.
It almost feels funny to describe Promises as a future technology today, but it
was some pretty cutting edge stuff when they decided to go all-in with promises
across the Ember stack over two years ago.&lt;/p&gt;

&lt;p&gt;Let’s see some examples.&lt;/p&gt;

&lt;p&gt;You probably heard of the Ember Router. This is one of the best things in the
Ember stack. In fact, &lt;a href=&quot;https://github.com/angular/router&quot;&gt;the new Angular router&lt;/a&gt;
is backed by &lt;a href=&quot;https://github.com/tildeio/route-recognizer&quot;&gt;the same routing library&lt;/a&gt;
extracted from Ember, and react-router is also &lt;a href=&quot;https://github.com/rackt/react-router#thanks-ember&quot;&gt;heavily inspired&lt;/a&gt;
by the Ember router.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// app/routes/post.js&lt;/span&gt;

&lt;span class=&quot;kr&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Ember&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Route&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;extend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ajax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;/posts/&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;post_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This is how you define a route in Ember. You can implement the &lt;code&gt;model&lt;/code&gt; hook,
which receives the parameters extracted from the URL. If you return a Promise
from this hook, Ember is smart enough to transition the app into a loading
state. When the promise resolves, it will continue loading the route and
rendering its templates; if it rejects, it will transition the app into an error
state.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;store&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;post&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Similarly, Ember Data uses Promises everywhere too. When you try to fetch a
model from your server, it will return a promise as it waits for the response.&lt;/p&gt;

&lt;p&gt;By embracing Promises across the stack, Ember can achieve ultimate Synergy™.
Since the Ember Data store returns a Promise and the router expects you to
return one from the &lt;code&gt;model&lt;/code&gt; hook, the common async operations are very
economical:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// app/routes/post.js&lt;/span&gt;

&lt;span class=&quot;kr&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Ember&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Route&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;extend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;store&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;post&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;post_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;In fact, since Ember knows that you are inside the &lt;code&gt;PostRoute&lt;/code&gt;, and you have a
&lt;code&gt;Post&lt;/code&gt; model, and you have a &lt;code&gt;post_id&lt;/code&gt; in your URL param, Ember can basically
figure out what you want to do anyway, so you could have skipped the model hook
altogether if you want:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// app/routes/post.js&lt;/span&gt;

&lt;span class=&quot;kr&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Ember&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Route&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;extend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Likewise, Ember uses Promises in acceptance tests, since all user interactions
are async in the browser:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Acceptance: check out&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Express checkout&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;visit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;/products/agile-web-development-with-rails&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;click&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;#express-checkout&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;fillIn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;#login .username&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;godfrey&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;fillIn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;#login .secret&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;secret&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;click&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;#login .submit&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;confirmation&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;#notice h3&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;equal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;confirmation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;Thank you for your order&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;But since Ember has knowledge about the whole stack, it can spare you for those
noisy syntax and just queue them up automatically:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Acceptance: check out&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Express checkout&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;visit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;/products/agile-web-development-with-rails&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;click&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;#express-checkout&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;fillIn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;#login .username&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;godfrey&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;fillIn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;#login .secret&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;secret&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;click&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;#login .submit&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;andThen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;confirmation&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;#notice h3&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

    &lt;span class=&quot;nx&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;equal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;confirmation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;Thank you for your order&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Oh. And of course there will be a helpful view in the Ember inspector to help
you track down and debug these promises:&lt;/p&gt;

&lt;p&gt;
  &lt;a href=&quot;/images/posts/2015/05/ember-inspector-promise.png&quot;&gt;
    &lt;img class=&quot;img-responsive&quot; alt=&quot;Promises in the Ember Inspector&quot; src=&quot;/images/posts/2015/05/ember-inspector-promise.png&quot; /&gt;
  &lt;/a&gt;
&lt;/p&gt;

&lt;h3 id=&quot;web-components&quot;&gt;Web Components&lt;/h3&gt;

&lt;p&gt;If you are not familiar with them, &lt;a href=&quot;http://webcomponents.org/&quot;&gt;web components&lt;/a&gt;
is basically a set of future APIs to extend the browser’s capability by defining
custom elements.&lt;/p&gt;

&lt;p&gt;Just like Promises, &lt;a href=&quot;http://webcomponents.org/&quot;&gt;web components&lt;/a&gt; probably lost
all of its new car smell by now. But just remember, at the time they were
introduced in Ember, this is how you would explain them to your Angular friends:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;em&gt;A directive that is restricted to element names with an isolated scope that uses transclusion.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Because not a lot of browsers actually have support for web components natively,
Ember component is the stand-in for them in the current stack. They are designed
in a way that is conceptually and functionally pretty close to what web
components would look like in the future, so that the Ember version can
&lt;a href=&quot;https://gist.github.com/wycats/9144666b0c606d1838be&quot;&gt;eventually be dropped&lt;/a&gt;
(warning: 2-year-old link, so the specific details might be inaccurate).&lt;/p&gt;

&lt;h3 id=&quot;es6-and-beyond&quot;&gt;ES6 (and Beyond)&lt;/h3&gt;

&lt;p&gt;Ember also bets pretty heavily on the future version of JavaScript. It is
sometimes referred to as ES6 or ES2015.&lt;/p&gt;

&lt;p&gt;In fact, Ember CLI apps have been using ES6 modules syntax since day one:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// app/models/post.js&lt;/span&gt;

&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;DS&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;“&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ember&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;”&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kr&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;DS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;extend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;DS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;attr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;“&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;”&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;DS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;attr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;“&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;”&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;published&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;DS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;attr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;“&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;date&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;”&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;



&lt;span class=&quot;c1&quot;&gt;// test/unit/models/post-test.js&lt;/span&gt;

&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Post&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;test-app/models/post&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Out of the box, Ember CLI also sets up the &lt;a href=&quot;http://babeljs.io/&quot;&gt;Babel ES6 transpiler&lt;/a&gt;,
so most of the Ember community has already been writing the next version of
JavaScript for over half a year.&lt;/p&gt;

&lt;p&gt;ES6 also provides (finally) a class system for JavaScript. Historically, Ember
(and almost every other framework) has shipped with its own class system. You
cannot use ES6 classes for Ember objects today, but no worries, it’s already &lt;a href=&quot;https://github.com/emberjs/ember.js/issues/10341&quot;&gt;in
the works&lt;/a&gt;. Presumably, the
Ember class system will eventually be retired as the standards add support for
some of the missing features. Conveniently, there is a TC39 member on the Ember
core team, so that makes &lt;a href=&quot;https://github.com/wycats/javascript-decorators&quot;&gt;things&lt;/a&gt;
a bit easier ;)&lt;/p&gt;

&lt;p&gt;But if you are impatient, you don’t even have to wait that long. Since Yehuda’s
proposal for JavaScript decorators have already been implemented on Babel, we
can begin experimenting with that today:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&amp;gt; ember install ember-cli-computed-decorators&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;That’s all you need to do to experiment with the proposed syntax today. It looks
like this:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// app/models/user.js&lt;/span&gt;

&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;DS&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;ember-data&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;computed&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;ember-computed-decorators&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kr&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;DS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;extend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;firstName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;DS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;attr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;string&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;lastName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;DS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;attr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;string&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;

  &lt;span class=&quot;err&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;computed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;firstName&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;lastName&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;fullName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;firstName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;lastName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;firstName&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;lastName&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;In particular, that line beginning with the @ symbol is the proposed decorators
feature that would allow Ember to eventually use native ES6 classes.&lt;/p&gt;

&lt;p&gt;Needless to say, being able to experiment with things like these in real apps
today is tremendously helpful to both the developers and the standards writers
as it allows a much tighter feedback loop to (in)validate ideas and fix any
quirks that could otherwise be hidden until shipped. Synergy™.&lt;/p&gt;

&lt;h2 id=&quot;big-bet-stability-without-stagnation&quot;&gt;Big Bet: Stability Without Stagnation&lt;/h2&gt;

&lt;p&gt;
  &lt;a href=&quot;/images/posts/2015/05/companies.png&quot;&gt;
    &lt;img class=&quot;img-responsive&quot; alt=&quot;Some serious Ember users&quot; src=&quot;/images/posts/2015/05/companies.png&quot; /&gt;
  &lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;As we have seen earlier, Ember has a lot of very serious apps running in
production. As you might imagine, these users value stability very highly. At
the same time, you don’t want to scarify new features for stability and ended
up falling behind either.&lt;/p&gt;

&lt;h3 id=&quot;release-channels&quot;&gt;Release Channels&lt;/h3&gt;

&lt;p&gt;
  &lt;a href=&quot;/images/posts/2015/05/release-channels.png&quot;&gt;
    &lt;img class=&quot;img-responsive&quot; alt=&quot;Ember Release Channels&quot; src=&quot;/images/posts/2015/05/release-channels.png&quot; /&gt;
  &lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;To solve this problem, the Ember team has modeled their releases after the
Chrome browser. In Ember, there are three release channels that you can
“subscribe” to – the Canary channel, which are nightly builds containing the
latest features; the Beta channel, which are dropped every week or two that are
considered candidates for the next stable release; finally there is the release
channel, this is where you would find the stable releases that comes out every
six weeks or so which are Ready For Production™.&lt;/p&gt;

&lt;p&gt;
  &lt;a href=&quot;/images/posts/2015/05/release-waterfall.png&quot;&gt;
    &lt;img class=&quot;img-responsive&quot; alt=&quot;Release Waterfall&quot; src=&quot;/images/posts/2015/05/release-waterfall.png&quot; /&gt;
  &lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;Throughout the year, new features will land on the master branch, which serves
as a basis for the nightly canary builds. All for these new features are added
behind a “feature flag”, which allows the new functionality to be toggled
individually at either runtime or build time.&lt;/p&gt;

&lt;p&gt;At the beginning of each beta cycle, the core team will review all the new
features that were added behind a flag. Those that are deemed stable enough will
be enabled on the beta build by default. If major regessions are discovered
during the beta cycle, they will be switched off and deferred for future
releases. By the end of the beta cycle, whatever remains on the last beta build
will get released into the stable channel.&lt;/p&gt;

&lt;p&gt;Let’s look at an example:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Handlebars 2.0 and HTMLBars both landed on master recently.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;After testing them with real apps on the canary channel, the core team give
these features a “Go” for 1.9 beta.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Unfortunately, after a few rounds of beta testing, they discovered the
HTMLBars feature needs more work to address some edge cases, so they have to
  remove it from 1.9 Beta 4.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;By the end of the six week cycle, Handlebars 2.0 survived all the beta
testing and was released with the final 1.9 build (without HTMLBars).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;At that time, the issues with HTMLBars have been fixed, so the core team
decided to enable that again for the 1.10 beta series.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Fortunately, no major issues are discovered this time, so HTMLBars get
released as part of Ember 1.10.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Having a rolling release cycle like this (as opposed to pilling a bunch of new
stuff for the major release announced at an annual developer conference) turned
out to be great for everyone: the core team gets a chance to rigorously test new
features, and the users get to benefit from the latest features as soon as they
are ready.&lt;/p&gt;

&lt;h3 id=&quot;semantic-versioning&quot;&gt;Semantic Versioning&lt;/h3&gt;

&lt;p&gt;You might be thinking, “Wow, having to upgrade your app once every six weeks
sucks!”. Fortunately for the Ember community, the Ember core team takes Semantic
Versioning very seriously. All the changes made in the 1.x releases are supposed
to be backwards compatible, so in theory, you can upgrade from 1.3 all the way
up to 1.11 with relatively few issues.&lt;/p&gt;

&lt;p&gt;The way they do this is to incrementally deprecate things in the framework that
they plan to remove, but they will keep the features (and tests) around for the
entire 1.x series or otherwise shim them with compatibility layers. So while you
are encouraged to resolve these deprecations as soon as possible, you are given
a very long timeframe to do so.&lt;/p&gt;

&lt;p&gt;Of course, for Synergy™ points, there is a helpful tab in the inspector to help
you find and fix these deprecation warnings in your app.&lt;/p&gt;

&lt;p&gt;
  &lt;a href=&quot;/images/posts/2015/05/ember-inspector-deprecations.png&quot;&gt;
    &lt;img class=&quot;img-responsive&quot; alt=&quot;Deprecations in the Ember Inspector&quot; src=&quot;/images/posts/2015/05/ember-inspector-deprecations.png&quot; /&gt;
  &lt;/a&gt;
&lt;/p&gt;

&lt;h3 id=&quot;rfcs&quot;&gt;RFCs&lt;/h3&gt;

&lt;p&gt;Another way the Ember team achieve stability without stagnation is to involve
the community throughout the design process with the &lt;a href=&quot;https://github.com/emberjs/rfcs&quot;&gt;Request For Comment&lt;/a&gt;
process. All major changes to the framework are encouraged to go through this
process. As part of the proposal, the author would have to identify any
backwards-compatibility issues and propose plans to mitigate them. This also
gives the community a chance to raise any concerns with the plans.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&quot;https://github.com/emberjs/rfcs/pull/45&quot;&gt;recent RFC for dropping IE8/9 support&lt;/a&gt;
was a good example. The Ember team proposed to drop support for IE 8/9 in the
next version of Ember, and the community provided feedback on the real-world
useage patterns, which ultimately led to the core team’s decision to continue
supporting IE9.&lt;/p&gt;

&lt;h3 id=&quot;does-it-really-work&quot;&gt;Does it really work?&lt;/h3&gt;

&lt;p&gt;All of these might sound too good to be true for a software project as complex
as Ember. So does it really work? I’ll let the evidence speak for itself.&lt;/p&gt;

&lt;p&gt;First, here are &lt;a href=&quot;https://twitter.com/search?q=%20upgraded%20ember%20app&amp;amp;src=sprv&quot;&gt;some happy users&lt;/a&gt;
that bragged about their upgrade experience on Twitter. A pretty rare sight on
the Internet.&lt;/p&gt;

&lt;p&gt;Then here is a selection of major features that the Ember team has shipped
during the 1.x cycle:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Ember 1.2:&lt;/strong&gt; Router loading/error substates&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Ember 1.3:&lt;/strong&gt; Router auto location&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Ember 1.6:&lt;/strong&gt; ES6-ify Ember internals&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Ember 1.7:&lt;/strong&gt; Query params, nestable routes&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Ember 1.8:&lt;/strong&gt; Remove metamorph &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tags&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Ember 1.9:&lt;/strong&gt; Handlebars 2.0, Streams&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Ember 1.10:&lt;/strong&gt; HTMLBars, &lt;code&gt;{{else if}}&lt;/code&gt;, block params&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Ember 1.11:&lt;/strong&gt; Bound attributes&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you are not already using Ember, the magnitude of these changes might not be
very obvious, so let’s see some examples.&lt;/p&gt;

&lt;h4 id=&quot;htmlbars&quot;&gt;HTMLBars&lt;/h4&gt;

&lt;p&gt;In Ember 1.10, the Ember team landed &lt;a href=&quot;https://github.com/tildeio/htmlbars&quot;&gt;HTMLBars&lt;/a&gt;,
which is an entirely new templating engine that replaces Handlebars for Ember
apps.&lt;/p&gt;

&lt;p&gt;This is what templates look like in Ember Handlebars:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html-handlebars&quot; data-lang=&quot;html+handlebars&quot;&gt;// app/templates/post.hbs

&lt;span class=&quot;nt&quot;&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;{{&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;post.title&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;}}&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;{{&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;bind-attr&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;:post post.isFeatured:featured&amp;quot;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;}}&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;

  &lt;span class=&quot;cp&quot;&gt;{{&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;markdownToHTML&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;post.body&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;}}&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And this is what templates look like in HTMLBars:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html-handlebars&quot; data-lang=&quot;html+handlebars&quot;&gt;// app/templates/post.hbs

&lt;span class=&quot;nt&quot;&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;{{&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;post.title&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;}}&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;{{&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;bind-attr&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;:post post.isFeatured:featured&amp;quot;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;}}&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;

  &lt;span class=&quot;cp&quot;&gt;{{&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;markdownToHTML&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;post.body&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;}}&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You probably don’t see any differences, because there are none. They literally
completely swapped out the string-based Handlebars engine, with a DOM-based
HTMLBars engine in a minor release, and everything more or less Just Worked™
for everyone.&lt;/p&gt;

&lt;p&gt;Most apps ran faster and used less memory, but for the most part, you don’t
really care. As a user, you keep doing things the way you are used to, and
things get better under the hood without much involvment from your part.&lt;/p&gt;

&lt;h4 id=&quot;bound-attributes&quot;&gt;Bound Attributes&lt;/h4&gt;

&lt;p&gt;Following up with that, in the 1.11 release the Ember team added a new feature
enabled by HTMLBars called bound attributes.&lt;/p&gt;

&lt;p&gt;This is what your templates might look like in 1.10:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html-handlebars&quot; data-lang=&quot;html+handlebars&quot;&gt;// app/templates/post.hbs

&lt;span class=&quot;nt&quot;&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;{{&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;post.title&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;}}&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;{{&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;bind-attr&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;:post post.isFeatured:featured&amp;quot;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;}}&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;

  &lt;span class=&quot;cp&quot;&gt;{{&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;markdownToHTML&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;post.body&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;}}&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And this is what it would look like in 1.11:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html-handlebars&quot; data-lang=&quot;html+handlebars&quot;&gt;// app/templates/post.hbs

&lt;span class=&quot;nt&quot;&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;{{&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;post.title&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;}}&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;{{&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;bind-attr&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;:post post.isFeatured:featured&amp;quot;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;}}&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;

  &lt;span class=&quot;cp&quot;&gt;{{&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;markdownToHTML&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;post.body&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;}}&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Once again, you probably didn’t notice any differences, because there are none.
Your existing template just kept working as you would expect. The difference is
that when you run your app in development mode, you’ll get a deprecation warning
informing you about a better way to do things.&lt;/p&gt;

&lt;p&gt;Historically, Ember requried you to use the &lt;code&gt;bind-attr&lt;/code&gt; helper to set any
dynamic values on your HTML tags (as seen in the example above). This is due to
the limitations in the string-based Handlebars engine.&lt;/p&gt;

&lt;p&gt;With the new HTMLBars engine, Ember have a much easier time doing that for you:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html-handlebars&quot; data-lang=&quot;html+handlebars&quot;&gt;// app/templates/post.hbs

&lt;span class=&quot;nt&quot;&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;{{&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;post.title&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;}}&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;post &lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;{{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;post.isFeatured&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;featured&amp;#39;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;}}&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;

  &lt;span class=&quot;cp&quot;&gt;{{&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;markdownToHTML&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;post.body&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;}}&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Much nicer. But remember – you can take your time to do the refactor. The old
&lt;code&gt;bind-attr&lt;/code&gt; helper will continue to work in the rest of the 1.x releases.&lt;/p&gt;

&lt;h2 id=&quot;the-future&quot;&gt;The Future™&lt;/h2&gt;

&lt;p&gt;Now that we have a good idea on the state of the union, let’s take a quick peek
into the future.&lt;/p&gt;

&lt;p&gt;Once again, the JavaScript Thought Leader™ has &lt;a href=&quot;https://twitter.com/trek/status/525374448833413120&quot;&gt;something to say&lt;/a&gt;
about this:&lt;/p&gt;

&lt;p style=&quot;text-align: center; font-size: 24px&quot;&gt;&lt;em&gt;Eventually all the good ideas will end up in Ember&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;You don’t have to look very far for evidence. If you scroll up a little bit, you
will see that one of the features shipped in Ember 1.9 is called “Streams”.&lt;/p&gt;

&lt;p&gt;If you have heard about that “Reactive Programming” stuff that all the cool kids
are raving about, this is basically that. It turns out that pattern was pretty
useful for implementing template bindings, so the Ember team borrowed that idea
from them and refactored a lot of low-level stuff with it.&lt;/p&gt;

&lt;p&gt;You can expect a lot more changes of this nature landing in Ember in the near
future. Here are a few:&lt;/p&gt;

&lt;h3 id=&quot;glimmer&quot;&gt;Glimmer&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;http://facebook.github.io/react/&quot;&gt;React&lt;/a&gt; brought many smart ideas to the table.
The “just rerender it” model and seperation between internal and outside states
turned out to map quite nicely with our mental model and indeed made things a
lot easier to reason about. This is of course enabled by some very smart
technologies under-the-hood, such as Virtual DOM diffing.&lt;/p&gt;

&lt;p&gt;In fact, these ideas are so smart that the Ember team seriously considered &lt;a href=&quot;https://speakerdeck.com/wycats/dont-settle&quot;&gt;just
using React under-the-hood&lt;/a&gt; (slide
35). What came out of that execrise was something even better, dubbed the
&lt;a href=&quot;https://github.com/emberjs/ember.js/pull/10501&quot;&gt;Glimmer&lt;/a&gt; rendering engine.&lt;/p&gt;

&lt;p&gt;I’ll leave it to you to read about all its details, the important thing here is
that the team took a lot of time to carefully &lt;a href=&quot;https://github.com/emberjs/ember.js/pull/10501#issuecomment-75408630&quot;&gt;study&lt;/a&gt;
React and distilled (stole) the best parts from it.&lt;/p&gt;

&lt;p&gt;I should also mention that Glimmer has &lt;a href=&quot;http://emberjs.com/blog/2015/05/05/glimmer-merging.html&quot;&gt;recently landed on master&lt;/a&gt;
and is on track for landing in the next Beta series.&lt;/p&gt;

&lt;h3 id=&quot;fast-boot-one-way-bindings-routable-components-etc&quot;&gt;Fast Boot™, One-way Bindings, Routable Components, etc&lt;/h3&gt;

&lt;p&gt;During the last two years, the front-end JavaScript community (especially from
the React community) has came up with many other innovative ideas. A lot of
these ideas intersect perfectly with problems that the Ember community was
solving, and they will eventually make their way to Ember similar to the Glimmer
story.&lt;/p&gt;

&lt;p&gt;For example, React had a pretty good solution to SEO that is often a problem
for front-end JavaScript apps. Because React uses a Virtual DOM, they have a
relatively easy time running and rendering the initial HTML page on the server.&lt;/p&gt;

&lt;p&gt;The Glimmer rendering engine moves Ember to a pretty comparable position,
enabling the &lt;a href=&quot;http://emberjs.com/blog/2014/12/22/inside-fastboot-the-road-to-server-side-rendering.html&quot;&gt;Fast Boot™&lt;/a&gt;
feature which solves the SEO problem for Ember apps (and then some).&lt;/p&gt;

&lt;p&gt;Likewise, one-way bindings (readonly attributes for components by default),
routable components (use components everywhere to replace controllers/views) and
many other similar improvements are coming to Ember in the near future. These
advancements are a result of distilling the collective app-writing experience
from both inside of the Ember community as well as from the wider front-end
JavaScript community, and I think it’s safe to say that you should expect a lot
more to come.&lt;/p&gt;

&lt;h3 id=&quot;ember-20&quot;&gt;Ember 2.0&lt;/h3&gt;

&lt;p&gt;You might have heard about this upcoming Ember 2.0 release. That sounds pretty
exciting! What is that about?&lt;/p&gt;

&lt;p&gt;Well, let’s start by looking at the major features planned for this release:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;small&gt;&lt;em&gt;This list is intentionally left blank.&lt;/em&gt;&lt;/small&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Huh? No new features?&lt;/p&gt;

&lt;p&gt;That’s right! The plan is to actually release all the major features in the 1.13
releases, and simply remove all the deprecated features and compatibility layers
in the 2.0 release. Combined with Ember’s semantic versioning guarentee, this
means any Ember app that runs fine on the latest 1.13 release (without
deprecations) will be able to upgrade to smoothly upgrade to Ember 2.x.&lt;/p&gt;

&lt;p&gt;You can read more about the plans for Ember 2.0 in the &lt;a href=&quot;https://github.com/emberjs/rfcs/pull/15&quot;&gt;RFC&lt;/a&gt;
and this &lt;a href=&quot;http://emberjs.com/blog/2015/05/10/run-up-to-two-oh.html&quot;&gt;blog post&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;conclusions&quot;&gt;Conclusions&lt;/h2&gt;

&lt;p&gt;So, that’s Ember.js, &lt;em&gt;the antidote to your hype fatigue&lt;/em&gt;. It is actually quite
nice to have a very smart and thoughtful team to act as your “hype filter”,
knowing that the community will eventually distill these ideas and bring them
into the framework. Personally, this is probably the biggest reason for me to
stick around.&lt;/p&gt;

&lt;p&gt;Finally…&lt;/p&gt;

&lt;p style=&quot;text-align: center; font-size: 24px&quot;&gt;&lt;em&gt;Isn’t Ember dead?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;You be the judge ;)&lt;/p&gt;
</content>

            
              <content type="image" src="http://brewhouse.io/images/posts/2015/05/hype-fatigue-social.jpg" />
            
        </entry>
      
    
      
        <entry>
            <title>Fixing a slow Rails development server</title>
            <author>
              <name>Philippe Creux</name>
              <email>philippe@brewhouse.io</email>
            </author>
            <link href="http://brewhouse.io/blog/2015/04/27/fixing-a-slow-rails-development-server.html"/>
            <updated>2015-04-27T10:00:00-07:00</updated>
            <id>http://brewhouse.io/blog/2015/04/27/fixing-a-slow-rails-development-server</id>
            <content type="html">&lt;p&gt;We recently helped one of our clients speed up their Rails app in development mode.&lt;/p&gt;

&lt;p&gt;This Rails 3.2 application runs on Ruby 2.1, it has 200+ models, 1,500+ routes and rendering a page in development mode takes about &lt;strong&gt;12 seconds&lt;/strong&gt;. After 250 requests, this number goes up to &lt;strong&gt;30 seconds&lt;/strong&gt;!&lt;/p&gt;

&lt;p&gt;Within a couple of days, we succeeded to make it &lt;strong&gt;7 times faster&lt;/strong&gt; on average in development environment.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/2015/apr/perf-chart-over-fixes.png&quot; alt=&quot;Success chart&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Please join us on this journey towards better performance, developer-happiness, and saving &lt;strong&gt;$$$&lt;/strong&gt;!&lt;/p&gt;

&lt;!-- break --&gt;

&lt;h2 id=&quot;speed-up-serving-individual-assets-by-14x&quot;&gt;Speed up serving individual assets by 14x&lt;/h2&gt;

&lt;p&gt;Visiting the home page would take about 4 seconds to render and 7 more seconds to serve about 100 asset files.&lt;/p&gt;

&lt;p&gt;Serving 100 asset files should not be that slow to serve. We used &lt;a href=&quot;https://github.com/SamSaffron/flamegraph&quot;&gt;Flame Graphs&lt;/a&gt; with &lt;a href=&quot;https://github.com/MiniProfiler/rack-mini-profiler&quot;&gt;rack-mini-profiler&lt;/a&gt; to dig into this.&lt;/p&gt;

&lt;p&gt;To set this up, just add the following to your &lt;code&gt;Gemfile&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;flamegraph&amp;#39;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;rack-mini-profiler&amp;#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;… and visit a page with &lt;code&gt;?pp=flamegraph&lt;/code&gt;. Boom! It displays a Flame Graph!&lt;/p&gt;

&lt;p&gt;Flame Graphs are disabled for assets by default, so comment out &lt;a href=&quot;https://github.com/MiniProfiler/rack-mini-profiler/blob/a0117654f02e97db999ba41a20c8c4c5d5291ace/lib/mini_profiler_rails/railtie.rb#L23&quot;&gt;this line&lt;/a&gt; to render a Flame Graph for assets.&lt;/p&gt;

&lt;p&gt;Here is a Flame Graph for rendering &lt;code&gt;/assets/jquery.js&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/2015/apr/perf-flamegraph-assets.png&quot; alt=&quot;Original Flame Graph&quot; /&gt;&lt;/p&gt;

&lt;p&gt;90% of the time serving assets is spent running the garbage collector (GC) because of a custom rack middleware. This custom rack middleware would disable the Garbage Collector for the duration of the request and trigger a Garbage Collection at the end of it. While this middleware had a positive impact in production, it was responsible for slowing down serving assets in development environment by 14x.&lt;/p&gt;

&lt;p&gt;Disabling this middleware in development environment brought serving 100 assets from 7 seconds down to 0.5 seconds. Serving a page with assets would take 5 seconds, instead of 10. That’s &lt;strong&gt;2x faster!&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;activeadmin-y-u-reload&quot;&gt;ActiveAdmin, Y U RELOAD?&lt;/h2&gt;

&lt;p&gt;Now that the asset issue is fixed, let’s see what we can do to speed up page rendering. We decided to focus on rendering a page without changing any files.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/2015/apr/perf-flamegraph-before.png&quot; alt=&quot;Flame graph serve page&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As you can see, ActiveAdmin reloads its configuration files which isn’t necessary. We’ve &lt;a href=&quot;https://github.com/activeadmin/activeadmin/pull/3783&quot;&gt;submitted a patch&lt;/a&gt; which saves about a second to render a page. &lt;strong&gt;1.2x faster!&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;routes-y-u-reload&quot;&gt;Routes, Y U RELOAD?&lt;/h2&gt;

&lt;p&gt;The previous Flame Graph shows that the routes were reloaded with no reason. Digging into the Flame Graph, we figured out that &lt;a href=&quot;https://github.com/wavii/rails-dev-tweaks&quot;&gt;rails_dev_tweaks&lt;/a&gt; was responsible for this. Upgrading to the latest version fixed that bug and saved another two seconds. &lt;strong&gt;1.4x faster!&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;one-worker-is-enough&quot;&gt;One worker is enough!&lt;/h2&gt;

&lt;p&gt;Seven unicorn workers were used in dev environment in order to mitigate the slow asset issue. Now that it’s fixed, we get similar performances with a webrick server to run one request.&lt;/p&gt;

&lt;p&gt;Using one worker is obviously better for memory usage as it uses about 7x less memory. That prevents swapping and speeds up the entire system. It is also better for Rails code reloading and caching since having seven workers means that each worker will have to reload the code or recompile an asset when you perform a change.&lt;/p&gt;

&lt;p&gt;Here is a chart that demonstrates this problem using seven workers. We perform a code change, and then refresh the page 10 times. The first request hits a unicorn worker that reloads the code (4 seconds). The second request hits another unicorn worker that reloads the code (4 seconds). The third request is lucky and hits a worker that has already reloaded the code (2 seconds). And so on… After the tenth request, 6 out of 7 workers have reloaded the code.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/2015/apr/perf-chart-7-workers.png&quot; alt=&quot;Response time for 7 workers&quot; /&gt;&lt;/p&gt;

&lt;p&gt;With one webrick worker, the code is reloaded once at the first request:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/2015/apr/perf-chart-1-worker.png&quot; alt=&quot;Response time for 1 worker&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;less-code-reloads--less-memory-leaks&quot;&gt;Less code reloads = less memory leaks&lt;/h2&gt;

&lt;p&gt;After 250 requests, it would take about 30 seconds to serve a page and the web server would take about 1gb of memory. The fixes we introduced which prevented unnecessary code reloads helped mitigate the memory leak. After 250 requests, it would only take 2 seconds to serve a page. &lt;strong&gt;15x faster!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/2015/apr/perf-chart-250-requests.png&quot; alt=&quot;Chart response time after 250 requests&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;measure-it-spot-it-fix-it-and-make-it-better-faster-stronger&quot;&gt;Measure it, spot it, fix it and make it better, faster, stronger&lt;/h2&gt;

&lt;p&gt;The process we followed was pretty straightforward:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Measure response time using the Chrome Developer Tools and &lt;a href=&quot;http://httpd.apache.org/docs/2.2/programs/ab.html&quot;&gt;ApacheBench&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Find a bottleneck with &lt;a href=&quot;https://github.com/MiniProfiler/rack-mini-profiler&quot;&gt;rack-mini-profiler&lt;/a&gt; and &lt;a href=&quot;https://github.com/SamSaffron/flamegraph&quot;&gt;Flame Graphs&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Fix it&lt;/li&gt;
  &lt;li&gt;Repeat until the performances are good enough&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;We fixed a rack middleware that was forcing GC runs, we improved ActiveAdmin to only reload code when necessary, we upgraded a rack middleware (rails_dev_tweaks) that was forcing code reloads, and we finally used only one web worker to reload code once after a file change.&lt;/p&gt;

&lt;p&gt;In the end, the app is 3x faster when loading a page after a code change and up to 17x faster when loading a page without code change and after 250 requests. It took us a couple of days to make this application &lt;strong&gt;3 to 17 times faster&lt;/strong&gt; in development environment.&lt;/p&gt;

&lt;p&gt;With 10 developers working on it full-time… well, I’ll let you do the math!&lt;/p&gt;
</content>

            
              <content type="image" src="http://brewhouse.io/images/posts/2015/04/faster-rails-dev.jpg" />
            
        </entry>
      
    
      
        <entry>
            <title>Elegant tests with Truth Tables</title>
            <author>
              <name>Philippe Creux</name>
              <email>philippe@brewhouse.io</email>
            </author>
            <link href="http://brewhouse.io/blog/2015/04/13/elegant-tests-with-truth-tables.html"/>
            <updated>2015-04-13T10:00:00-07:00</updated>
            <id>http://brewhouse.io/blog/2015/04/13/elegant-tests-with-truth-tables</id>
            <content type="html">&lt;p&gt;Truth Tables help writing readable tests that are easy to maintain.&lt;/p&gt;

&lt;p&gt;Here is an example:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;describe&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;#to_dollars&amp;quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;      &lt;span class=&quot;kp&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;         &lt;span class=&quot;kp&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;        &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;     &lt;span class=&quot;s2&quot;&gt;&amp;quot;$0.00&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;       &lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;     &lt;span class=&quot;s2&quot;&gt;&amp;quot;$0.12&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;     &lt;span class=&quot;mi&quot;&gt;4_10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;     &lt;span class=&quot;s2&quot;&gt;&amp;quot;$4.10&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;23_00&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;   &lt;span class=&quot;s2&quot;&gt;&amp;quot;$-23.00&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;1230_00&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;$1,230.00&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;amount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dollars&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;converts &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;amount&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inspect&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; to &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dollars&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inspect&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to_dollars&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;amount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;eq&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dollars&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;!-- break --&gt;

&lt;p&gt;You can also use a hash if you like hash rockets:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;describe&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;EnterprisePlan&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;#cost&amp;quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# emails      cost&lt;/span&gt;
           &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;  &lt;span class=&quot;mo&quot;&gt;0_00&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# free up to 200 emails&lt;/span&gt;
         &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;  &lt;span class=&quot;mo&quot;&gt;0_00&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
         &lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;  &lt;span class=&quot;mo&quot;&gt;0_00&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
         &lt;span class=&quot;mi&quot;&gt;250&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;1_00&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# 2 cts per email up to 400&lt;/span&gt;
         &lt;span class=&quot;mi&quot;&gt;400&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;4_00&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
         &lt;span class=&quot;mi&quot;&gt;500&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;5_00&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# 1 cts per email for 400+&lt;/span&gt;
        &lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10_00&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;emails&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cost&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;charges &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cost&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; for &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;emails&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; emails&amp;quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;EnterprisePlan&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cost&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;emails&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;eq&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cost&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And you can go crazy with multiple inputs and outputs:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;describe&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Money&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# currency  amount       human    with currency&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;    &lt;span class=&quot;s2&quot;&gt;&amp;quot;USD&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;     &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;     &lt;span class=&quot;s2&quot;&gt;&amp;quot;0.10&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;       &lt;span class=&quot;s2&quot;&gt;&amp;quot;$0.10&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;    &lt;span class=&quot;s2&quot;&gt;&amp;quot;EUR&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;     &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;     &lt;span class=&quot;s2&quot;&gt;&amp;quot;0.10&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;       &lt;span class=&quot;s2&quot;&gt;&amp;quot;€0.10&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;currency&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;amount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;human&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;human_with_currency&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;for &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;currency&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;amount&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;displays &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;human&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; by default&amp;quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Money&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;amount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;currency&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;human&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;eq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;human&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

      &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;displays &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;human_with_currency&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; with currency&amp;quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Money&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;amount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;currency&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;human&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;with_currency&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;eq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;human_with_currency&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;In my opinion, Truth Tables are really easy to read and they are also great to maintain. Adding a new test case takes a couple of seconds and does not impact readability. Here are a few more examples:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# ip              country   region   city&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&amp;quot;13.34.22.22&amp;quot;&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;us&amp;quot;&lt;/span&gt;   &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;or&amp;quot;&lt;/span&gt;   &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Portland&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&amp;quot;133.54.22.22&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;ca&amp;quot;&lt;/span&gt;   &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;bc&amp;quot;&lt;/span&gt;   &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Vancouver&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&amp;quot;127.0.0.1&amp;quot;&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;nil&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;nil&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;local&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;


&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&amp;quot;Mozilla/5.0 (Macintosh; Intel Mac OS 10_9_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/41.0.2272.89 Safari/537.36&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;browser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Chrome&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;platform&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Mac&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;device_type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Computer&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;bot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;false&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;

  &lt;span class=&quot;s2&quot;&gt;&amp;quot;Mozilla/5.0 (Macintosh; Intel Mac OS 10_9_4) AppleWebKit/537.78.2 (KHTML, like Gecko) Version/7.0.6 Safari/537.78.2&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;browser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Safari&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;platform&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Mac&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;device_type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Computer&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;bot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;false&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;


&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;                                                                     &lt;span class=&quot;c1&quot;&gt;# alert?&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;last_notification_at&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;        &lt;span class=&quot;ss&quot;&gt;threshold&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1200&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;last_notification_at&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hour&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ago&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;threshold&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1200&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;false&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;last_notification_at&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hour&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ago&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;threshold&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2000&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Alright, what do you think about all this? Are Truth Tables easy to read? Did I convince you to write tests with Truth Tables? Or maybe you already use Truth Tables and I missed something… And yes, I can write another sentence with &lt;strong&gt;Truth Tables&lt;/strong&gt;, and in bold this time! :) Leave a comment below, I’m always happy to discuss it!&lt;/p&gt;
</content>

            
              <content type="image" src="http://brewhouse.io/images/posts/2015/apr/truthtables.png" />
            
        </entry>
      
    
      
        <entry>
            <title>Best Practices for Component State in React.js</title>
            <author>
              <name>Gabe Scholz</name>
              <email>gabe@brewhouse.io</email>
            </author>
            <link href="http://brewhouse.io/blog/2015/03/24/best-practices-for-component-state-in-reactjs.html"/>
            <updated>2015-03-24T10:00:00-07:00</updated>
            <id>http://brewhouse.io/blog/2015/03/24/best-practices-for-component-state-in-reactjs</id>
            <content type="html">&lt;p&gt;When writing React applications, it’s important to know when and when not to use state in components. In this post, I will review what I consider to be best practices for working with state. TL;DR:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;If a component does not own a datum, then that datum should not influence it’s state.&lt;/li&gt;
  &lt;li&gt;Store the simplest possible values to describe a component’s state.&lt;/li&gt;
  &lt;li&gt;Leave calculations and conditionals to the render function.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;These rules obviously have exceptions and should be violated when appropriate; though if you’re able to follow them most of the time, you will find that your components will be easier to break down, the tests will be easier to write, and the entire application will have fewer bugs. Let’s take a closer look at each of these rules.&lt;/p&gt;

&lt;!-- break --&gt;

&lt;h2 id=&quot;if-a-component-does-not-own-a-datum-then-that-datum-should-not-influence-its-state&quot;&gt;If a component does not own a datum, then that datum should not influence it’s state&lt;/h2&gt;

&lt;p&gt;First, and probably the most important of all, the state of a component should not depend on the props passed in. Of course props may pass down state-like ideas - for example, on a custom input component, I may choose to have a &lt;code&gt;disabled&lt;/code&gt; prop which disables some internal text input - but when I say “state”, I’m referring specifically to the state attribute of the component. You may begin to notice a code smell when the state starts to depend on it’s props. Take a look at the following snippet:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;React&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;react/addons&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;kr&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;UserWidget&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;React&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Component&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// BAD: set this.state.fullName with values received through props&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;constructor&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;fullName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;firstName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;lastName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;render&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fullName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fullName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;picture&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;picture&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;img&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;picture&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;h2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fullName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;/h2&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;/div&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;What’s wrong with this? It may not be obvious at first, but if &lt;code&gt;firstName&lt;/code&gt; or &lt;code&gt;lastName&lt;/code&gt; change, the view of this &lt;code&gt;UserWidget&lt;/code&gt; will not change. The constructor function only runs when the component is mounted and thus &lt;code&gt;fullName&lt;/code&gt; is forever whatever it was when the component mounted.* Developers who are new to React will often make this mistake, perhaps because &lt;code&gt;setState&lt;/code&gt; is the easiest and most obvious way to update the component view.&lt;/p&gt;

&lt;p&gt;You should ask yourself whether this component owns this data. Were &lt;code&gt;firstName&lt;/code&gt; and &lt;code&gt;lastName&lt;/code&gt; created internally? If not, then the state should not depend on it.** And what is the best way to avoid this? Calculate &lt;code&gt;fullName&lt;/code&gt; as a part of the &lt;code&gt;render&lt;/code&gt; function.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;nx&quot;&gt;render&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fullName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;firstName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;lastName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;By moving this to the render function, we are now never again concerned about whether &lt;code&gt;fullName&lt;/code&gt; will be updated. React has hooks to run a function whenever props are updated - &lt;em&gt;i.e.&lt;/em&gt; &lt;code&gt;componentWillReceiveProps&lt;/code&gt; - however, I would consider using this an anti-pattern because it adds complexity when it’s not needed.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://facebook.github.io/react/tips/props-in-getInitialState-as-anti-pattern.html&quot;&gt;Of course, if you don’t care about props after the component is initialized, then this entire rule doesn’t apply&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;small style=&quot;font-size:10px; margin-bottom: -30px; display: block;&quot;&gt;
*When using &lt;code&gt;React.createClass&lt;/code&gt; instead of &lt;code&gt;extends React.Component&lt;/code&gt;, replace &lt;code&gt;constructor&lt;/code&gt; with &lt;code&gt;getInitialState&lt;/code&gt;.
&lt;/small&gt;&lt;/p&gt;

&lt;p&gt;&lt;small style=&quot;font-size:10px;&quot;&gt;
**At some point, “state” will need to be set within something. In the flux pattern this may be a root “controller” component listening to a bunch of stores.
&lt;/small&gt;&lt;/p&gt;

&lt;h2 id=&quot;store-the-simplest-possible-values-to-describe-a-components-state&quot;&gt;Store the simplest possible values to describe a component’s state&lt;/h2&gt;

&lt;p&gt;When describing the component’s state, you should do it with the simplest possible representation. In many cases, this means preferring the use of boolean flags.&lt;/p&gt;

&lt;p&gt;Consider the following example where we have some component which stores a list of classes in its state based on whether it was clicked or hovered. (And for what it’s worth, I have seen this kind of thing a lot in the wild):&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;React&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;react/addons&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;React&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addons&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;classSet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kr&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ArbitraryWidget&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;React&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Component&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;constructor&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;classes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// BAD: push &amp;#39;hover&amp;#39; into this.state.classes when mousing over the component&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;handleMouseOver&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;classes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;classes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;classes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;hover&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;classes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;classes&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// BAD: remove &amp;#39;hover&amp;#39; from this.state.classes when the mouse leaves the component&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;handleMouseOut&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;classes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;classes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;classes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;indexOf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;hover&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;classes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;splice&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;classes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;classes&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// BAD: toggle &amp;#39;active&amp;#39; in this.state.classes when the component is clicked&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;handleClick&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;classes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;classes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;classes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;indexOf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;active&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;classes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;splice&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;classes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;active&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;classes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;classes&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;render&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;classes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;classes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;div&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;className&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;classes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)}&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;onClick&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;handleClick&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;bind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)}&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;onMouseOver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;handleMouseOver&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;bind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)}&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;onMouseOut&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;handleMouseOut&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;bind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This component works; however, I do have some serious reservations. It’s state is now an awkward array of strings. &lt;code&gt;this.state.classes = [&#39;active&#39;, &#39;hover&#39;]&lt;/code&gt;. Not only does this format hurt the readability of the code, but it makes it more difficult to change. Having other components relying on whether or not my array of classes contains &lt;code&gt;hover&lt;/code&gt; isn’t quite the same as checking a boolean flag. Consider this refactoring where we instead store boolean values that represent whether or not the component should have a class - &lt;em&gt;e.g.&lt;/em&gt; &lt;code&gt;isHovering === true&lt;/code&gt; implies that I should use the &lt;code&gt;hover&lt;/code&gt; class:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;React&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;react/addons&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;React&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addons&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;classSet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kr&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ArbitraryWidget&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;React&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Component&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;constructor&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;isHovering&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;isActive&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// GOOD: set this.state.isHovering to true on mouse over&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;handleMouseOver&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;isHovering&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// GOOD: set this.state.isHovering to false on mouse leave&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;handleMouseOut&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;isHovering&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// GOOD: toggle this.state.isActive on click&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;handleClick&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;active&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;isActive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;isActive&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;active&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;render&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// use the classSet addon to concat an array of class names together&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;classes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;isHovering&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;hover&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;isActive&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;active&amp;#39;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;div&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;className&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;classes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)}&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;onClick&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;handleClick&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;bind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)}&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;onMouseOver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;handleMouseOver&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;bind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)}&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;onMouseOut&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;handleMouseOut&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;bind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Whoa! By boiling the state concerns down to boolean values we must calculate the array of classes from within the render function; though, we also enhance the readability of the component. &lt;code&gt;this.state.isHovering&lt;/code&gt; is a far better representation of the &lt;strong&gt;actual&lt;/strong&gt; component state than &lt;code&gt;this.state.classes.indexOf(&#39;hover&#39;) != -1&lt;/code&gt;. The component can be more easily extended and tested because we’re not concerned with the construction of some array.&lt;/p&gt;

&lt;p&gt;I’d like to repeat that you should always aim for the simplest representation of the state. This does &lt;em&gt;not&lt;/em&gt; necessarily mean you’re only storing boolean values. It may very well be that deeply nested objects are the only option. It may also be that you can get away with storing a number. Or a string. Or a function.&lt;/p&gt;

&lt;p&gt;Imagine being a third party and trying to observe the state of a component which returns an array of classes. Is this useful to you? Of course not. It’s woefully brittle. Contrasted that with a boolean &lt;code&gt;isActive&lt;/code&gt; is much more actionable. I hope you understand what I mean.&lt;/p&gt;

&lt;h2 id=&quot;leave-calculations-and-conditionals-to-the-render-function&quot;&gt;Leave calculations and conditionals to the render function&lt;/h2&gt;

&lt;p&gt;Following the previous two rules, this one should already be in place; however, it’s still worth noting. Whenever possible, make decisions and do calculations at the last possible moment: in the render function. Though perhaps slightly slower than other approaches, it ensures the least amount of redirection in the component. Enhanced readability and extensibility should always come before micro-optimizations.&lt;/p&gt;

&lt;p&gt;Do I need to concatenate the &lt;code&gt;firstName&lt;/code&gt; and &lt;code&gt;lastName&lt;/code&gt; prop? Move it to the render function. Which classes does my component need to use? Decide in the render function. Should I show placeholder text if I don’t have any items on my todo list? Decide in the render function. Do I need to format a phone number so that it looks more presentable? Do it in the render function. How should I render out subcomponents? Decide in the render function.* What am I having for lunch today? Decide in the render function.&lt;/p&gt;

&lt;p&gt;Of course, you don’t have to cram all of code into a single function. On the contrary, it’s best to extract helper functions (with good names) when appropriate. The point is still that you should reduce complexity in your state by allowing the render function to do most of the decision making. You might decide to prefix these helpers with &lt;code&gt;render&lt;/code&gt; as in the following example:**&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// GOOD: Helper function to render fullName&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;renderFullName&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;firstName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;lastName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;render&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fullName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;renderFullName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;small style=&quot;font-size:10px; margin-bottom: -30px; display: block;&quot;&gt;
*For the love of all that is holy, please do not store components in the state.
&lt;/small&gt;&lt;/p&gt;

&lt;p&gt;&lt;small style=&quot;font-size:10px;&quot;&gt;
**Thanks &lt;a href=&quot;https://twitter.com/ekryski&quot;&gt;Eric Kryski&lt;/a&gt; and &lt;a href=&quot;https://twitter.com/notbrent&quot;&gt;Brent Vatne&lt;/a&gt; for comments on this.
&lt;/small&gt;&lt;/p&gt;

&lt;h2 id=&quot;cpu-intensive-calculations&quot;&gt;CPU intensive calculations&lt;/h2&gt;

&lt;p&gt;Because I’m suggesting that you defer just about everything to the render function, it would follow that even CPU intensive calculations are deferred as well. To avoid repeated complex renderings, consider a &lt;a href=&quot;https://lodash.com/docs#memoize&quot;&gt;memoization function&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;do-not-store-values-on-the-instance-of-the-component&quot;&gt;Do not store values on the instance of the component&lt;/h2&gt;

&lt;p&gt;Just don’t. Storing values on the instance of a component is doing this:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;React&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;react/addons&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;kr&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ArbitraryWidget&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;React&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Component&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;constructor&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;derp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;something&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;handleClick&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;derp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;somethingElse&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;render&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;something&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;derp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This is particularly bad, not only because you’re breaking the obvious convention of storing state on &lt;code&gt;this.state&lt;/code&gt;, but because &lt;code&gt;render&lt;/code&gt; won’t automatically trigger when &lt;code&gt;this.derp&lt;/code&gt; is updated.&lt;/p&gt;

&lt;h2 id=&quot;unit-testing&quot;&gt;Unit Testing&lt;/h2&gt;

&lt;p&gt;As an added bonus, the component unit tests are easier to write because all of the cruft falls down to the render function. Said cruft becomes a view concern and decision making is offset to the user. (Of course testing the view is still very important, but in my opinion you should do this with end to end tests.) Things are less likely to break when you’re only checking for the simplest possible values rather than complex ones that require many conditions to reproduce and only describe concerns of the display.&lt;/p&gt;

&lt;h2 id=&quot;exceptional-cases&quot;&gt;Exceptional Cases&lt;/h2&gt;

&lt;p&gt;As my mother says, “You should be careful with your always and nevers.” Please take what you’ve read here with a grain of salt. Forcing yourself to adhere to these practices in truly exceptional cases may hurt more than help. Though, if you do find yourself unable to follow these rules, it may be a sign that you need to break the component down into smaller ones. By keeping the component simple and deferring to the render function, groupings begin to appear which assist with this exercise.&lt;/p&gt;

&lt;h2 id=&quot;anything-else&quot;&gt;Anything else?&lt;/h2&gt;

&lt;p&gt;Is there something I’ve missed? Do you disagree? See a typo? What should I write about next? Leave a comment below or &lt;a href=&quot;https://twitter.com/gabescholz&quot;&gt;@ me on twitter&lt;/a&gt;. If you’re in the Vancouver, BC area we should grab a coffee and talk about JavaScript!&lt;/p&gt;

&lt;h2 id=&quot;hire-us&quot;&gt;Hire Us!&lt;/h2&gt;

&lt;p&gt;Interested in React.js training for your team? Need help building your next ambitious web application? We’re a Rails and JavaScript shop located in beautiful Vancouver, BC. &lt;a href=&quot;http://brewhouse.io/#hire-us&quot;&gt;Get in touch!&lt;/a&gt;&lt;/p&gt;
</content>

            
              <content type="image" src="http://brewhouse.io/images/brewhouse-symbol-large-200x200.png" />
            
        </entry>
      
    
      
        <entry>
            <title>Adapter Patterns in Ember.js</title>
            <author>
              <name>Godfrey Chan</name>
              <email>godfrey@brewhouse.io</email>
            </author>
            <link href="http://brewhouse.io/blog/2015/03/06/adapter-patterns-in-ember-js.html"/>
            <updated>2015-03-06T16:00:00-08:00</updated>
            <id>http://brewhouse.io/blog/2015/03/06/adapter-patterns-in-ember-js</id>
            <content type="html">&lt;p&gt;&lt;del&gt;If you couldn’t wait for the video to be uploaded,&lt;/del&gt; here is a write-up of the
talk I gave at &lt;a href=&quot;http://emberconf.com/&quot;&gt;EmberConf 2015&lt;/a&gt; earlier this week, sans
the jokes. You can find the slides &lt;a href=&quot;https://speakerdeck.com/chancancode/hijacking-hacker-news-with-ember-dot-js&quot;&gt;here&lt;/a&gt;.
For those at the conference, &lt;a href=&quot;#the-possibilities&quot;&gt;the last section&lt;/a&gt; has a little
bit of new content that I couldn’t fit into original presentation.&lt;/p&gt;

&lt;p&gt;&lt;del&gt;This post will be updated with a link to the video when it is available.&lt;/del&gt;&lt;/p&gt;

&lt;p&gt;Video is live!&lt;/p&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/PXB93Z8azZE?list=PLE7tQUdRKcyacwiUPs0CjPYt6tJub4xXU&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;!-- break --&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;real-world-adapters&quot;&gt;Real-world Adapters&lt;/h2&gt;

&lt;p&gt;Suppose you just bought a new vacuum cleaner. As with most modern appliances,
the vacuum cleaner comes with one of those grounded/three-pinned plugs.
Unfortunately, the wiring in your home is a bit dated, and all of the power
outlets are two-pinned. What do you do?&lt;/p&gt;

&lt;p&gt;Obviously, you can shell out the money to re-wire your entire house and upgrade
the outlets. While that’s probably something you should eventually do, it seemed
like a disproportionate amount of effort just to be able to use a new vacuum
cleaner.&lt;/p&gt;

&lt;p&gt;Of course, there is a simpler way – you can just use an adapter. The adapter
would expose a two-pinned plug on one side and a three-pinned socket on the
other, seamlessly bridging the incompatible &lt;em&gt;interfaces&lt;/em&gt; and allow you to use
the new vacuum cleaner anywhere in your house.&lt;/p&gt;

&lt;p&gt;In this case, the adapter is trivial – you could in-theory just tape two cooper
wires to the plug, insert that into the outlet and it would probably still work.&lt;/p&gt;

&lt;p&gt;This is not always the case though, sometimes your adapter has to do more work
than that. When Apple rolled out the lightning port on their iDevices, plenty of
their customers have invested in stereo systems that comes with the old 30-pin
dock connector, so they made an adapter for that.&lt;/p&gt;

&lt;p&gt;This adapter is more complicated, though. The two ports have vastly different
&lt;em&gt;specifications&lt;/em&gt; – they speak completely different protocols, and one of them is
even reversible – so a simple re-mapping of the pins just won’t cut it. However,
despite those differences, they are &lt;em&gt;functionally equivilant&lt;/em&gt; for the task at
hand – they are both fully capable of streaming audio from your iDevices to the
stereo systems.&lt;/p&gt;

&lt;p&gt;So, what Apple did was that they basically put a mini-computer &lt;em&gt;inside&lt;/em&gt; the plug
and have it decode protocol messages and dynamically translate them for the
other side. It is an elaborate hack, but it works.&lt;/p&gt;

&lt;h2 id=&quot;the-adapter-pattern&quot;&gt;The Adapter Pattern&lt;/h2&gt;

&lt;p&gt;The adapter pattern is the software version of these real world adapters.&lt;/p&gt;

&lt;p&gt;Suppose your have acquired a sensor that allows you to measure the current
temperature. Unfortunately, the driver is hardcoded to report temperatures in
Celsius codebase you are working with expects Fahrenheit everywhere. What do you
do?&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;CelsiusSensor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;getTemperature&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Measures temperature in °C&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;FahrenheitMonitor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sensor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;setInterval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Expects °F&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sensor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;readTemperature&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now, you can go ahead and rewrite all those parts of your codebase. Whether that
is a feasible or not depends on the complexity of your existing code, but it is
probably the digital-equivilant of rewiring your house to use a vacuum cleaner.&lt;/p&gt;

&lt;p&gt;Alternatively, you can just write an adapter! Just like the real-world adapters,
your adapter code would expose an interface that the consuming end expects, and
internally use another object to fulfill these requests:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;CelsiusSensorAdapter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sensor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sensor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sensor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;CelsiusSensorAdapter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;prototype&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;readTemperature&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sensor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getTemperature&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1.8&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Use it!&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;FahrenheitMonitor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;CelsiusSensorAdapter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;CelsiusSensor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;real-world-adapter-patterns&quot;&gt;Real-world Adapter Patterns&lt;/h2&gt;

&lt;p&gt;To show you how this pattern could be applied in the real-world – Ember apps in
particular – I made a Hacker News extension for Chrome. It is &lt;a href=&quot;https://chrome.google.com/webstore/detail/hn-reader/emgghjnnkkopedbjfajejpkidaiedhlf&quot;&gt;available from the chrome web store&lt;/a&gt;,
or you can just &lt;a href=&quot;http://chancancode.github.io/hn-reader&quot;&gt;try it online here&lt;/a&gt;.
You can also &lt;a href=&quot;https://github.com/chancancode/hn-reader&quot;&gt;find the source code on GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Once you have it installed, every time you visit &lt;a href=&quot;https://news.ycombinator.com/&quot;&gt;Hacker News&lt;/a&gt;
from Chrome, the extension will take over and present you with a better reading
interface built with Ember.js.&lt;/p&gt;

&lt;h3 id=&quot;getting-the-data&quot;&gt;Getting The Data&lt;/h3&gt;

&lt;p&gt;The first challenge for building a HN reader like this is that you would have to
get the data from somewhere. Normally, you would just make calls to an API that
returns the data in JSON format – and this is what Ember Data expects too.&lt;/p&gt;

&lt;p&gt;But there are a few problems.&lt;/p&gt;

&lt;p&gt;First of all, at the time I started the project, Hacker News does not have an
official API, so I have no server to talk to. (They latter added a Firebase-powered
API, but at the time of writing, it still doesn’t offer all the features you
would find on the website, so I wouldn’t be able to do everything I wanted to
do with the extension.)&lt;/p&gt;

&lt;p&gt;I could use one of the unofficial APIs that others have created. There are a lot
of those, actually, but it is very hard to tell which ones are still maintained
or how reliable they are. They also don’t offer all the features you will find
on the web interface, either.&lt;/p&gt;

&lt;p&gt;Of course, I can also write my own API, but I am way too lazy for that. All I
want is to have some fun writing the front-end app, and I don’t want to have to
write and maintain a server side component.&lt;/p&gt;

&lt;p&gt;But there is another way – if you look at the Hacker News website, all the data
I want is already on the page. So, if you can fetch the HTML pages from the
Hacker News server, I can just parse out the data and use them however I want.&lt;/p&gt;

&lt;p&gt;In fact, this is just how all the unofficial APIs work. They just have the
server scrape the HTML page, parse out the data on the server-side and send them
back in JSON format.&lt;/p&gt;

&lt;p&gt;Since my extension runs in the Hacker News domain, I don’t really need to go
through a server for that – I can just make regular AJAX calls to fetch the HTML
pages, then parse them directly from within the browser.&lt;/p&gt;

&lt;p&gt;(You don’t actually have to be on the same domain to do this – you can just go
through a &lt;a href=&quot;http://cors-anywhere.herokuapp.com&quot;&gt;CORS proxy&lt;/a&gt;. However, it won’t
send along the cookies, so you won’t be able to do anything that requires the
user to be authenticated.)&lt;/p&gt;

&lt;p&gt;That’s exactly what I did.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;/news&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt; &lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;stories&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[];&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt; &lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;tr .title a&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;each&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$link&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt; &lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;stories&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$link&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;   &lt;span class=&quot;nx&quot;&gt;$link&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;attr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;href&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt; &lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;stories&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt; &lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;As you can see, I first make an AJAX request to retrieve the HTML page, then run
it through an HTML parser and extract the elements I need to build the JSON
representation of the data I am interested in.&lt;/p&gt;

&lt;p&gt;(I should warn you that this is pseudo/simplified code. The code snippets in the
slides and this blog post are meant to show you the key ideas, but they are not
complete and/or safe, so you should always refer to the &lt;a href=&quot;https://github.com/chancancode/hn-reader&quot;&gt;actual code on GitHub&lt;/a&gt;
if you are interested in implementing them.)&lt;/p&gt;

&lt;p&gt;Now that we have the JSON data, it would be nice if there is a good way to store
them locally and use them in the app.&lt;/p&gt;

&lt;p&gt;Of course, in the Ember world, the answer for that is to use Ember Data. But
since Ember Data is meant for fetching JSON data from APIs, it can’t possibly
work with crazy hacks like this, right?&lt;/p&gt;

&lt;p&gt;Well, that might have been true a year or two ago. Today’s Ember data is very
much just a local object store for your model data, and it makes very few
assumption about where your data are coming from and how you are fetching them.&lt;/p&gt;

&lt;p&gt;Out of the box, it does expect your data source to be a JSON API that behave
according to some specification. If your API happens to tick all the boxes, you
can just plug it in and everything would Just Work™.&lt;/p&gt;

&lt;p&gt;However, if your API doesn’t work exactly like Ember Data expect, or in my case,
if your data source isn’t even an API at all, it doesn’t mean you are out of
luck.&lt;/p&gt;

&lt;p&gt;From Ember Data’s perspective, all it needs is a data source – something that
can provide it with the right data at the right time. All you have to do is to
drop an adapter between them to help them talk to each other. This in such a
common pattern that Ember data already has built-in support for it via the
&lt;code&gt;DS.Adapter&lt;/code&gt; and &lt;code&gt;DS.Serializer&lt;/code&gt; classes:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;nx&quot;&gt;App&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;StoryAdapter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;DS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Adapter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;extend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt; &lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;findAll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;store&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;/news&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt; &lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

&lt;span class=&quot;err&quot;&gt; &lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;App&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;StorySerializer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;DS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Serializer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;extend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt; &lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;extractArray&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;store&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;payload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;stories&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[];&lt;/span&gt;

    &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;payload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;tr .title a&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;each&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;stories&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt; &lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Without getting into too much details, the adapter is responsible for fetching
the data from the server, and the serializer is responsible for interpreting the
data and massage them into the right shape for Ember data.&lt;/p&gt;

&lt;p&gt;(&lt;a href=&quot;https://twitter.com/terzicigor&quot;&gt;Igor Terzic&lt;/a&gt; did a workshop on Ember Data
adapters at Ember Conf, so if you are interested in learning more, you might
want to reach out to see if he has plans to do that again sometime.)&lt;/p&gt;

&lt;h3 id=&quot;fixing-the-urls&quot;&gt;Fixing the URLs&lt;/h3&gt;

&lt;p&gt;If you are familiar with Ember, you probably know that it has strong opinions
and conventions around how you should structure your URLs.&lt;/p&gt;

&lt;p&gt;For a page like &lt;a href=&quot;http://chancancode.github.io/hn-reader/item?id=9158222&quot;&gt;this&lt;/a&gt;,
you would probably have a URL structure that resembles this:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;/                                      |  The application route (the &amp;quot;gutter&amp;quot; on the left)
                                       |
/stories                               |  The sidebar that shows the list of stories
                                       |
/stories/:story_id                     |  The header on the main content panel on the right
                                       |
/stories/:story_id/{article,comments}  |  The content of the article/comments tab&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The router API does offer you some flexibility to control how you want to name
each of these segments, but in general, you need to have one segment per nested
outlet, and you can’t deviate too far from that before you feel that you are
just managing everything yourself and fighting the framework a lot.&lt;/p&gt;

&lt;p&gt;This is a perfectly reasonable design, and it works great for 99% of the things
you would want to build. However, in this case, my extension needs to maintain
100% compatibility with Hacker News’ existing URL structure, or else it would
break when my users try to visit a Hacker News link from elsewhere, or when they
try to share a link with other people.&lt;/p&gt;

&lt;p&gt;To give you an idea, here are some of the URLs I have to work with. On the left
is the “ideal” URL structure for the Ember router, based on the nesting in the
UI; on the right are the actual URLs for the equivalent pages on the Hacker News
website:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;“IDEAL” URL                                  |  ACTUAL URL
---------------------------------------------+---------------------------------------------
                                             |
/stories                                     |  /news
                                             |
/stories?filter=latest                       |  /newest
                                             |
/stories/9132815/comments                    |  /item?id=9132815
                                             |
/stories/9132815/comments?highlight=9133317  |  /item?id=9133317&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You probably saw this coming – I can just write an adapter for this!&lt;/p&gt;

&lt;p&gt;On one hand we have the Hacker News URLs, and on the other hand we have the
Ember router, and we an adapter in between – this much should be obvious.&lt;/p&gt;

&lt;p&gt;What is not obvious though, is &lt;em&gt;where&lt;/em&gt; we would put that adapter and what it
would look like. It would help if we take a step back consider what’s the actual
role of these URLs in an Ember app.&lt;/p&gt;

&lt;p&gt;If you think about it, URLs is really just a way for Ember app to serialize the
current state of the application. When you first open the app, Ember will
deserialize the initial state from the URL and show the right things on the
screen. As you use the app, Ember will keep updating the URLs, so that the
application states are persisted across refresh, back buttons and so on.&lt;/p&gt;

&lt;p&gt;With that in mind, the thing we need to adapt should become more clear. What I
actually want to do here is to influence how Ember reads and writes these
states, and from there I can trick Ember into seeing different URLs than what is
actually shown to the user.&lt;/p&gt;

&lt;p&gt;As it turns out, I am once again, not alone in solving this problem. Ember
already support two ways to read and write the URLs out-of-the-box: the “normal”
URLs using the history API, and the hash URLs to support older browsers:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;HISTORY LOCATION                             |  HASH LOCATION
---------------------------------------------+----------------------------------------------
                                             |
/stories                                     |  #/stories
                                             |
/stories?filter=latest                       |  #/stories?filter=latest
                                             |
/stories/9132815/comments                    |  #/stories/9132815/comments
                                             |
/stories/9132815/comments?highlight=9133317  |  #/stories/9132815/comments?highlight=9133317&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;To support these two types of URLs, Ember is once again using the adapter
pattern. These two mechanisms are encapsulated inside the &lt;code&gt;HistoryLocation&lt;/code&gt; and
&lt;code&gt;HashLocation&lt;/code&gt; classes, which expose a uniform interface to the rest of the
stack regardless of which concrete implementation is being used.&lt;/p&gt;

&lt;p&gt;This is great news, because I can just as easily write my own adapter, too!&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;nx&quot;&gt;App&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;HackerNewsLocation&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Ember&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;HistoryLocation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;extend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt; &lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;getURL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;actualURL&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_super&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;switch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;actualURL&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

      &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;/news&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;/stories&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

      &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;/newest&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;/stories?filter=latest&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

      &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt; &lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;formatURL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;logicalPath&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;switch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;logicalPath&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

      &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;/stories&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;/news&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

      &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;/stories?filter=latest&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;/newest&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

      &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;App&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;register&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;location:hacker-news&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;App&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;HackerNewsLocation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt; &lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;App&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Router&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;reopen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;location&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;hacker-news&amp;quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Because Ember already has to support the two different URL types across the
entire stack, once I implemented this adapter correctly, everything Just Works™
– for example, when you generate a link using the ``
handlebars helper, Ember would first call &lt;code&gt;formatURL&lt;/code&gt; to before putting it
into the href attribute of the &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; tags, so that when a user command-click on
a link to open it in a new tab, they will end up at the right place.&lt;/p&gt;

&lt;p&gt;To be honest, I am a little surprised by how well this worked out, given that
I am probably the only one who uses the location adapters this way.&lt;/p&gt;

&lt;p&gt;This is a great testament to the power of the adapter pattern. By slicing things
at the right boundary of abstraction, your code can work seamlessly with use
cases that you haven’t even dreamed of when you wrote the original code.&lt;/p&gt;

&lt;h3 id=&quot;storing-user-preferences&quot;&gt;Storing User Preferences&lt;/h3&gt;

&lt;p&gt;The last challenge that I want to talk about briefly is storing the user’s
preferences.&lt;/p&gt;

&lt;p&gt;There is a little trick I would like to show you: open &lt;a href=&quot;http://chancancode.github.io/hn-reader/preferences&quot;&gt;this page&lt;/a&gt;
on two different tabs/windows, and then a long discussion thread on another. Try
changing the “Folding Threshold” slider – you will notice that the value updates
instantly in the other preferences tab/window, and the comments thread would
re-render accordingly to reflect that setting.&lt;/p&gt;

&lt;p&gt;While this is probably not a very useful feature, it is in fact solving a real
problem.&lt;/p&gt;

&lt;p&gt;What I really want to accomplish is to store the preferences in a way that is
persisted across browser sessions. Naturally, I turned to the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage&quot;&gt;Local Storage&lt;/a&gt;
API for this. The problem, is that I also want to observe/bind to these values
in my Ember app, so that I can use them in my handlebars templates, computed
properties, and so on.&lt;/p&gt;

&lt;p&gt;In Ember apps, the data binding functionality is provided by &lt;code&gt;Ember.Object&lt;/code&gt;, or
more accurately the &lt;code&gt;Ember.Observable&lt;/code&gt; mixin that is included in &lt;code&gt;Ember.Object&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;If we put the two APIs side-by-side, you might notice some similarities:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;LOCAL STORAGE                        |  Ember.Observable
-------------------------------------+-------------------------------------
                                     |
localStorage.getItem(&amp;quot;key&amp;quot;);         |  obj.get(&amp;quot;key&amp;quot;);
                                     |
localStorage.setItem(&amp;quot;key&amp;quot;, value);  |  obj.set(&amp;quot;key&amp;quot;, value);
                                     |
$(window).on(&amp;quot;storage&amp;quot;, ...);        |  obj.addObserver( ... );&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This seems like a textbook example for the adapter pattern:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;nx&quot;&gt;App&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;LocalStorage&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Ember&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;extend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;storage&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Ember&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;bind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;_onStorageEvent&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;unknownProperty&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;localStorage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getItem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;setUnknownProperty&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;localStorage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setItem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;_onStorageEvent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;notifyPropertyChange&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;willDestroy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;off&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;storage&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Indeed, all I have to do is to write an adapter that exposes the same interface
as an &lt;code&gt;Ember.Object&lt;/code&gt; (&lt;code&gt;Ember.Observable&lt;/code&gt;), with that, the rest of the Ember
is able to bind and observe its values as usual.&lt;/p&gt;

&lt;p&gt;(See &lt;a href=&quot;https://medium.com/the-ember-way/metaprogramming-in-emberjs-627921395299&quot;&gt;this blog post&lt;/a&gt;
for in in-depth explanation. My &lt;a href=&quot;https://github.com/chancancode/hn-reader/blob/master/app/initializers/03-preferences-store.js&quot;&gt;full implementation&lt;/a&gt;
also added a caching layer to improve performance.)&lt;/p&gt;

&lt;h2 id=&quot;the-possibilities&quot;&gt;The Possibilities&lt;/h2&gt;

&lt;p&gt;With these examples, I hope I have showed you the power of the adapter pattern.
I think this is an important pattern to consciously learn when you are using a
full-stack framework like Ember and Rails.&lt;/p&gt;

&lt;p&gt;A lot of people will tell you that a set of small, composable libraries is
better than an opinionated framework, because when your constraints doesn’t line
up perfectly with the framework’s choices, you are basically out of luck.&lt;/p&gt;

&lt;p&gt;I think this is not necessarily true. When using your own set of libraries, you
basically have to implement all the adapters to glue together all the individual
components yourself. On the other hand, a well-designed framework like Ember and
Rails is basically just a curated set of libraries that work together seamlessly
out-of-the-box. If something doesn’t work for you out-of-the-box, you can just
replace those parts and drop in a custom adapter or two.&lt;/p&gt;

&lt;p&gt;I hope that you can also see past the examples and use cases I’ve shown here.&lt;/p&gt;

&lt;p&gt;Perhaps you have an existing content site and you are considering doing a
redesign in Ember.js. Maybe you can consider writing a quick scraper adapter for
your prototype, instead of bothering the backend team to implement a full-blown
JSON API on day one?&lt;/p&gt;

&lt;p&gt;Suppose you are building a presentation software that has a presenter display
component and the full-screen slides in two separate windows. If you recognize
that the URLs are just a way to track the current application state, perhaps you
could &lt;a href=&quot;http://emberjs.jsbin.com/luxivi?id=demo#/present&quot;&gt;implement a &lt;code&gt;LocationAdapter&lt;/code&gt; backed by &lt;code&gt;localStorage&lt;/code&gt;&lt;/a&gt;
to keep everything in sync?&lt;/p&gt;

&lt;p&gt;Once you are down the path of enlightenment, the possibilities are endless.&lt;/p&gt;

&lt;p&gt;(Thank you EmberConf organizers, volunteers, speakers and attendees for the
amazing conference! &amp;lt;3 &amp;lt;3 &amp;lt;3 &amp;lt;3 &amp;lt;3)&lt;/p&gt;

&lt;h2 id=&quot;hire-us&quot;&gt;Hire Us!&lt;/h2&gt;

&lt;p&gt;Interested in Ember.js training for your team? Need help building your next
&lt;em&gt;ambitious&lt;/em&gt; web application? &lt;a href=&quot;http://brewhouse.io/#hire-us&quot;&gt;Get in touch&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;P.S. If you are in Vancouver, join us at our regular &lt;a href=&quot;http://meetup.com/Vancouver-Ember-js/&quot;&gt;Ember meetups&lt;/a&gt;!&lt;/p&gt;
</content>

            
              <content type="image" src="http://brewhouse.io/images/brewhouse-symbol-large-200x200.png" />
            
        </entry>
      
    
      
        <entry>
            <title>Ember vs Angular: Authentication Example</title>
            <author>
              <name>Godfrey Chan</name>
              <email>godfrey@brewhouse.io</email>
            </author>
            <link href="http://brewhouse.io/blog/2015/02/12/ember-vs-angular-authentication.html"/>
            <updated>2015-02-12T10:00:00-08:00</updated>
            <id>http://brewhouse.io/blog/2015/02/12/ember-vs-angular-authentication</id>
            <content type="html">&lt;div class=&quot;callout callout-info&quot;&gt;
  &lt;h4&gt;Shameless Plug&lt;/h4&gt;
  &lt;p&gt;I&#39;ll be &lt;a href=&quot;http://emberconf.com/speakers.html#gchan&quot; target=&quot;_blank&quot;&gt;speaking at EmberConf&lt;/a&gt;
  next month, hope to see you there!&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;A while back, Gabe showed us an approach to &lt;a href=&quot;http://brewhouse.io/blog/2014/12/09/authentication-made-simple-in-single-page-angularjs-applications.html&quot;&gt;handling authentications in AngularJS&lt;/a&gt;.
This is a good opportunity to compare the similarity and differences between &lt;a href=&quot;https://angularjs.org/&quot;&gt;AngularJS&lt;/a&gt;
and &lt;a href=&quot;http://emberjs.com/&quot;&gt;Ember.js&lt;/a&gt;, so in this blog post, we will look at how
you would achieve the same thing with Ember.js.&lt;/p&gt;

&lt;p&gt;It is worth mentioning that there are plenty of &lt;a href=&quot;https://github.com/simplabs/ember-simple-auth&quot;&gt;plugins&lt;/a&gt;
and &lt;a href=&quot;http://www.embercasts.com/episodes/client-side-authentication-part-1&quot;&gt;tutorials&lt;/a&gt;
on the same topic in the Ember world. However, for comparison’s sake, let’s
build this example from scratch.&lt;/p&gt;

&lt;!-- break --&gt;

&lt;h2 id=&quot;the-task&quot;&gt;The task&lt;/h2&gt;

&lt;p&gt;&lt;a class=&quot;jsbin-embed&quot; href=&quot;http://jsbin.com/cisufu/embed?output&quot;&gt;JS Bin&lt;/a&gt;&lt;script src=&quot;http://static.jsbin.com/js/embed.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;Similar to Gabe’s example, we will be building a single page app that hosts a
mix of public and protected content. When the user tries to access a protected
page, the app should present a login screen. Just like the Angular counterpart,
the server might choose to reject the authentication anytime (e.g. expired
session), in which case the app should present the login screen and ask the user
for their credentials again.&lt;/p&gt;

&lt;p&gt;In addition, we will also handle a basic authorization scenario where one of the
protected pages can only be accessed by admin users. On top of all that, we will
be a good citizen on the web and ensure our URLs and browser history works
correctly throughout the app (e.g. the back button, bookmarking, opening links
in new tab, sharing links to specific pages should all work as expected).&lt;/p&gt;

&lt;p&gt;Finally, to keep things simple, we will opt for regular transitions instead of
modal dialogs.&lt;/p&gt;

&lt;p&gt;The completed app is available on as a &lt;a href=&quot;http://emberjs.jsbin.com/cisufu&quot;&gt;JS bin&lt;/a&gt;,
so go ahead and poke around!&lt;/p&gt;

&lt;p&gt;Alternatively, you can also access the code on &lt;a href=&quot;https://github.com/BrewhouseTeam/ember-auth-example&quot;&gt;Github&lt;/a&gt;.
The Github version uses &lt;a href=&quot;https://ember-cli.com&quot;&gt;Ember CLI&lt;/a&gt; so there are some
minor differences in syntax and code organization. It also comes with a complete
&lt;a href=&quot;https://github.com/BrewhouseTeam/ember-auth-example/tree/master/tests&quot;&gt;test suite&lt;/a&gt;,
so be sure to check that out!&lt;/p&gt;

&lt;h2 id=&quot;step-1-building-the-api-client&quot;&gt;Step 1: Building the API client&lt;/h2&gt;

&lt;p&gt;For our app to work, we will need an API that supports the following operations:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;An endpoint to authenticate users by their credentials, in exchange for a
session token. (e.g. a &lt;code&gt;POST&lt;/code&gt; request to &lt;code&gt;/session&lt;/code&gt; with the user’s username
and password.)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;An endpoint to access a public resource. (e.g. a &lt;code&gt;GET&lt;/code&gt; request to &lt;code&gt;/public&lt;/code&gt;)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;An endpoint to access a protected resource that is only available when
authenticated. (e.g. a &lt;code&gt;GET&lt;/code&gt; request to &lt;code&gt;/protected&lt;/code&gt; with a valid session
token)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;An endpoint to access the admin-only resource. (e.g. a &lt;code&gt;GET&lt;/code&gt; request to
&lt;code&gt;/secret&lt;/code&gt; with an appropriate session token)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;An endpoint to explicitly destroy a session (e.g. a &lt;code&gt;DELETE&lt;/code&gt; request to
&lt;code&gt;/session&lt;/code&gt; with a session token)&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This should be fairly straight forward to implement with your choice of server-
side technology. For our purpose, we will mock it out with the &lt;a href=&quot;https://github.com/trek/pretender&quot;&gt;Pretender&lt;/a&gt;
library:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// mock-server.js&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;server&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Pretender&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;/session&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;switch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;requestBody&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;username=admin&amp;amp;password=secret&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;201&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Content-Type&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;application/json&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;{&amp;quot;token&amp;quot;:&amp;quot;admin&amp;quot;,&amp;quot;user&amp;quot;:{&amp;quot;role&amp;quot;:&amp;quot;admin&amp;quot;,&amp;quot;name&amp;quot;:&amp;quot;Administrator&amp;quot;}}&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;

      &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;username=user&amp;amp;password=secret&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;201&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Content-Type&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;application/json&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;{&amp;quot;token&amp;quot;:&amp;quot;user&amp;quot;,&amp;quot;user&amp;quot;:{&amp;quot;role&amp;quot;:&amp;quot;user&amp;quot;,&amp;quot;name&amp;quot;:&amp;quot;User&amp;quot;}}&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;

      &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;401&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{},&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;Incorrect username/password&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;delete&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;/session&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{},&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;You are logged out&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;/public&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{},&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;Lorem ipsum dolor sit amet&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;/protected&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;requestHeaders&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Authorization&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;Token token=user&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;Token token=admin&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{},&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;Since you can see this, you must be logged in!&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;

      &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;Token token=expired&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;401&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{},&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;Your session has expired&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;

      &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;401&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{},&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;Please login to access this page&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;/secret&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;requestHeaders&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Authorization&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;Token token=user&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;403&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{},&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;You are not allowed to access this page&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;

      &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;Token token=admin&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{},&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;Since you can see this, you must be an admin!&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;

      &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;Token token=expired&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;401&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{},&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;Your session has expired&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;

      &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;401&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{},&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;Please login to access this page&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;To access this API, we will write a simple API client for it:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// api.js&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;API&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;token&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;login&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;username&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;payload&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;username&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;username&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;password&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;deferred&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;jQuery&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;/session&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;payload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;token&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;token&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
      &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;statusText&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;responseText&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Ember&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;RSVP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;resolve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;deferred&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;logout&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;settings&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;DELETE&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;Authorization&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;Token token=&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;token&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;deferred&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;jQuery&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ajax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;/session&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;settings&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;token&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Ember&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;RSVP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;resolve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;deferred&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;resource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;url&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;/&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;resource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;settings&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;token&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;settings&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;Authorization&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;Token token=&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;token&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;settings&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{};&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;deferred&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;jQuery&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ajax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;settings&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;statusText&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;responseText&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Ember&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;RSVP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;resolve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;deferred&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Nothing too exciting so far (and none of these are specific to Ember.js). The
only thing worth mentioning is that we are turning jQuery’s &lt;a href=&quot;http://api.jquery.com/category/deferred-object/&quot;&gt;deferred objects&lt;/a&gt;
into “real” &lt;a href=&quot;https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Promise&quot;&gt;Promises&lt;/a&gt;
via &lt;a href=&quot;https://github.com/tildeio/rsvp.js/&quot;&gt;RSVP.js&lt;/a&gt;, which happens to be one of
Ember’s dependencies.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://emberjs.jsbin.com/siwawo/edit&quot;&gt;Try it out on JS Bin&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/BrewhouseTeam/ember-auth-example/compare/initial...step-1&quot;&gt;View the diff on Github&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;step-2-adding-the-index-page&quot;&gt;Step 2: Adding the index page&lt;/h2&gt;

&lt;p&gt;Now that we have the API client figured out, we can move on to setting up our
Ember app and a simple index page. This will be the page that greets our users
when they first visit our app. From here, we will link to the different sections
of our app.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// app.js&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;App&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Ember&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Application&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html-handlebars&quot; data-lang=&quot;html+handlebars&quot;&gt;&lt;span class=&quot;c&quot;&gt;{{!-- templates/appliction.hbs --}}&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;h2&amp;gt;&lt;/span&gt;Ember.js Authentication Example&lt;span class=&quot;nt&quot;&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;

&lt;span class=&quot;cp&quot;&gt;{{&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;outlet&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;}}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html-handlebars&quot; data-lang=&quot;html+handlebars&quot;&gt;&lt;span class=&quot;c&quot;&gt;{{!-- templates/index.hbs --}}&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Public Page&lt;span class=&quot;nt&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Protected Page&lt;span class=&quot;nt&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Admin-only Page&lt;span class=&quot;nt&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Here, we have a bare-bone Ember app setup with a simple app-wide layout (the
template called “application” will be rendered on every page, and the page’s
template will be inserted into the &lt;code&gt;{{outlet}}&lt;/code&gt;
placeholder). If you are familiar with Rails, you can think of &lt;code&gt;application.hbs&lt;/code&gt;
as the application’s “layout”, where &lt;code&gt;{{outlet}}&lt;/code&gt; is
analogous to &lt;code&gt;&amp;lt;%= yield %&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://emberjs.jsbin.com/nehana&quot;&gt;Try it out on JS Bin&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/BrewhouseTeam/ember-auth-example/compare/step-1...step-2&quot;&gt;View the diff on Github&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When you launch the app in your browser, you should see the index template being
rendered. Clicking on the links doesn’t do anything yet, though, so let’s fix
it!&lt;/p&gt;

&lt;h2 id=&quot;step-3-adding-the-public-page&quot;&gt;Step 3: Adding the public page&lt;/h2&gt;

&lt;p&gt;To render the public page, we want to call &lt;code&gt;API.get(&#39;public&#39;);&lt;/code&gt; to fetch the
data we need to populate the page. Because we don’t need to authenticate with
the server, this is pretty straight forward:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// router.js&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;App&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Router&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;route&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;public&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// routes/public.js&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;App&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;PublicRoute&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Ember&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Route&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;extend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;API&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;public&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html-handlebars&quot; data-lang=&quot;html+handlebars&quot;&gt;&lt;span class=&quot;c&quot;&gt;{{!-- templates/index.hbs --}}&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;{{&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;#link&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;public&amp;quot;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;}}&lt;/span&gt;Public Page&lt;span class=&quot;cp&quot;&gt;{{&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;/link&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;}}&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Protected Page&lt;span class=&quot;nt&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Admin-only Page&lt;span class=&quot;nt&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html-handlebars&quot; data-lang=&quot;html+handlebars&quot;&gt;&lt;span class=&quot;c&quot;&gt;{{!-- templates/public.hbs --}}&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;h4&amp;gt;&lt;/span&gt;Public Page&lt;span class=&quot;nt&quot;&gt;&amp;lt;/h4&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;content&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;{{&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;}}&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;{{&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;#link&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;index&amp;quot;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;}}&lt;/span&gt;Go back&lt;span class=&quot;cp&quot;&gt;{{&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;/link&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;}}&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;By returning a Promise in our route (which is what &lt;code&gt;API.get&lt;/code&gt; returns), the Ember
router is smart enough to wait for it to resolve (or reject) before attempting
to render the page. This architecture spares us from having to worry about the
async nature of the data-fetching operations, so we can simply refer to the data
returned by the server in our template.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://emberjs.jsbin.com/tedufu&quot;&gt;Try it out on JS Bin&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/BrewhouseTeam/ember-auth-example/compare/step-2...step-3&quot;&gt;View the diff on Github&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you refresh the app in the browser, you should now be able to go back and
forth between the index page and the public page (either by clicking the links,
using the back/forward buttons in your browser, or even modifying the URL in the
address bar directly).&lt;/p&gt;

&lt;h2 id=&quot;step-4-adding-the-protected-page&quot;&gt;Step 4: Adding the protected page&lt;/h2&gt;

&lt;p&gt;With the public page fully functioning, we will move on to tackling the
protected page.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// router.js&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;App&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Router&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;route&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;public&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;route&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;protected&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// routes/protected.js&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;App&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ProtectedRoute&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Ember&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Route&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;extend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;API&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;protected&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html-handlebars&quot; data-lang=&quot;html+handlebars&quot;&gt;&lt;span class=&quot;c&quot;&gt;{{!-- templates/index.hbs --}}&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;{{&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;#link&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;public&amp;quot;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;}}&lt;/span&gt;Public Page&lt;span class=&quot;cp&quot;&gt;{{&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;/link&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;}}&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;{{&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;#link&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;protected&amp;quot;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;}}&lt;/span&gt;Protected Page&lt;span class=&quot;cp&quot;&gt;{{&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;/link&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;}}&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Admin-only Page&lt;span class=&quot;nt&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html-handlebars&quot; data-lang=&quot;html+handlebars&quot;&gt;&lt;span class=&quot;c&quot;&gt;{{!-- templates/protected.hbs --}}&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;h4&amp;gt;&lt;/span&gt;Protected Page&lt;span class=&quot;nt&quot;&gt;&amp;lt;/h4&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;content&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;{{&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;}}&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;{{&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;#link&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;index&amp;quot;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;}}&lt;/span&gt;Go back&lt;span class=&quot;cp&quot;&gt;{{&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;/link&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;}}&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html-handlebars&quot; data-lang=&quot;html+handlebars&quot;&gt;&lt;span class=&quot;c&quot;&gt;{{!-- templates/error.hbs --}}&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;h4&amp;gt;&lt;/span&gt;An error has occured!&lt;span class=&quot;nt&quot;&gt;&amp;lt;/h4&amp;gt;&lt;/span&gt;

&lt;span class=&quot;cp&quot;&gt;{{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;#if&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;}}&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;content&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;{{&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;}}&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;{{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;}}&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;content&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Unknown Error&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;{{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;/if&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;}}&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;{{&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;#link&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;index&amp;quot;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;}}&lt;/span&gt;Go back&lt;span class=&quot;cp&quot;&gt;{{&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;/link&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;}}&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;http://emberjs.jsbin.com/yaluho&quot;&gt;Try it out on JS Bin&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/BrewhouseTeam/ember-auth-example/compare/step-3...step-4&quot;&gt;View the diff on Github&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you tried clicking on the link to the protected page, you will see that
Ember is rendering the &lt;code&gt;error&lt;/code&gt; template with the error message returned by the
server (“Please login to access this page”). As we haven’t authenticate with the
API yet, this is what we would expect. However, how does Ember know to render
the &lt;code&gt;error&lt;/code&gt; template instead of the &lt;code&gt;protected&lt;/code&gt; template?&lt;/p&gt;

&lt;p&gt;You might have guessed it – Promises! When the server refuses to process our
request, our API client will reject the returned promise. Because Ember’s router
is Promise-aware, it will know that a rejected Promise means that something has
gone wrong. When this happens, it will abort the original transition (from the
&lt;code&gt;index&lt;/code&gt; route into the&lt;code&gt;protected&lt;/code&gt; route) and transition into the special &lt;code&gt;error&lt;/code&gt;
route instead.&lt;/p&gt;

&lt;p&gt;This in turns causes the &lt;code&gt;error&lt;/code&gt; template to be rendered with the rejection
reason being the route’s model, which is why we have access to the error’s
&lt;code&gt;message&lt;/code&gt; from the template.&lt;/p&gt;

&lt;h2 id=&quot;step-5-adding-a-login-page&quot;&gt;Step 5: Adding a login page&lt;/h2&gt;

&lt;p&gt;Since we don’t have the UI to authenticate with the API yet, we still haven’t
seen the fully-functional protected page. Let’s add that next!&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// router.js&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;App&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Router&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;route&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;login&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;route&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;public&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;route&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;protected&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// routes/login.js&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;App&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;LoginRoute&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Ember&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Route&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;extend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;actions&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;submit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;route&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;controller&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;controller&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

      &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;username&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;controller&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;username&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
          &lt;span class=&quot;nx&quot;&gt;password&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;controller&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;password&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

      &lt;span class=&quot;nx&quot;&gt;controller&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;message&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

      &lt;span class=&quot;nx&quot;&gt;API&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;login&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;username&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;nx&quot;&gt;route&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;transitionTo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;index&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;nx&quot;&gt;controller&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;message&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;

    &lt;span class=&quot;nx&quot;&gt;cancel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;transitionTo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;index&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;resetController&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;controller&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;controller&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setProperties&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;username&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;  &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html-handlebars&quot; data-lang=&quot;html+handlebars&quot;&gt;&lt;span class=&quot;c&quot;&gt;{{!-- templates/appliction.hbs --}}&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;h2&amp;gt;&lt;/span&gt;Ember.js Authentication Example&lt;span class=&quot;nt&quot;&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;

&lt;span class=&quot;cp&quot;&gt;{{&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;outlet&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;}}&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;{{&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;#link&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;login&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;tagName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;button&amp;quot;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;}}&lt;/span&gt;Login&lt;span class=&quot;cp&quot;&gt;{{&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;/link&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;}}&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html-handlebars&quot; data-lang=&quot;html+handlebars&quot;&gt;&lt;span class=&quot;c&quot;&gt;{{!-- templates/login.hbs --}}&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;h4&amp;gt;&lt;/span&gt;Please login&lt;span class=&quot;nt&quot;&gt;&amp;lt;/h4&amp;gt;&lt;/span&gt;

&lt;span class=&quot;cp&quot;&gt;{{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;#if&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;}}&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;content&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;{{&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;}}&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;{{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;/if&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;}}&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;small&amp;gt;&lt;/span&gt;
    To login as a user, use &lt;span class=&quot;nt&quot;&gt;&amp;lt;code&amp;gt;&lt;/span&gt;user&lt;span class=&quot;nt&quot;&gt;&amp;lt;/code&amp;gt;&lt;/span&gt; / &lt;span class=&quot;nt&quot;&gt;&amp;lt;code&amp;gt;&lt;/span&gt;secret&lt;span class=&quot;nt&quot;&gt;&amp;lt;/code&amp;gt;&lt;/span&gt;;&lt;span class=&quot;nt&quot;&gt;&amp;lt;br&amp;gt;&lt;/span&gt;
    to login as an admin, use &lt;span class=&quot;nt&quot;&gt;&amp;lt;code&amp;gt;&lt;/span&gt;admin&lt;span class=&quot;nt&quot;&gt;&amp;lt;/code&amp;gt;&lt;/span&gt; / &lt;span class=&quot;nt&quot;&gt;&amp;lt;code&amp;gt;&lt;/span&gt;secret&lt;span class=&quot;nt&quot;&gt;&amp;lt;/code&amp;gt;&lt;/span&gt;.
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/small&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Username: &lt;span class=&quot;cp&quot;&gt;{{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;put&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;username&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;username&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;}}&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Password: &lt;span class=&quot;cp&quot;&gt;{{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;put&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;password&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;password&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;}}&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;button&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;{{&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;action&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;submit&amp;quot;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;}}&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Submit&lt;span class=&quot;nt&quot;&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;button&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;{{&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;action&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;cancel&amp;quot;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;}}&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Cancel&lt;span class=&quot;nt&quot;&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We did quite a lot here, so let’s break it down.&lt;/p&gt;

&lt;p&gt;First, we added a &lt;code&gt;login&lt;/code&gt; route to the router. Just like you would expect,
visiting the &lt;code&gt;/login&lt;/code&gt; URL would enter this route and render the &lt;code&gt;login&lt;/code&gt;
template. Nothing new so far.&lt;/p&gt;

&lt;p&gt;In the &lt;code&gt;login&lt;/code&gt; template, we added some markup for a simple form, with input
fields for the username and password. The value for these input fields are bound
to the controller’s &lt;code&gt;username&lt;/code&gt; and &lt;code&gt;password&lt;/code&gt; properties, which would come in
handy later. (For the purpose of understanding this example, you Angular folks
might find it helpful to think of the controller as the template’s &lt;code&gt;$scope&lt;/code&gt;.)&lt;/p&gt;

&lt;p&gt;Below the form, we have two buttons that would trigger the &lt;code&gt;submit&lt;/code&gt; and &lt;code&gt;cancel&lt;/code&gt;
actions, respectively, which will be handled in &lt;code&gt;LoginRoute&lt;/code&gt; and invoke the
appropriately named functions.&lt;/p&gt;

&lt;p&gt;For the &lt;code&gt;submit&lt;/code&gt; action, we simply extract the values for the username and
password from the controller and pass them to &lt;code&gt;API.login&lt;/code&gt;. If the authentication
is successful (i.e. the Promise resolves), then we would redirect the user back
to the index page; otherwise, we will extract the server’s response and display
it in the template.&lt;/p&gt;

&lt;p&gt;(If you are curious about the &lt;code&gt;resetController&lt;/code&gt; hook we implemented, it simply
clears out the values in the login form when transitioning away from the login
page.)&lt;/p&gt;

&lt;p&gt;Finally, we added a link to the login page. This time, we added the link to the
&lt;code&gt;application&lt;/code&gt; template (the “layout”), so it will always visible regardless of
where you are in the app. We also told Ember to render a &lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt; tag instead
of the default &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; tag, just so we can differentiate it from the rest of the
links on the page.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://emberjs.jsbin.com/webaya&quot;&gt;Try it out on JS Bin&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/BrewhouseTeam/ember-auth-example/compare/step-4...step-5&quot;&gt;View the diff on Github&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;With these changes, you can try logging in using the hard-coded credentials (or
use something else to see the error messages in action). Once you are logged in,
you should be able to view the protected page without problems.&lt;/p&gt;

&lt;h2 id=&quot;step-6-tracking-the-current-user-and-adding-a-logout-button&quot;&gt;Step 6: Tracking the current user and adding a logout button&lt;/h2&gt;

&lt;p&gt;If you have played with the demo from the last step, you might find the user
experience quite confusing – there are no visual indicatiors to tell the user
that the login process was successful. The “Login” button is also always visible
on the bottom of the page, even after logging in, making it impossible for the
user to infer the state of the system. Ideally, we would like to know if the
user is already logged in, and display a “Logout” button instead. We will work
on addressing this next:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// initializers/inject-session.js&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Register an observable &amp;quot;session&amp;quot; object for tracking current user, etc&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;App&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;register&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;service:session&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Ember&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Make the session object available to all routes and controller&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;App&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;inject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;route&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;session&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;service:session&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;App&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;inject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;controller&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;session&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;service:session&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// routes/application.js&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;App&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ApplicationRoute&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Ember&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Route&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;extend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;actions&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;logout&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;route&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

      &lt;span class=&quot;nx&quot;&gt;API&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;logout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;route&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;session&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;user&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;route&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;transitionTo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;index&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// routes/login.js&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;App&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;LoginRoute&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Ember&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Route&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;extend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;actions&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;submit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;route&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;controller&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;controller&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

      &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;username&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;controller&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;username&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
          &lt;span class=&quot;nx&quot;&gt;password&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;controller&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;password&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

      &lt;span class=&quot;nx&quot;&gt;controller&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;message&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

      &lt;span class=&quot;nx&quot;&gt;API&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;login&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;username&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;nx&quot;&gt;route&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;session&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;user&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
          &lt;span class=&quot;nx&quot;&gt;route&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;transitionTo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;index&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;nx&quot;&gt;controller&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;message&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html-handlebars&quot; data-lang=&quot;html+handlebars&quot;&gt;&lt;span class=&quot;c&quot;&gt;{{!-- templates/appliction.hbs --}}&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;h2&amp;gt;&lt;/span&gt;Ember.js Authentication Example&lt;span class=&quot;nt&quot;&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;

&lt;span class=&quot;cp&quot;&gt;{{&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;outlet&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;}}&lt;/span&gt;

&lt;span class=&quot;cp&quot;&gt;{{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;#if&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;session.user&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;}}&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;p&amp;gt;&amp;lt;button&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;{{&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;action&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;logout&amp;quot;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;}}&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Logout&lt;span class=&quot;nt&quot;&gt;&amp;lt;/button&amp;gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;{{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;}}&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;{{&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;#link&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;login&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;tagName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;button&amp;quot;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;}}&lt;/span&gt;Login&lt;span class=&quot;cp&quot;&gt;{{&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;/link&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;}}&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;{{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;/if&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;}}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html-handlebars&quot; data-lang=&quot;html+handlebars&quot;&gt;&lt;span class=&quot;c&quot;&gt;{{!-- templates/index.hbs --}}&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;{{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;#if&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;session.user&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;}}&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;h4&amp;gt;&lt;/span&gt;You are logged in as &lt;span class=&quot;cp&quot;&gt;{{&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;session.user.name&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;}}&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;/h4&amp;gt;&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;{{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;/if&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;}}&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;{{&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;#link&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;public&amp;quot;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;}}&lt;/span&gt;Public Page&lt;span class=&quot;cp&quot;&gt;{{&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;/link&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;}}&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;{{&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;#link&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;protected&amp;quot;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;}}&lt;/span&gt;Protected Page&lt;span class=&quot;cp&quot;&gt;{{&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;/link&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;}}&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Admin-only Page&lt;span class=&quot;nt&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;First, we introduced the concept of a shared &lt;code&gt;session&lt;/code&gt; object and made it
available to all controllers and routes in our app. This is where we will keep
“transient” states of our app. As these things are only kept in memory for as
long as our app is open, this is ideal for tracking the “current user” and
similar states. We made it an &lt;code&gt;Ember.Object&lt;/code&gt; so that its values can be observed
and bound in templates, but otherwise it behaves just like a “plain-old
JavaScript object” (i.e. &lt;code&gt;{}&lt;/code&gt;) for our purpose.&lt;/p&gt;

&lt;p&gt;We then modified our &lt;code&gt;submit&lt;/code&gt; action in the &lt;code&gt;LoginRoute&lt;/code&gt; to store the &lt;code&gt;user&lt;/code&gt;
object returned by the server in the &lt;code&gt;session&lt;/code&gt; object upon a successful login.&lt;/p&gt;

&lt;p&gt;Because we made the &lt;code&gt;session&lt;/code&gt; object available to all controllers, we can now
access its content in the templates as well. (For you angular developers,
imagine we have added the &lt;code&gt;session&lt;/code&gt; object to the root scope.) With that, we
modified the &lt;code&gt;application&lt;/code&gt; template to conditionally show a “Login” or “Logout”
button depending on whether the user has logged in or not. We also added a
simple greeting in the &lt;code&gt;index&lt;/code&gt; template to remind our users who (the system
thinks) they are.&lt;/p&gt;

&lt;p&gt;Finally, since the “Logout” button can be clicked from anywhere in our app, we
introduced an &lt;code&gt;ApplicationRoute&lt;/code&gt; to handle the &lt;code&gt;logout&lt;/code&gt; action. Just like
templates, routes in Ember can be nested. We won’t get into the details here,
but in a nut shell, the &lt;code&gt;ApplicationRoute&lt;/code&gt; is always active (just like how the
&lt;code&gt;application&lt;/code&gt; template is always rendered), making it the ideal place to handle
global actions like these. The implementation of the action handler itself is
fairly simple – we just call &lt;code&gt;API.logout&lt;/code&gt;, set &lt;code&gt;session.user&lt;/code&gt; back to &lt;code&gt;null&lt;/code&gt;
and then transition back to the “index” page.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://emberjs.jsbin.com/mayuwa&quot;&gt;Try it out on JS Bin&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/BrewhouseTeam/ember-auth-example/compare/step-5...step-6a&quot;&gt;View the diff on Github&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is one more minor issue – because the “Login” button is rendered in the
&lt;code&gt;application&lt;/code&gt; template (the “layout”), it will be visible from the login page as
well, which made things quite confusing. Fortunately, this is very easy to fix.
Since we implemented the “Login” button using the `` helper, Ember
will automatically add an &lt;code&gt;active&lt;/code&gt; CSS class to the button when the link is
active (i.e. we are already on the page that the link is supposed to bring us
to). This makes it trivial to hide the “Login” button on the login page with
just a few lines of CSS:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;c&quot;&gt;/* app.css */&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;button&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;.active&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;none&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;http://emberjs.jsbin.com/legiyo&quot;&gt;Try it out on JS Bin&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/BrewhouseTeam/ember-auth-example/compare/step-6a...step-6b&quot;&gt;View the diff on Github&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;step-7-revisiting-the-protected-page&quot;&gt;Step 7: Revisiting the protected page&lt;/h2&gt;

&lt;p&gt;With our login flow working properly, we can shift our attention back to the
protected page. Remember how when you visited the protected page without being
logged in, it would just show the error page? Since we know what the user need
to do to resolve the problem (by logging in), wouldn’t it be great if we just
redirect them straight to the login page? Better yet, it would be fantastic if
we remember where the user came from, so that we can redirect them back to the
same page upon a successful login. Let’s get to work!&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// routes/application.js&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;App&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ApplicationRoute&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Ember&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Route&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;extend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;actions&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;logout&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;

    &lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;transition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;status&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;Unauthorized&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;loginController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;controllerFor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;login&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;nx&quot;&gt;loginController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setProperties&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
          &lt;span class=&quot;nx&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;nx&quot;&gt;transition&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;transition&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;transitionTo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;login&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// Allow other error to bubble&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// routes/login.js&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;App&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;LoginRoute&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Ember&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Route&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;extend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;actions&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;submit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;route&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;controller&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;controller&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

      &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;username&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;controller&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;username&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
          &lt;span class=&quot;nx&quot;&gt;password&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;controller&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;password&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

      &lt;span class=&quot;nx&quot;&gt;controller&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;message&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

      &lt;span class=&quot;nx&quot;&gt;API&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;login&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;username&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;transition&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;controller&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;transition&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

          &lt;span class=&quot;nx&quot;&gt;route&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;session&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;user&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

          &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;transition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;transition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;retry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;route&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;transitionTo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;index&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;nx&quot;&gt;controller&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;message&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;resetController&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;controller&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;controller&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setProperties&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;username&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;   &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;   &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;    &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;transition&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// controllers/login.js&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;App&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;LoginController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Ember&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Controller&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;extend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;When an error occurs during a route transition (e.g. a Promise was rejected),
the Ember router will first invoke the &lt;code&gt;error&lt;/code&gt; action handler, offering you a
chance to handle that gracefully before transitioning into the &lt;code&gt;error&lt;/code&gt; page.&lt;/p&gt;

&lt;p&gt;This is exactly what we want to do here. We added a handler for the &lt;code&gt;error&lt;/code&gt;
action to the top-level &lt;code&gt;ApplicationRoute&lt;/code&gt;. From within the handler, we look for
a specific type of error (an error with the “Unauthorized” HTTP status returned
by the server). If we found what we are looking for, we capture the error
message and the current transition so that we can retry it later. Otherwise, we
&lt;code&gt;return true&lt;/code&gt; to let the action continue to bubble up to the default handler,
which would send the user to the error page.&lt;/p&gt;

&lt;p&gt;Upon completing a successful login from our &lt;code&gt;LoginRoute&lt;/code&gt;, we check if we have a
saved transition from earlier (via the &lt;code&gt;error&lt;/code&gt; handler we just implemented). If
we found one, we will retry the same transition (which should work now that the
user is logged in). Otherwise, we transition to the “index” page like we did
before.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://emberjs.jsbin.com/recatu&quot;&gt;Try it out on JS Bin&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/BrewhouseTeam/ember-auth-example/compare/step-6b...step-7a&quot;&gt;View the diff on Github&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you are paying close attention, there is a minor hiccup here. So far we
haven’t had to define any controllers ourselves. This is because we didn’t need
to do much with them, so Ember could just infer what we need and generate them
automatically &lt;em&gt;when the route is first entered&lt;/em&gt;. However, with our changes to
the &lt;code&gt;ApplicationRoute&lt;/code&gt;, we would need to access the controller before the
&lt;code&gt;login&lt;/code&gt; route has been entered.&lt;/p&gt;

&lt;p&gt;In this case, Ember won’t be able to infer the type of controller we need (there
are different kinds of controllers in Ember), so we will need to explicitly
define it. Since we only need the basic functionality, our &lt;code&gt;LoginController&lt;/code&gt;
will just extend from the &lt;code&gt;Ember.Controller&lt;/code&gt; base class.&lt;/p&gt;

&lt;p&gt;There is one more improvement we can make to the protected page. Currently, if
the user is not logged in, we will still make an API request to the server, just
to show an error message on the login page. With the session object, we can now
eagerly predict this outcome and avoid that wasteful roundtrip:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// routes/protected.js&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;App&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ProtectedRoute&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Ember&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Route&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;extend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;beforeModel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;session&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;user&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Ember&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;RSVP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;reject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;Unauthorized&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;Please login to access this page&amp;#39;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;API&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;protected&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;All we need to do here is to check if we have a &lt;code&gt;session.user&lt;/code&gt;. If not, we can
immediately return a rejected Promise just like the &lt;code&gt;API&lt;/code&gt; would. That way, our
existing &lt;code&gt;error&lt;/code&gt; handler would Just Work™ without any changes.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://emberjs.jsbin.com/tiwapa&quot;&gt;Try it out on JS Bin&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/BrewhouseTeam/ember-auth-example/compare/step-7a...step-7b&quot;&gt;View the diff on Github&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;step-8-adding-the-admin-only-page&quot;&gt;Step 8: Adding the admin-only page&lt;/h2&gt;

&lt;p&gt;Our last task is to add the super-secret, admin-only page.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// router.js&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;Router&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;route&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;login&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;route&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;public&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;route&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;protected&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;route&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;secret&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// routes/secret.js&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;App&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;SecretRoute&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Ember&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Route&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;extend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;beforeModel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;session&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;user&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Ember&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;RSVP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;reject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;Unauthorized&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;Please login to access this page&amp;#39;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;session&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;user.role&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!==&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;admin&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Ember&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;RSVP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;reject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;Forbidden&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;You are not allowed to access this page&amp;#39;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;API&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;secret&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html-handlebars&quot; data-lang=&quot;html+handlebars&quot;&gt;&lt;span class=&quot;c&quot;&gt;{{!-- templates/index.hbs --}}&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;{{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;#if&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;session.user&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;}}&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;h4&amp;gt;&lt;/span&gt;You are logged in as &lt;span class=&quot;cp&quot;&gt;{{&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;session.user.name&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;}}&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;/h4&amp;gt;&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;{{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;/if&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;}}&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;{{&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;#link&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;public&amp;quot;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;}}&lt;/span&gt;Public Page&lt;span class=&quot;cp&quot;&gt;{{&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;/link&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;}}&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;{{&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;#link&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;protected&amp;quot;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;}}&lt;/span&gt;Protected Page&lt;span class=&quot;cp&quot;&gt;{{&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;/link&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;}}&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;{{&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;#link&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;secret&amp;quot;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;}}&lt;/span&gt;Admin-only Page&lt;span class=&quot;cp&quot;&gt;{{&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;/link&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;}}&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html-handlebars&quot; data-lang=&quot;html+handlebars&quot;&gt;&lt;span class=&quot;c&quot;&gt;{{!-- templates/secret.hbs --}}&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;h4&amp;gt;&lt;/span&gt;Admin-only Page&lt;span class=&quot;nt&quot;&gt;&amp;lt;/h4&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;content&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;{{&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;}}&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;{{&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;#link&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;index&amp;quot;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;}}&lt;/span&gt;Go back&lt;span class=&quot;cp&quot;&gt;{{&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;/link&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;}}&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;As you can see, this was quite easy to do; we didn’t really introduce any new
concepts here. We defined a route and the corresponding template, then updated
our index to link to it.&lt;/p&gt;

&lt;p&gt;Just like the &lt;code&gt;ProtectedRoute&lt;/code&gt;, we took advantage of our domain knowledge (this
page is only for admin users) and duplicated the access control checks on the
client, which allowed us to quickly respond without involving the server. This
is an entirely an optional optimization of course – everything would still work
the same way if we removed that check, just a little bit slower.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://emberjs.jsbin.com/nobizu&quot;&gt;Try it out on JS Bin&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/BrewhouseTeam/ember-auth-example/compare/step-7b...step-8&quot;&gt;View the diff on Github&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;step-9-handling-expired-sessions&quot;&gt;Step 9: Handling expired sessions&lt;/h2&gt;

&lt;p&gt;There is one more missing piece before we wrap up – I promised that we will
handled expired sessions, so I guess we still need to implement that. But what
if I tell you we already did? ;)&lt;/p&gt;

&lt;p&gt;Upon encountering an expired session token, our well-mannered sever is going to
respond with a “401 Unauthorized” error. This happens to be the same error it
sends when the user didn’t login at all (if you think about it, they are really
the same thing as far as the server is concerned). This is great, because our
app already knows how to handle it – by redirecting the user to the login page –
which is also exactly what we want here.&lt;/p&gt;

&lt;p&gt;To see it in action, we will add a button to simulate this scenario:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// routes/application.js&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;App&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ApplicationRoute&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Ember&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Route&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;extend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;actions&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;

    &lt;span class=&quot;nx&quot;&gt;expireSession&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;API&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;token&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;expired&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html-handlebars&quot; data-lang=&quot;html+handlebars&quot;&gt;&lt;span class=&quot;c&quot;&gt;{{!-- templates/application.hbs --}}&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;h2&amp;gt;&lt;/span&gt;Ember.js Authentication Example&lt;span class=&quot;nt&quot;&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;

&lt;span class=&quot;cp&quot;&gt;{{&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;outlet&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;}}&lt;/span&gt;

&lt;span class=&quot;cp&quot;&gt;{{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;#if&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;session.user&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;}}&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;p&amp;gt;&amp;lt;button&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;{{&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;action&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;logout&amp;quot;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;}}&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Logout&lt;span class=&quot;nt&quot;&gt;&amp;lt;/button&amp;gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;p&amp;gt;&amp;lt;button&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;{{&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;action&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;expireSession&amp;quot;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;}}&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Force session expiration&lt;span class=&quot;nt&quot;&gt;&amp;lt;/button&amp;gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;{{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;}}&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;{{&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;#link&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;login&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;tagName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;button&amp;quot;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;}}&lt;/span&gt;Login&lt;span class=&quot;cp&quot;&gt;{{&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;/link&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;}}&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;{{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;/if&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;}}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We are simulating the expiration of a session by changing our session token to
&lt;code&gt;expired&lt;/code&gt;, and our mock server will take care of the rest.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://emberjs.jsbin.com/zedeju&quot;&gt;Try it out on JS Bin&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/BrewhouseTeam/ember-auth-example/compare/step-8...step-9a&quot;&gt;View the diff on Github&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We have now introduced a scenario where a user can end up on the login page even
when &lt;code&gt;session.user&lt;/code&gt; isn’t &lt;code&gt;null&lt;/code&gt;. If the user clicks “Cancel”, they will be
redirected to the index page and the app will still behave as if they are logged
in (showing the “Logout” button, etc). This does not pose any security risk
(because the server will keep refusing to serve any content and the user will
just keep hitting the login page), but it would nevertheless make some pretty
confusing user experience.&lt;/p&gt;

&lt;p&gt;To address this, we will make sure we clear the authentication information when
the login route is entered:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// routes/login.js&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;App&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;LoginRoute&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Ember&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Route&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;extend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;beforeModel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;API&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;token&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;session&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;user&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;With that, our job is finally done!&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://emberjs.jsbin.com/cisufu&quot;&gt;Try it out on JS Bin&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/BrewhouseTeam/ember-auth-example/compare/step-9a...step-9b&quot;&gt;View the diff on Github&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;wrapping-up&quot;&gt;Wrapping up&lt;/h2&gt;

&lt;p&gt;It’s time to take a deep breath and relax a little bit. We have come a &lt;em&gt;long&lt;/em&gt;
way, and you have learned a lot.&lt;/p&gt;

&lt;p&gt;It might &lt;em&gt;seem&lt;/em&gt; like a lot of code, but it was actually less than 100 lines of
JavaScript if we exclude the API and comments. In terms of features though, we
definitely did a lot – we wrote a multi “page” JavaScript app that works with
a remote server, handles authentication/authorization, errors, URLs, browser
history and more. We even redirected to the right page after a successful login!&lt;/p&gt;

&lt;p&gt;While most front-end JavaScript frameworks/libraries focuses on a nice API for
individual &lt;em&gt;widgets&lt;/em&gt; (components) on the page (which is important, and arguably
the most common use case!), Ember really shines when it comes to tying these
small pieces together for building full-fleged &lt;em&gt;applications&lt;/em&gt; (Ember does
widgets/components too, but that would be another blog post!).&lt;/p&gt;

&lt;p&gt;I hope this tutorial gives you a taste of the power of the Promise-based Ember
router and how it helps you to build your applications “flow” with minimal
effort – we are barely scratching the surface here.&lt;/p&gt;

&lt;p&gt;Ember.js &lt;em&gt;Promises&lt;/em&gt; to make writing &lt;em&gt;ambitious&lt;/em&gt; client-side applications easy.
&lt;em&gt;Ambitious&lt;/em&gt; is the key here – if you are just looking for a quick widgets
libraries or something to help build a mini app, you might find that there are,
by comparison, more concepts and patterns to learn. But once you get past the
learning… &lt;em&gt;cliff&lt;/em&gt;, you can be &lt;em&gt;really&lt;/em&gt; productive in Ember! (Be sure to check
out how &lt;a href=&quot;https://github.com/BrewhouseTeam/ember-auth-example&quot;&gt;Ember CLI helps you tie these pieces together, too&lt;/a&gt;!)&lt;/p&gt;

&lt;h3 id=&quot;hire-us&quot;&gt;Hire Us!&lt;/h3&gt;

&lt;p&gt;Interested in Ember.js training? Need help building your next &lt;em&gt;ambitious&lt;/em&gt; web
application? &lt;a href=&quot;http://brewhouse.io/#hire-us&quot;&gt;Get in touch&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;P.S. If you are in Vancouver, join us at our regular &lt;a href=&quot;http://meetup.com/Vancouver-Ember-js/&quot;&gt;Ember meetups&lt;/a&gt;!&lt;/p&gt;
</content>

            
              <content type="image" src="http://brewhouse.io/images/brewhouse-symbol-large-200x200.png" />
            
        </entry>
      
    
      
        <entry>
            <title>Lucky Number Seven</title>
            <author>
              <name>Lana Topham</name>
              <email>lana@brewhouse.io</email>
            </author>
            <link href="http://brewhouse.io/2015/01/07/lucky-number-seven.html"/>
            <updated>2015-01-07T17:34:00-08:00</updated>
            <id>http://brewhouse.io/2015/01/07/lucky-number-seven</id>
            <content type="html">&lt;p&gt;We’re excited to announce that the Brewhouse Team has grown to seven!&lt;/p&gt;

&lt;h2 id=&quot;meet-mark&quot;&gt;Meet, Mark.&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;/images/posts/2015/jan/mark.jpg&quot; alt=&quot;Dapper picture of Mark&quot; /&gt;
He’s our new Product Manager.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://twitter.com/markhazlett?lang=en&quot;&gt;Mark&lt;/a&gt; is joining us from Pensio, where he worked as Chief Product Officer and Co-Founder. Originally from Alberta, he started his software career working at Apple in their technical support department. From there he decided to go to school and learn how to code. After that, he started his own gaming company and went to work for 2 top 200 sites (&lt;a href=&quot;http://www.expedia.ca/&quot;&gt;Expedia&lt;/a&gt; and &lt;a href=&quot;http://www.istockphoto.com/&quot;&gt;iStockphoto&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;Let’s learn even more about him!&lt;/p&gt;

&lt;!-- break --&gt;

&lt;p&gt;&lt;em&gt;&lt;strong&gt;Q:&lt;/strong&gt; What appealed to you about Brewhouse? Why did you want to work here?&lt;/em&gt;
&lt;br /&gt;&lt;strong&gt;A:&lt;/strong&gt; Company culture is king and Brewhouse has created an amazing culture.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;strong&gt;Q:&lt;/strong&gt; What do you consider one of your greatest accomplishments?&lt;/em&gt;
&lt;br /&gt;&lt;strong&gt;A:&lt;/strong&gt; Built iPhone/iPad apps that have been downloaded and used by over a million people.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;strong&gt;Q:&lt;/strong&gt; Looking out 3 &amp;#8211; 5 years, beyond the obvious trends, what do you think will be the next big change in our industry? &lt;/em&gt;
&lt;br /&gt;&lt;strong&gt;A:&lt;/strong&gt; I think drones are going to be the next big trend. It’s expected to be a 1B market by 2018 and we’re going to see some applications we haven’t even thought of yet.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;strong&gt;Q:&lt;/strong&gt; What is the most embarrassing professional screw up you’ve had? What did you learn from it?&lt;/em&gt;
&lt;br /&gt;&lt;strong&gt;A:&lt;/strong&gt; When I got my first programming job, I created a model framework for the Zend PHP framework. When I was writing the update attributes method I accidentally overwrote the entire user database and changed all 200k users first/last names to my name. Luckily it was only the development database and we were able to revert it back to a known good state. I learned how important it is to properly test your code.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;strong&gt;Q:&lt;/strong&gt; What publications or blogs do you read?&lt;/em&gt;
&lt;br /&gt;&lt;strong&gt;A:&lt;/strong&gt; I normally read Hacker News, Designer News and Growth Hackers on a daily basis.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;strong&gt;Q:&lt;/strong&gt; What&amp;#8217;s your favourite &lt;/em&gt;twitter&lt;em&gt; handle to follow. And why?&lt;/em&gt;
&lt;br /&gt;&lt;strong&gt;A:&lt;/strong&gt; &lt;a href=&quot;https://twitter.com/pmarca&quot; target=&quot;_blank&quot;&gt;@pmarca&lt;/a&gt; &amp;#8211; He has fantastic advice for entrepreneurs. Reading his tweetstorm’s will make you a better entrepreneur.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;strong&gt;Q:&lt;/strong&gt; Favourite Quote&lt;/em&gt;
&lt;br /&gt;&lt;strong&gt;A:&lt;/strong&gt; The Holstee Manifesto

&lt;br /&gt;
&lt;img src=&quot;/images/posts/2015/jan/Holstee-Manifesto.jpg&quot; /&gt;
&lt;br /&gt;

Read the full manifesto &lt;a href=&quot;https://www.holstee.com/pages/manifesto&quot; target=&quot;_blank&quot;&gt;HERE&lt;/a&gt;.
&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;strong&gt;Q:&lt;/strong&gt; How would your friends describe you in one word.&lt;/em&gt;
&lt;br /&gt;&lt;strong&gt;A:&lt;/strong&gt; Ambitious&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;strong&gt;Q:&lt;/strong&gt; And since you&amp;#8217;re a Brewhouser&lt;/em&gt; &lt;em&gt;now, we need to know, how &lt;/em&gt;you do&lt;em&gt; like your coffee?&lt;/em&gt;
&lt;br /&gt;&lt;strong&gt;A:&lt;/strong&gt; &lt;a href=&quot;http://cupandbrew.com/blogs/cupandbrew-blog/9982689-pare-down-your-caffeine-and-increase-your-dairy-with-an-antoccino&quot; target=&quot;_blank&quot;&gt;Antoccino&lt;/a&gt; &amp;#8211; 1:1 ratio of steamed milk and espresso.&lt;/p&gt;

&lt;h2 id=&quot;marks-expertise&quot;&gt;Mark’s Expertise&lt;/h2&gt;

&lt;p&gt;Mark will be working on web based projects and starting to work on early mobile based applications (Goodbits!). His ability to create stellar wireframing + design early in the product development process makes him an asset.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Are you interested in our upcoming apprenticeship program?&lt;/strong&gt; Fill in &lt;a href=&quot;https://docs.google.com/forms/d/1qOBRQUHQKhpvDFpBHmN_yIcmNl7P-2RcaNk6Wiwz47Y/viewform&quot;&gt;your details here&lt;/a&gt; and we’ll let you know when we launch it.&lt;/p&gt;
</content>

            
              <content type="image" src="http://brewhouse.io/images/posts/2015/jan/mark-square.jpg" />
            
        </entry>
      
    
      
        <entry>
            <title>Brewhouse 2014 - by the numbers</title>
            <author>
              <name>Philippe Creux</name>
              <email>philippe@brewhouse.io</email>
            </author>
            <link href="http://brewhouse.io/blog/2014/12/30/brewhouse-2014-by-the-numbers.html"/>
            <updated>2014-12-30T08:00:00-08:00</updated>
            <id>http://brewhouse.io/blog/2014/12/30/brewhouse-2014-by-the-numbers</id>
            <content type="html">&lt;h2 class=&quot;brewhouse-numbers&quot; id=&quot;new-hires&quot;&gt;
  &lt;span class=&quot;headline--numerals&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;headline--alphas&quot;&gt;new hires&lt;/span&gt;
&lt;/h2&gt;

&lt;p&gt;Brewhouse was founded in January 2014 by
&lt;a href=&quot;https://twitter.com/ChuckBergeron&quot;&gt;Chuck&lt;/a&gt;,
&lt;a href=&quot;https://twitter.com/chancancode&quot;&gt;Godfrey&lt;/a&gt;,
&lt;a href=&quot;https://twitter.com/kalv&quot;&gt;Kalv&lt;/a&gt; and
&lt;a href=&quot;https://twitter.com/pcreux&quot;&gt;Philippe&lt;/a&gt;.
&lt;br /&gt;
&lt;a href=&quot;https://twitter.com/gabescholz&quot;&gt;Gabe&lt;/a&gt;
and
&lt;a href=&quot;https://twitter.com/mstopham&quot;&gt;Lana&lt;/a&gt;
joined us along the way and &lt;a href=&quot;https://twitter.com/markhazlett&quot;&gt;Mark&lt;/a&gt;
has just started this week!&lt;/p&gt;

&lt;h2 class=&quot;brewhouse-numbers&quot; id=&quot;events&quot;&gt;
  &lt;span class=&quot;headline--numerals&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;headline--alphas&quot;&gt;events&lt;/span&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/2014/Dec/boohouse.gif&quot; alt=&quot;boohouse&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We started with &lt;em&gt;Cocktails&lt;/em&gt;, we then hosted the &lt;em&gt;&lt;a href=&quot;http://vanruby.org&quot;&gt;Vanruby&lt;/a&gt; Summer BBQ&lt;/em&gt;,
we became &lt;em&gt;Boohouse&lt;/em&gt; for Halloween and we collected non-perishable goods for the
food bank at the &lt;em&gt;Mouthy Mixer&lt;/em&gt;.&lt;/p&gt;

&lt;h2 class=&quot;brewhouse-numbers&quot; id=&quot;conferences&quot;&gt;
  &lt;span class=&quot;headline--numerals&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;headline--alphas&quot;&gt;conferences&lt;/span&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/2014/Dec/conferences.jpg&quot; alt=&quot;conferences&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We’ve attended
&lt;a href=&quot;http://2014.emberconf.com/&quot;&gt;Ember conf&lt;/a&gt; in Portland,
&lt;a href=&quot;http://www.railsconf.com/&quot;&gt;Rails conf&lt;/a&gt; in Chicago,
&lt;a href=&quot;http://www.polyglotconf.com/&quot;&gt;Polyglot (un)conf&lt;/a&gt; in Vancouver,
&lt;a href=&quot;http://rubykaigi.org/2014&quot;&gt;Ruby Kaigi&lt;/a&gt; in Tokyo,
and
&lt;a href=&quot;http://rubyconf.org/&quot;&gt;Ruby conf&lt;/a&gt; in San Diego!&lt;/p&gt;

&lt;h2 class=&quot;brewhouse-numbers&quot; id=&quot;clients&quot;&gt;
  &lt;span class=&quot;headline--numerals&quot;&gt;12&lt;/span&gt; &lt;span class=&quot;headline--alphas&quot;&gt;clients&lt;/span&gt;
&lt;/h2&gt;

&lt;!-- break --&gt;

&lt;p&gt;We had the chance to work with &lt;a href=&quot;/#clients&quot;&gt;12 great
clients&lt;/a&gt;.
We’ve built MLPs (Minimal &lt;em&gt;Lovable&lt;/em&gt; Products). We’ve improved
codebases (read, &lt;a href=&quot;/blog/2014/11/10/healthy-codebase-and-preparatory-refactoring.html&quot;&gt;performance&lt;/a&gt;). We’ve delivered
complete libraries and products.
Being exposed to so many talented teams was just fabulous!&lt;/p&gt;

&lt;h2 class=&quot;brewhouse-numbers&quot; id=&quot;blog-posts&quot;&gt;
  &lt;span class=&quot;headline--numerals&quot;&gt;15&lt;/span&gt; &lt;span class=&quot;headline--alphas&quot;&gt;blog posts&lt;/span&gt;
&lt;/h2&gt;

&lt;p&gt;They have been read by &lt;strong&gt;75,000&lt;/strong&gt; people who left &lt;strong&gt;85&lt;/strong&gt; comments.
The most popular
ones are
&lt;a href=&quot;/blog/2013/12/17/whats-new-in-rails-4-1.html&quot;&gt;What’s new in Rails
4.1&lt;/a&gt;,
&lt;a href=&quot;/blog/2014/04/30/gourmet-service-objects.html&quot;&gt;Gourmet Service Objects&lt;/a&gt; and
&lt;a href=&quot;/blog/2014/11/04/big-data-with-elk-stack.html&quot;&gt;Big Data with Elastic
Search&lt;/a&gt;.&lt;/p&gt;

&lt;h2 class=&quot;brewhouse-numbers&quot; id=&quot;creative-fridays&quot;&gt;
  &lt;span class=&quot;headline--numerals&quot;&gt;24&lt;/span&gt; &lt;span class=&quot;headline--alphas&quot;&gt;(lightning) talks&lt;/span&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/2014/Dec/talk.jpg&quot; alt=&quot;godfrey-talk&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We spoke about Ruby, Angular, Rails, Ember, Application / Database Performance, and
how to run start-ups at local events and conferences.&lt;/p&gt;

&lt;h2 class=&quot;brewhouse-numbers&quot; id=&quot;lbs-of-non-perishable-goods-donated&quot;&gt;
  &lt;span class=&quot;headline--numerals&quot;&gt;25&lt;/span&gt; &lt;span class=&quot;headline--alphas&quot;&gt;lbs. of non-perishable goods donated&lt;/span&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/2014/Dec/food-bank.jpg&quot; alt=&quot;food-bank&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The terrific &lt;a href=&quot;http://www.startups-care.com&quot;&gt;Startups Care&lt;/a&gt; initiative.&lt;/p&gt;

&lt;h2 class=&quot;brewhouse-numbers&quot; id=&quot;creative-fridays&quot;&gt;
  &lt;span class=&quot;headline--numerals&quot;&gt;40&lt;/span&gt; &lt;span class=&quot;headline--alphas&quot;&gt;creative fridays&lt;/span&gt;
&lt;/h2&gt;

&lt;p&gt;Fridays are about everything but client work:
we &lt;a href=&quot;https://github.com/rails/rails/commits?author=chancancode&quot;&gt;contribute to open source&lt;/a&gt;,
we send &lt;a href=&quot;http://rails-weekly.goodbits.io/archive/&quot;&gt;This Week In Rails&lt;/a&gt;,
we write &lt;a href=&quot;/blog&quot;&gt;blog posts&lt;/a&gt;,
we work on side projects such as &lt;a href=&quot;http://brewhouse.io/2014/06/27/say-hello-to-roundup-roger.html&quot;&gt;Roundup
Roger&lt;/a&gt;,
and more!&lt;/p&gt;

&lt;h2 class=&quot;brewhouse-numbers&quot; id=&quot;leads&quot;&gt;
  &lt;span class=&quot;headline--numerals&quot;&gt;45&lt;/span&gt; &lt;span class=&quot;headline--alphas&quot;&gt;leads&lt;/span&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/2014/Dec/leads.jpg&quot; alt=&quot;leads&quot; /&gt;&lt;/p&gt;

&lt;p&gt;12 became clients.&lt;/p&gt;

&lt;h2 class=&quot;brewhouse-numbers&quot; id=&quot;client-iterations&quot;&gt;
  &lt;span class=&quot;headline--numerals&quot;&gt;50&lt;/span&gt; &lt;span class=&quot;headline--alphas&quot;&gt;T-shirts shipped&lt;/span&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/2014/Dec/tshirts.jpg&quot; alt=&quot;tshirts&quot; /&gt;&lt;/p&gt;

&lt;h2 class=&quot;brewhouse-numbers&quot; id=&quot;client-iterations&quot;&gt;
  &lt;span class=&quot;headline--numerals&quot;&gt;88&lt;/span&gt; &lt;span class=&quot;headline--alphas&quot;&gt;client iterations&lt;/span&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/2014/Dec/week.jpg&quot; alt=&quot;week&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We offer 4 day iterations to our clients. That’s 4 full days (Monday to
Thursday) dedicated to client work. Friday can be used as a
buffer to cover statutory holidays or sick days.&lt;/p&gt;

&lt;h2 class=&quot;brewhouse-numbers&quot; id=&quot;cookies&quot;&gt;
  &lt;span class=&quot;headline--numerals&quot;&gt;100&lt;/span&gt; &lt;span class=&quot;headline--alphas&quot;&gt;cookies&lt;/span&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/2014/Dec/cookies.jpg&quot; alt=&quot;cookies&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Yes. Ruby Cookies.&lt;/p&gt;

&lt;h2 class=&quot;brewhouse-numbers&quot; id=&quot;product-iterations&quot;&gt;
  &lt;span class=&quot;headline--numerals&quot;&gt;104&lt;/span&gt; &lt;span class=&quot;headline--alphas&quot;&gt;product iterations&lt;/span&gt;
&lt;/h2&gt;

&lt;p&gt;To keep things simple, we plan product work like client work: 4 day iterations.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/2014/Dec/client-vs-product.jpg&quot; alt=&quot;product-vs-client&quot; /&gt;&lt;/p&gt;

&lt;h2 class=&quot;brewhouse-numbers&quot; id=&quot;square-feet&quot;&gt;
  &lt;span class=&quot;headline--numerals&quot;&gt;1,400&lt;/span&gt; &lt;span class=&quot;headline--alphas&quot;&gt;square feet&lt;/span&gt;
&lt;/h2&gt;

&lt;p&gt;We loved sharing space at &lt;a href=&quot;http://chloi.io&quot;&gt;ChloiHQ&lt;/a&gt;, however more resources means more space. In
August we found a comfy office space to call our own.&lt;/p&gt;

&lt;h2 class=&quot;brewhouse-numbers&quot; id=&quot;visits-to-brewhouseio&quot;&gt;
  &lt;span class=&quot;headline--numerals&quot;&gt;84,822&lt;/span&gt; &lt;span class=&quot;headline--alphas&quot;&gt;visits to brewhouse.io&lt;/span&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/2014/Dec/visits.png&quot; alt=&quot;visits&quot; /&gt;&lt;/p&gt;

&lt;p&gt;While the landing page accounted for &lt;strong&gt;10,000&lt;/strong&gt; visits, our blog posts
brought a smashing &lt;strong&gt;75,000&lt;/strong&gt; unique visitors.&lt;/p&gt;

&lt;h2 class=&quot;brewhouse-numbers&quot; id=&quot;average-annual-salary&quot;&gt;
  &lt;span class=&quot;headline--numerals&quot;&gt;$85,000&lt;/span&gt; &lt;span class=&quot;headline--alphas&quot;&gt;average annual salary&lt;/span&gt;
&lt;/h2&gt;

&lt;p&gt;We offer what we believe is a competitive Vancouver market rate salary.&lt;/p&gt;

&lt;h2 class=&quot;brewhouse-numbers&quot; id=&quot;in-bank&quot;&gt;
  &lt;span class=&quot;headline--numerals&quot;&gt;$100,000&lt;/span&gt; &lt;span class=&quot;headline--alphas&quot;&gt;in the bank&lt;/span&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/2014/Dec/money.jpg&quot; alt=&quot;money&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Initial investment from &lt;a href=&quot;http://fullstack.ca/&quot;&gt;FullStack&lt;/a&gt;: &lt;strong&gt;+$100,000&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;Income from client work: &lt;strong&gt;+$335,000&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.nrc-cnrc.gc.ca/eng/irap/index.html&quot;&gt;IRAP&lt;/a&gt; contributions: &lt;strong&gt;+$55,000&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;Salaries: &lt;strong&gt;-$310,000&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;Other expenses: &lt;strong&gt;-$80,000&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 class=&quot;brewhouse-numbers&quot;&gt;
  &lt;span class=&quot;headline--numerals&quot;&gt;2015&lt;/span&gt; &lt;span class=&quot;headline--alphas&quot;&gt;here we come!&lt;/span&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
</content>

            
              <content type="image" src="http://brewhouse.io/images/posts/2014/Dec/client-vs-product.jpg" />
            
        </entry>
      
    
      
        <entry>
            <title>Authentication made simple in Single Page AngularJS Applications</title>
            <author>
              <name>Gabe Scholz</name>
              <email>gabe@brewhouse.io</email>
            </author>
            <link href="http://brewhouse.io/blog/2014/12/09/authentication-made-simple-in-single-page-angularjs-applications.html"/>
            <updated>2014-12-09T08:00:00-08:00</updated>
            <id>http://brewhouse.io/blog/2014/12/09/authentication-made-simple-in-single-page-angularjs-applications</id>
            <content type="html">&lt;p&gt;The following is a login pattern that I’ve been using in all of my single page AngularJS applications (SPA). We recently introduced it into a client project at Brewhouse, so I thought I would share.&lt;/p&gt;

&lt;p&gt;Login on an SPA can be tough and it’s important that your integration doesn’t interfere with the flow of your application. It can become a crutch if you’re not really sure whether the user is
authenticated and resorting to explicit checks all over the place. Here we lay the groundwork for a login modal that is called implicitly only when it’s needed, without almost any knowledge from the rest of the application.&lt;/p&gt;

&lt;!-- break --&gt;

&lt;h2 id=&quot;the-conditions&quot;&gt;The conditions&lt;/h2&gt;

&lt;p&gt;There are only three points in the application where the login modal should appear:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;When I’m on a welcome page and I click “Login”.&lt;/li&gt;
  &lt;li&gt;When I am not logged in and I attempt to visit a page that requires login, &lt;em&gt;e.g.&lt;/em&gt; my profile page.&lt;/li&gt;
  &lt;li&gt;When I attempt to make a request that requires a login, &lt;em&gt;e.g.&lt;/em&gt; my session has expired whilst I’m attempting to post something.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;We will ignore the first condition as it is trivial.&lt;/p&gt;

&lt;h2 id=&quot;determining-which-pages-require-a-logged-in-user&quot;&gt;Determining which pages require a logged in user&lt;/h2&gt;

&lt;p&gt;There are many advantages to using &lt;code&gt;ui-router&lt;/code&gt; over &lt;code&gt;ngRoute&lt;/code&gt; and in this case we will be taking advantage of how we can attach additional properties to a route and how those properties will cascade
down to the children of that route. In the following code, we make sure to set a &lt;code&gt;requireLogin&lt;/code&gt; property for each state.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// routes.js&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$stateProvider&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;$stateProvider&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;welcome&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;/welcome&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;requireLogin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;app&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;kr&quot;&gt;abstract&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;requireLogin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// this property will apply to all children of &amp;#39;app&amp;#39;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;app.dashboard&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;// child state of `app`&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;// requireLogin === true&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Clearly, for routes that do not require a login we set &lt;code&gt;requireLogin&lt;/code&gt; to false. We could leave this &lt;code&gt;undefined&lt;/code&gt;, but I prefer to show my intent.&lt;/p&gt;

&lt;h2 id=&quot;capturing-attempted-state-changes&quot;&gt;Capturing attempted state changes&lt;/h2&gt;

&lt;p&gt;At this point, we can start capturing attempted state changes and inspecting them for our &lt;code&gt;requireLogin&lt;/code&gt; property. The following shows how we are going to subscribe to &lt;code&gt;ui-router&lt;/code&gt;’s &lt;code&gt;$stateChangeStart&lt;/code&gt; event.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// app.js&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$rootScope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;$rootScope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$on&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;$stateChangeStart&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;toState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;toParams&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;requireLogin&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;toState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;requireLogin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;requireLogin&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;typeof&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$rootScope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;currentUser&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;undefined&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;preventDefault&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;// get me a login modal!&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;As you can see, if the route requires a login and &lt;code&gt;$rootScope.currentUser&lt;/code&gt; is not yet set, we will prevent the attempted state change and show the modal. (I prefer to attach the &lt;code&gt;currentUser&lt;/code&gt; to the &lt;code&gt;$rootScope&lt;/code&gt; only because it’s an application-wide
concept. All new scopes will inherit the &lt;code&gt;currentUser&lt;/code&gt; property and I can always call it from the view. Whether or not you choose to do the same is for another discussion.)&lt;/p&gt;

&lt;p&gt;Additionally, it should be noted that I won’t be covering how you might store or retrieve the &lt;code&gt;currentUser&lt;/code&gt; between page refreshes.&lt;/p&gt;

&lt;h2 id=&quot;building-the-loginmodal-service&quot;&gt;Building the loginModal service&lt;/h2&gt;

&lt;p&gt;In this post, I will wrap the &lt;a href=&quot;http://angular-ui.github.io/bootstrap/#/modal&quot;&gt;AngularUI Bootstrap Modal&lt;/a&gt;; however, you can use any modal library - I have even used the same pattern in an &lt;a href=&quot;http://ionicframework.com/&quot;&gt;ionic&lt;/a&gt; app
with the &lt;code&gt;$ionicModal&lt;/code&gt; service. An important caveat here is that we must be able to tell the modal what to do after authentication is successful or cancelled. Preferably this is done with a promise, so that
multiple actions can be chained together. These are anonymous functions that we will use to re-submit state changes and requests after authenticating. The following is a example of how I might write such a wrapper for the &lt;code&gt;$modal&lt;/code&gt; service.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// loginModal.js&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;service&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;loginModal&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$modal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$rootScope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;assignCurrentUser&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;$rootScope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;currentUser&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$modal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;templateUrl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;views/loginModalTemplate.html&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;controller&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;LoginModalCtrl&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;controllerAs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;LoginModalCtrl&amp;#39;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;instance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;assignCurrentUser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;There isn’t much magic in this service. It’s important to point out that &lt;code&gt;$modal.open&lt;/code&gt; returns a promise which is either resolved or rejected when the modal is closed or dismissed. When a scope is instantiated for the
&lt;code&gt;LoginModalCtrl&lt;/code&gt;, the &lt;code&gt;$close()&lt;/code&gt; and &lt;code&gt;$dismiss()&lt;/code&gt; methods are attached to it.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// LoginModalCtrl.js&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;controller&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;LoginModalCtrl&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;UsersApi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cancel&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$dismiss&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;submit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;email&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;UsersApi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;login&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;email&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;$scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$close&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;After a successful login, the modal is closed, the &lt;code&gt;$rootScope.currentUser&lt;/code&gt; is set, and the on success action will be triggered. If the user clicks the cancel button or attempts to click away from the modal, the on cancel action will step in.&lt;/p&gt;

&lt;h2 id=&quot;checking-in-with-the-state-change&quot;&gt;Checking in with the state change&lt;/h2&gt;

&lt;p&gt;At this point the &lt;code&gt;loginModal&lt;/code&gt; can be added to the event listener. What makes this approach so slick is being able to capture the desired state transitions in anonymous functions. After authenticating, the SPA will implicitly redirect to the requested state as you would expect with a traditional web app. Additionally, notice how we will redirect to the welcome screen if a dismissal happens.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// app.js&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$rootScope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;loginModal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;$rootScope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$on&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;$stateChangeStart&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;toState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;toParams&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;requireLogin&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;toState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;requireLogin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;requireLogin&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;typeof&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$rootScope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;currentUser&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;undefined&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;preventDefault&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

      &lt;span class=&quot;nx&quot;&gt;loginModal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;go&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;toParams&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;go&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;welcome&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;handling-unauthorized-requests&quot;&gt;Handling unauthorized requests&lt;/h2&gt;

&lt;p&gt;Storing a &lt;code&gt;currentUser&lt;/code&gt; on the client for the lifetime of an SPA is not without its challenges. Data that is persisted in memory may become out of sync with the server and a &lt;code&gt;401&lt;/code&gt; will mean your client-side authentication
is no longer valid. Perhaps the session has expired or perhaps you were never logged in to begin with. This is obviously a good time to capture the request params and show the login modal.&lt;/p&gt;

&lt;p&gt;AngularJS makes &lt;em&gt;intercepting&lt;/em&gt; incoming responses pretty easy with &lt;em&gt;interceptors&lt;/em&gt;. Below we call the login modal when we receive a &lt;code&gt;401&lt;/code&gt; response. (For the sake of brevity, we’ll assume that a &lt;code&gt;401&lt;/code&gt; is the only precondition required to verify that a user is not logged in.)&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// app.js&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$httpProvider&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;$httpProvider&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;interceptors&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$timeout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$q&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$injector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;loginModal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$http&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// this trick must be done so that we don&amp;#39;t receive&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// `Uncaught Error: [$injector:cdep] Circular dependency found`&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;$timeout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;loginModal&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$injector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;loginModal&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;$http&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$injector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;$http&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;$state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$injector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;$state&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;responseError&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;rejection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;rejection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;status&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;401&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rejection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;deferred&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$q&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;defer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

        &lt;span class=&quot;nx&quot;&gt;loginModal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;deferred&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;resolve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$http&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;rejection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;$state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;go&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;welcome&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;deferred&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;reject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;rejection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;deferred&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;promise&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;With this code, a &lt;code&gt;401&lt;/code&gt; rejected request will be re-submitted when a successful authentication occurs. In fact, the entity that made the original request will hang until our secondary request is completed. It’s completely oblivious to the fact that the original request was even rejected!&lt;/p&gt;

&lt;h2 id=&quot;conclusions&quot;&gt;Conclusions&lt;/h2&gt;

&lt;p&gt;If you’re not totally &lt;a href=&quot;http://media.giphy.com/media/sWBOpINwXnW7K/giphy.gif&quot;&gt;jacked up&lt;/a&gt; right now, I feel bad for you. The modal is so clean and separated. It’s effectively a black box. What more could you want? The use of anonymous callbacks to capture the user’s intent is key to this approach. With very little code we’ve integrated a login modal that is almost completely detatched from the rest of our application, helping to minimize the number of moving parts required for authentication.&lt;/p&gt;

&lt;p&gt;Please let us know what you think. Do you have suggestions for how this could be improved further? &lt;a href=&quot;http://twitter.com/gabescholz&quot;&gt;Tweet at me&lt;/a&gt; or &lt;a href=&quot;http://twitter.com/BrewhouseTeam&quot;&gt;at us&lt;/a&gt; or leave a comment below.&lt;/p&gt;

&lt;p&gt;Special thanks to Godfrey Chan, Philippe Creux and Lana Topham for leaving feedback during the drafting of this post.&lt;/p&gt;

&lt;h4 id=&quot;edit-december-29-2014&quot;&gt;Edit: December 29, 2014&lt;/h4&gt;

&lt;p&gt;As per a few requests, here is what a simple &lt;code&gt;views/loginModalTemplate.html&lt;/code&gt; might look like. I hope it helps to answer some questions.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- views/loginModalTemplate.html --&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;form&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ng-submit=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;LoginModalCtrl.submit(_email, _password)&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;input&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;email&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ng-model=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;_email&amp;quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;input&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;password&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ng-model=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;_password&amp;quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;button&amp;gt;&lt;/span&gt;Submit&lt;span class=&quot;nt&quot;&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;button&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ng-click=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;LoginModalCtrl.cancel()&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Cancel&lt;span class=&quot;nt&quot;&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h4 id=&quot;edit-feburary-12-2015&quot;&gt;Edit: Feburary 12, 2015&lt;/h4&gt;

&lt;p&gt;Godfrey did a write-up about &lt;a href=&quot;http://brewhouse.io/blog/2015/02/12/ember-vs-angular-authentication&quot;&gt;implemented the same thing using Ember.js&lt;/a&gt;
to help compare the two frameworks. If you enjoyed this blog post, you might
like that too!&lt;/p&gt;
</content>

            
              <content type="image" src="http://brewhouse.io/images/brewhouse-symbol-large-200x200.png" />
            
        </entry>
      
    
      
        <entry>
            <title>RubyConf 2014 - The human bits</title>
            <author>
              <name>Philippe Creux</name>
              <email>philippe@brewhouse.io</email>
            </author>
            <link href="http://brewhouse.io/blog/2014/11/20/rubyconf-2014-the-human-bits.html"/>
            <updated>2014-11-20T08:00:00-08:00</updated>
            <id>http://brewhouse.io/blog/2014/11/20/rubyconf-2014-the-human-bits</id>
            <content type="html">&lt;p&gt;&lt;img src=&quot;/images/posts/2014/Nov/ruby-conf.jpg&quot; alt=&quot;ruby-conf-logo&quot; /&gt;&lt;/p&gt;

&lt;p&gt;There were tons of great technical talks at &lt;a href=&quot;http://rubyconf.org/&quot;&gt;Rubyconf 2014&lt;/a&gt;: performance, testing, architecture, new frameworks and new language features. However, &lt;a href=&quot;https://twitter.com/yukihiro_matz&quot;&gt;Matz&lt;/a&gt; kicked off the conference from a different perspective: he described the Ruby community being made of sharks who need to be fed with new shiny stuff. Otherwise we may lose interest and move away from Ruby. I’d rather be a dolphin, or a unicorn. But in the end I was quite excited (as a shark might be) to hear about Ruby 3.0.&lt;/p&gt;

&lt;!-- break --&gt;

&lt;h3 id=&quot;in-open-source-no-one-can-hear-you-scream----justin-searls&quot;&gt;“In open-source, no one can hear you scream” – Justin Searls&lt;/h3&gt;

&lt;p&gt;In “&lt;a href=&quot;https://speakerdeck.com/searls/the-social-coding-contract&quot;&gt;The social coding contract&lt;/a&gt;”, &lt;a href=&quot;https://twitter.com/searls&quot;&gt;Justin Searls&lt;/a&gt; didn’t depict the ruby community as a happy people singing in harmony “MINASWAN” (“Matz Is Nice And So We Are Nice”). “Late adopters [of open source projects] often behave as consumers”.&lt;/p&gt;

&lt;p&gt;Here is the story of a typical open source project: You google for a ruby gem (i.e. a SOAP client for Ruby). You can’t find it so you make one and release it. Other people with the same need start using it and submit a few patches. Your library is becoming quite popular, it feels so great to see other people use your stuff! After a couple of months, things start to change. You get less contributions. You get more requests to fix bugs and add features from late adopters. These late adopters are often not really cooperative, and you can be left feeling that they don’t value your efforts. You are then likely to get overwhelmed by trolls and rants.&lt;/p&gt;

&lt;p&gt;Justin insists on the fact that maintainers should learn to say “No”, otherwise they may burn out. And he adds: “In open-source, no one can hear you scream”. We can fix this by going beyond emails and GitHub comments using video chat to pair with people. The lack of real human interaction is what makes trolling a thing. He adds that people don’t seem to get to a consensus on Twitter, and it seems they have a better time when they speak to each other.&lt;/p&gt;

&lt;h3 id=&quot;languages-are-not-only-tools-to-communicate-but-also-to-think----randy-coulman&quot;&gt;“Languages are not only tools to communicate but also to think” – Randy Coulman&lt;/h3&gt;

&lt;p&gt;Speaking of language, &lt;a href=&quot;https://twitter.com/randycoulman&quot;&gt;Randy Coulman&lt;/a&gt; points out that “languages are not only tools to communicate but also to think”. Language influences our thoughts and learning new languages increases our “solution space”. This solution space can greatly benefit from mathematics.&lt;/p&gt;

&lt;h3 id=&quot;if-you-can-write-a-program-you-are-good-at-mathematic----tom-stuart&quot;&gt;“If you can write a program, you are good at mathematic” – Tom Stuart&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://twitter.com/tomstuart&quot;&gt;Tom Stuart&lt;/a&gt; did a brilliant talk where he demonstrated how mathematics are not about greek symbols, numbers,  and formulas to learn by heart but instead that mathematics are abstractions used to solve problems. When we find an honest and minimal abstraction to a problem, we can solve it in interesting, simpler ways. And even if we don’t want to hear it, he believes that “if you can write a program, you are good at mathematics”.&lt;/p&gt;

&lt;h3 id=&quot;your-future-is-decay-and-obsolescence----sandy-metz&quot;&gt;“Your future is Decay and Obsolescence” – Sandy Metz&lt;/h3&gt;

&lt;p&gt;And mathematics could be what saves us in the long run, since &lt;a href=&quot;https://twitter.com/sandimetz&quot;&gt;Sandy Metz&lt;/a&gt; told us that our future is Decay and Obsolescence. After inviting us to take 30 seconds to introduce ourselves to the people around us, she brought us along on a journey where we learned about the history of scrolls, codex, books, press and &lt;a href=&quot;http://en.wikipedia.org/wiki/Linotype_machine&quot;&gt;Linotype&lt;/a&gt;. Her dad worked on Linotypes for decades and he would “never ever have clean hands”. The Linotype was used to print newspapers until the late 70s. Almost overnight, newspaper switched from the Linotype to modern printers. And her dad had to move on.&lt;/p&gt;

&lt;p&gt;We work in IT, but most of what we do relies on the web. It’s been around for only 20 years and our jobs depend on it. So from there, Madame Sandy told us our future: “Everything will change. The first thing is that you’ll die. And everybody you know will die”. People we love will die. It will be hard. Death, decay and obsolescence is our future. Along the way, our body will fail us. We will develop low back trouble. Our job will change as well.&lt;/p&gt;

&lt;p&gt;What really matters is happiness, health and the world we leave to our children. &lt;strong&gt;Happiness&lt;/strong&gt;, do real things and tell the ones you love that you love them. &lt;strong&gt;Health&lt;/strong&gt;, get some exercise, take care of your body. &lt;strong&gt;Community&lt;/strong&gt;, we can contribute to open-source but we are bigger than Rails and Ruby so we should also teach, do things for others and help the ones who need it the most.&lt;/p&gt;

&lt;h3 id=&quot;we-deserve-our-success-but-we-are-lucky-enough-to-have-the-wind-in-our-back----sandy-metz&quot;&gt;“We deserve our success but we are lucky enough to have the wind in our back.” – Sandy Metz&lt;/h3&gt;

&lt;p&gt;Several speakers brought humanity and community to their talks. They helped us step back, see the big picture and keep in mind what is really important. Ruby conferences gather Ruby developers in the same place for a couple of days. We learn new practices and discover new tools but the most vibrant memories we have happen in the hallway or during the 5K run, Karaoke, Birds of a Feather, drinks and social ice-cream. Those memories are the social interactions. This is how we take care of our community.&lt;/p&gt;
</content>

            
              <content type="image" src="http://brewhouse.io/images/posts/2014/Nov/rubyconf-logo.png" />
            
        </entry>
      
    
      
        <entry>
            <title>Healthy Codebase and Preparatory Refactoring</title>
            <author>
              <name>Philippe Creux</name>
              <email>philippe@brewhouse.io</email>
            </author>
            <link href="http://brewhouse.io/blog/2014/11/10/healthy-codebase-and-preparatory-refactoring.html"/>
            <updated>2014-11-10T08:00:00-08:00</updated>
            <id>http://brewhouse.io/blog/2014/11/10/healthy-codebase-and-preparatory-refactoring</id>
            <content type="html">&lt;p&gt;In a &lt;a href=&quot;http://devchat.tv/ruby-rogues/178-rr-book-club-refactoring-ruby-with-martin-fowler&quot;&gt;recent episode of the RubyRogues podcast&lt;/a&gt;, &lt;a href=&quot;http://martinfowler.com&quot;&gt;Martin Fowler&lt;/a&gt; and &lt;a href=&quot;https://twitter.com/jessitron&quot;&gt;Jessica Kerr&lt;/a&gt; literally spoke my mind. They named two concepts that I deeply believe in and care about: Healthy Codebase and Preparatory Refactoring. The fact that they have expressed them in beautiful words and powerful metaphors enables me to share them with you in this article.&lt;/p&gt;

&lt;!-- break --&gt;

&lt;p&gt;After 43 minutes of discussions on the steps of refactoring, Martin introduced the concept of Healthy Codebase.&lt;/p&gt;

&lt;p&gt;“&lt;em&gt;A healthy codebase allows you to keep going fast. You’re slowed down by having stuff that’s unclear.&lt;/em&gt;”, says Martin. &lt;em&gt;“The analogy is often made between code and writing. And of course, this is part of the theme of &lt;a href=&quot;http://www.confreaks.com/videos/3315-railsconf-keynote-writing-software&quot;&gt;David’s RailsConf talk&lt;/a&gt; that was so controversial, that he thinks of code not as mathematics but as writing. And I’m very much in agreement with him on this. But that has a consequence which says that if code is writing, it means you have to put a lot of effort into making it clear. And ask any good rewriter what they do most of the time, and it’s rewriting.”&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;We have to realize that unclear code slows us down. It is &lt;em&gt;“an economic judgment”&lt;/em&gt; that code quality results in speed. So the &lt;em&gt;“Code quality versus Speed”&lt;/em&gt; is nonsense.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;“Many times, I run into teams that say: ‘Management isn’t allowing us to do a quality job here because it will slow us down. And we’ve appealed to management and said we need to put more quality in the code, but they’ve said no, we need to go faster instead’. And my comment to that is that as soon as you’re framing it in terms of code quality versus speed, you’ve lost. Because the whole point of refactoring is to go faster.”&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/2014/Nov/code-quality-speed-chart.jpg&quot; alt=&quot;Speed goes with code quality&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Martin then illustrates his metaphor of the “Healthy Codebase”:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;“If you keep yourself healthy then you’ll be able to run faster. But if you just say: ‘Well, I want to run a lot so I’m therefore going to run a whole load all the time and not eat properly and not pay attention about this shooting pain going up my leg’, then you’re not going to be able to run quickly very long. You have to pay attention to your health. And same with the codebase. You have to continuously say: ‘How do we keep it in a healthy state?’ Then we can go fast, because we’re running marathons here with codebases. And if we neglect that internal quality of the codebase, it hits you surprisingly fast.”&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;So a “Healthy codebase” is a well written codebase that is clean and easy to understand. Keeping a codebase healthy allows us to move fast. But how do we ensure that we take some time to refactor before moving on to the next task? &lt;a href=&quot;https://twitter.com/cmaxw&quot;&gt;Charles Max Wood&lt;/a&gt; asks this exact question: &lt;em&gt;“A lot of people pick up TDD and they do red, green and go to the next ticket. How do you get to the point where you actually have [the refactoring step] as part of your workflow and make it automatic?”&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;This is where Jessica Kerr jumps in to talk about Preparatory Refactoring and illustrates it with a beautiful metaphor.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;“So, my strategy is before the red test […] I’m going to go refactor the code […] to make the change I want to make really easy. It’s like I want to go 100 miles east but instead of just traipsing through the woods, I’m going to drive 20 miles north to the highway and then I’m going to go 100 miles east at three times the speed I could have if I just went straight there. When people are pushing you to just go straight there, sometimes you need to say, ‘Wait, I need to check the map and find the quickest route’. The preparatory refactoring does that for me. And plus, it puts the refactoring at the beginning so it’s sure to get done.”&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/2014/Nov/preparatory-refactoring-map.jpg&quot; alt=&quot;Look at the map&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Preparatory Refactoring has some great benefits as it makes you go through the following steps:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;1 - understand the architecture of the code you are about to change&lt;/li&gt;
  &lt;li&gt;2 - plan and design the changes you are about to make&lt;/li&gt;
  &lt;li&gt;3 - refactor the code while you are still in the confortable “green” zone&lt;/li&gt;
  &lt;li&gt;4 - share the code resulting from the refactoring step (it can be reviewed and deployed separately from the new functionality)&lt;/li&gt;
  &lt;li&gt;5 - write the code for the new functionality (it is easy and fast since the codebase is ready for this change)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As Martin describes:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;“[This process] asks you ‘What would this code need to look like to make this change I’m about to make simple?’ So, you ask yourself that question and then you say, ‘Well, can I refactor it to be like that?’ and then make the change. And if you can do that, it’s almost always going to be faster because in the refactoring step, you’re not going to be in debug land. It’s a relatively straightforward process. And then you’ve made the hard part, which is adding the new functionality, a hell of a lot easier.”&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;I am very grateful to &lt;a href=&quot;http://martinfowler.com&quot;&gt;Martin Fowler&lt;/a&gt; and &lt;a href=&quot;https://twitter.com/jessitron&quot;&gt;Jessica Kerr&lt;/a&gt; for expressing Healthy Codebase and Preparatory Refactoring in such clear words and powerful analogies. I hope that they have convinced you to experiment with these concepts unless you are already enjoying their benefits.&lt;/p&gt;
</content>

            
              <content type="image" src="http://brewhouse.io/images/posts/2014/Nov/preparatory-refactoring-square.jpg" />
            
        </entry>
      
    
      
        <entry>
            <title>Big data in minutes with the ELK Stack</title>
            <author>
              <name>Philippe Creux</name>
              <email>philippe@brewhouse.io</email>
            </author>
            <link href="http://brewhouse.io/blog/2014/11/04/big-data-with-elk-stack.html"/>
            <updated>2014-11-04T08:00:00-08:00</updated>
            <id>http://brewhouse.io/blog/2014/11/04/big-data-with-elk-stack</id>
            <content type="html">&lt;p&gt;We’ve built a data analysis and dashboarding infrastructure for one of our clients over the past few weeks. They collect about 10 million data points a day. Yes, that’s big data.&lt;/p&gt;

&lt;p&gt;My highest priority was to allow them to browse the data they collect so that they can ensure that the data points are consistent and contain all the attributes required to generate the reports and dashboards they need.&lt;/p&gt;

&lt;p&gt;I chose to give the &lt;a href=&quot;http://www.elasticsearch.org/overview/&quot;&gt;ELK stack&lt;/a&gt; a try: &lt;a href=&quot;http://www.elasticsearch.org/overview/elasticsearch/&quot;&gt;ElasticSearch&lt;/a&gt;, &lt;a href=&quot;http://www.elasticsearch.org/overview/logstash/&quot;&gt;logstash&lt;/a&gt; and &lt;a href=&quot;http://www.elasticsearch.org/overview/kibana/&quot;&gt;Kibana&lt;/a&gt;.&lt;/p&gt;

&lt;!-- break --&gt;

&lt;p&gt;&lt;a href=&quot;http://www.elasticsearch.org/overview/elasticsearch/&quot;&gt;ElasticSearch&lt;/a&gt; is a schema-less database that has powerful search capabilities and is easy to scale horizontally. Schema-less means that you just throw JSON at it and it updates the schema as you go. It indexes every single field, so you can search anything (with full-text search) and it will aggregate and group the data. Registering a new node to a cluster is a matter of installing ElasticSearch on a machine and editing a config file. ElasticSearch takes care of spreading data around and splitting out requests over multiple servers.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.elasticsearch.org/overview/logstash/&quot;&gt;logstash&lt;/a&gt; allows you to pipeline data to and from anywhere. This is called an ETL (for Extract, Transform, Load) pipeline in the Business Intelligence and Data warehousing world, and it is what allows us to fetch, transform, and store events into ElasticSearch.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.elasticsearch.org/overview/kibana/&quot;&gt;Kibana&lt;/a&gt; is a web-based data analysis and dashboarding tool for ElasticSearch. It leverages ElasticSearch’s search capabilities to visualise your (big) data in seconds.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/2014/Nov/flow.jpg&quot; alt=&quot;flow&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;logstash-etl-pipeline-made-simple&quot;&gt;&lt;em&gt;logstash&lt;/em&gt;: ETL pipeline made simple&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;logstash&lt;/em&gt; is a simple tool that streams data from one or many inputs, transforms it and outputs it to one or many outputs.&lt;/p&gt;

&lt;h3 id=&quot;inputs-read-and-parse-data&quot;&gt;Inputs: read and parse data&lt;/h3&gt;

&lt;p&gt;Inputs are data sources such as log files (&lt;code&gt;/var/log/*.log&lt;/code&gt;) or data stored in a &lt;em&gt;S3 bucket&lt;/em&gt;, &lt;em&gt;RabbitMQ&lt;/em&gt;, &lt;em&gt;redis&lt;/em&gt;, etc. Once the raw data is read, &lt;em&gt;logstash&lt;/em&gt; parses it using codecs such as &lt;em&gt;JSON&lt;/em&gt;, &lt;em&gt;key=value&lt;/em&gt;, &lt;em&gt;graphite format&lt;/em&gt; etc. You can find a &lt;a href=&quot;http://logstash.net/docs/1.4.2/&quot;&gt;full list of inputs and codecs&lt;/a&gt; on &lt;a href=&quot;http://logstash.net/docs/1.4.2/&quot;&gt;&lt;em&gt;logstash&lt;/em&gt; documentation&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Let’s write a &lt;em&gt;logstash&lt;/em&gt; configuration file to load data from an S3 bucket containing text files with one JSON blob per line.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# logstash.conf&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;s3&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;bucket&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;my-bucket&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;credentials&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;aws-key&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;aws-token&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;codec&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;json&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;filters-transform-and-extend-data&quot;&gt;Filters: transform and extend data&lt;/h3&gt;

&lt;p&gt;We now have data in the &lt;em&gt;logstash&lt;/em&gt; pipeline. It’s time to transform it a little. Take this sample input file:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span class=&quot;err&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;://my-bucket/input&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;-1&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;.txt&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;quot;action&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;start game&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;quot;user&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;bob&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;nt&quot;&gt;&amp;quot;time&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;123456789&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;ip:&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;quot;56.42.42.42&amp;quot;&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;quot;action&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;win game&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;   &lt;span class=&quot;nt&quot;&gt;&amp;quot;user&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;kale&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;quot;time&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;123456792&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;ip:&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;quot;134.26.26.26&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;err&quot;&gt;...&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We can get &lt;em&gt;logstash&lt;/em&gt; to generate a proper &lt;em&gt;@timestamp&lt;/em&gt; field (later used by Kibana) and to add geolocalization using the IP address with the following filters:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# logstash.conf&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;filter&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# Parse the `time` attribute as a UNIX timestamp (seconds since epoch)&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# and store it in `@timestamp` attribute. This will be used in Kibana later on.&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;date&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;time&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;UNIX&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;# Add geolocalization attributes based on ip.&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;geoip&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;source&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;ip&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;output-load-data&quot;&gt;Output: load data&lt;/h3&gt;

&lt;p&gt;The output section is quite similar to the input one. You can output to stdout (handy for debugging purpose or to pipe into another command) as well as storing on S3, loading into a database such as ElasticSearch etc.&lt;/p&gt;

&lt;p&gt;Let’s output to stdout using the &lt;code&gt;ruby-debug&lt;/code&gt; format:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;filter&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;output&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;stdout&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;codec&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ruby&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;debug&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;and run &lt;em&gt;logstash&lt;/em&gt; to ensure that everything is wound up properly:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# $&amp;gt; logstash -f logstash.conf&lt;/span&gt;


&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;s2&quot;&gt;&amp;quot;action&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;start game&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;s2&quot;&gt;&amp;quot;user&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;bob&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;s2&quot;&gt;&amp;quot;time&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;123456789&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;s2&quot;&gt;&amp;quot;ip&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;56.42.42.42&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;s2&quot;&gt;&amp;quot;@version&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;1&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&amp;quot;@timestamp&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;1973-11-29T21:33:09.000Z&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;s2&quot;&gt;&amp;quot;path&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;s3://my-bucket/input-1.txt&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
         &lt;span class=&quot;s2&quot;&gt;&amp;quot;geoip&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                      &lt;span class=&quot;s2&quot;&gt;&amp;quot;ip&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;56.42.42.42&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
           &lt;span class=&quot;s2&quot;&gt;&amp;quot;country_code2&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;US&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
           &lt;span class=&quot;s2&quot;&gt;&amp;quot;country_code3&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;USA&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;s2&quot;&gt;&amp;quot;country_name&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;United States&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;s2&quot;&gt;&amp;quot;continent_code&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;NA&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
             &lt;span class=&quot;s2&quot;&gt;&amp;quot;region_name&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;NC&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
               &lt;span class=&quot;s2&quot;&gt;&amp;quot;city_name&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Raleigh&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
             &lt;span class=&quot;s2&quot;&gt;&amp;quot;postal_code&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;27668&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;s2&quot;&gt;&amp;quot;latitude&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;35&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;79769999999999&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
               &lt;span class=&quot;s2&quot;&gt;&amp;quot;longitude&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;78&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6253&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;s2&quot;&gt;&amp;quot;dma_code&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;560&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
               &lt;span class=&quot;s2&quot;&gt;&amp;quot;area_code&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;919&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;s2&quot;&gt;&amp;quot;timezone&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;America/New_York&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s2&quot;&gt;&amp;quot;real_region_name&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;North Carolina&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;s2&quot;&gt;&amp;quot;location&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;78&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6253&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;35&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;79769999999999&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Nice, all attributes were parsed properly and we now have &lt;em&gt;@timestamp&lt;/em&gt; and &lt;em&gt;geoip&lt;/em&gt; attributes.&lt;/p&gt;

&lt;p&gt;Our final configuration file looks like this:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;s3&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;bucket&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;my-bucket&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;credentials&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;my-aws-key&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;my-aws-token&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;region_endpoint&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;us-east-1&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# keep track of the last processed file&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;sincedb_path&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;./last-s3-file&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;codec&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;json&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;filter&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# set the event timestamp&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;date&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;time&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;UNIX&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;# add geoip attributes&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;geoip&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;source&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;ip&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;


&lt;span class=&quot;n&quot;&gt;output&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;elasticsearch_http&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;host&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;localhost&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;port&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;9200&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;There is quite a lot going on in just a few lines of code, eh?&lt;/p&gt;

&lt;p&gt;On top of this, &lt;em&gt;logstash&lt;/em&gt; keeps track of the inputs it has processed. So you can restart it without being concerned of data duplication.&lt;/p&gt;

&lt;p&gt;Although &lt;em&gt;logstash&lt;/em&gt; is written in &lt;em&gt;Ruby&lt;/em&gt;, it is really fast. The packaged version runs on &lt;em&gt;JRuby&lt;/em&gt; and it takes advantage of the JVM’s threading capabilities by throwing dozens of threads to parallelize data processing.&lt;/p&gt;

&lt;h2 id=&quot;elasticsearch--kibana&quot;&gt;ElasticSearch &amp;amp; Kibana&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;logstash&lt;/em&gt; is now ready to store data in &lt;em&gt;ElasticSearch&lt;/em&gt;. Getting ElasticSearch running on your machine &lt;a href=&quot;http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/setup.html&quot;&gt;takes minutes&lt;/a&gt;. &lt;a href=&quot;http://www.elasticsearch.org/overview/kibana/installation/&quot;&gt;Setup Kibana&lt;/a&gt;. A couple of clicks later, you’ve got a good looking dashboard.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/2014/Nov/kibana.jpg&quot; alt=&quot;kibana-dashboard&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;setting-this-up-in-production&quot;&gt;Setting this up in production&lt;/h3&gt;

&lt;p&gt;There is an excellent &lt;a href=&quot;https://github.com/lusis/chef-logstash&quot;&gt;chef cookbook&lt;/a&gt; to deploy &lt;em&gt;logstash&lt;/em&gt; in minutes.&lt;/p&gt;

&lt;p&gt;We decided to use a hosted solution to manage the ElasticSearch cluster. The top two seem to be &lt;a href=&quot;http://qbox.io&quot;&gt;qbox.io&lt;/a&gt; and &lt;a href=&quot;http://found.no&quot;&gt;found.no&lt;/a&gt;. &lt;a href=&quot;http://found.no&quot;&gt;found.no&lt;/a&gt; provides reserved instances and allows you to scale your cluster without any downtime.&lt;/p&gt;

&lt;p&gt;Kibana comes as a plugin on all hosted ElasticSearch services, so you just have to tick a checkbox and you’re ready to go!&lt;/p&gt;

&lt;p&gt;Performance wise, an ElasticSearch cluster with 4x &lt;a href=&quot;http://aws.amazon.com/ec2/instance-types/#Compute_Optimized&quot;&gt;Amazon EC2 c3.xlarge&lt;/a&gt; is sufficient to run Kibana reports on the last 30 days. This is about 300 million data entries.&lt;/p&gt;

&lt;h2 id=&quot;elk---to-store-and-visualize-huge-amounts-of-data-in-minutes&quot;&gt;ELK - to store and visualize huge amounts of data in minutes&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;logstash&lt;/em&gt; enabled us to deliver an ETL pipeline that is highly performant, reliable and easy to maintain in a matter of hours. &lt;em&gt;Elastic Search&lt;/em&gt; is a no brainer database that ingests anything you throw at it and scales horizontally when need be. &lt;em&gt;Kibana&lt;/em&gt; allows you to make sense of your data and publish dashboards in minutes. I recommend you giving it a try to these powerful and simple tools.&lt;/p&gt;

&lt;p&gt;Kibana 4 is on the way, and a final version should be released in the next couple of months. It provides new features to generate business-oriented reports such as unique counts, funnels, etc. Until then, and to report on years of data, we’ve implemented a pipeline to load data into the data warehouse solution &lt;a href=&quot;http://aws.amazon.com/redshift/&quot;&gt;Amazon Redshift&lt;/a&gt;. But this is a whole other story.&lt;/p&gt;

&lt;p&gt;If this is a project you’re working on and would like some help with, reach out for a chat!&lt;/p&gt;
</content>

            
              <content type="image" src="http://brewhouse.io/images/posts/2014/Nov/bigdata.png" />
            
        </entry>
      
    
      
        <entry>
            <title>The Evolution of Brewhouse Software</title>
            <author>
              <name>Lana Topham</name>
              <email>lana@brewhouse.io</email>
            </author>
            <link href="http://brewhouse.io/blog/2014/09/30/the-evolution-of-brewhouse-software.html"/>
            <updated>2014-09-30T08:00:00-07:00</updated>
            <id>http://brewhouse.io/blog/2014/09/30/the-evolution-of-brewhouse-software</id>
            <content type="html">&lt;p&gt;
  &lt;img class=&quot;img-responsive&quot; alt=&quot;tea that looks like coffee&quot; src=&quot;/images/posts/2014/Sept/coff.jpg&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;&lt;em&gt;“Brewhouse – so you brew beer?”&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Everyone on the team has been asked this question at some point when introducing ourselves at an event or conference – it’s a valid question! However, we brew up a much different batch of awesome.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Brewhouse Software&lt;/em&gt;. It took about two weeks of defining and then redefining what was important about the brand and the creative process attached to it. The notion of coffee kept coming up. Code and coffee. Coffee and creating. And within the team, the fuss we made about a fantastic cup of high quality, craft coffee.&lt;/p&gt;

&lt;!-- break --&gt;

&lt;p&gt;Craft coffee is huge in the west coast, craft beer is surging and what &lt;em&gt;we&lt;/em&gt; actually do is create “craft software”. We really care about the tools used, the process to create the software and the people that we work with. Craft implies care and quality. So naturally, the perfect name for us was &lt;em&gt;Brewhouse Software&lt;/em&gt;.&lt;/p&gt;

&lt;h2 id=&quot;coffee-connection&quot;&gt;Coffee Connection&lt;/h2&gt;

&lt;p&gt;
  &lt;img class=&quot;img-responsive&quot; alt=&quot;coffee tools used&quot; src=&quot;/images/posts/2014/Sept/coffee-tools.jpg&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;Coffee &lt;em&gt;and&lt;/em&gt; tea (for those Brits out there!) – it’s not just associated with our name, &lt;a href=&quot;https://vimeo.com/101646332&quot;&gt;we love the stuff&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;As a group of individuals, design is important to us. Design in building software and design in the tools we use. We’re not a full on design firm but we try and learn as much as we can from other crafts.&lt;/p&gt;

&lt;p&gt;We think the elements that go into creating coffee overlap with how we create our software. Patience. The slow process of brewing a stellar cup of coffee applies to the work we do. We appreciate the relevance between the aspects of the coffee brewing world and how that relates to our processes.&lt;/p&gt;

&lt;h2 id=&quot;movin-on-up&quot;&gt;Movin’ On Up&lt;/h2&gt;

&lt;p&gt;
  &lt;img class=&quot;img-responsive&quot; alt=&quot;Map of location&quot; src=&quot;/images/posts/2014/Sept/map.jpg&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;The time was right. We added two more to the team of four and realized that it wouldn’t cost much more to have our own dedicated space.  It was always our intention to branch out, as our previous digs, a co-working space (&lt;a href=&quot;http://chloi.io/&quot;&gt;Chloi HQ&lt;/a&gt;), lacked the ability to brand and limited us in what we could do. After all, it is a shared space! We’re creative and we needed to be able to feel like the space we worked in was our own. So Brewhouse Software HQ was born.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;And then there were six.&lt;/em&gt;
&lt;img class=&quot;img-responsive&quot; alt=&quot;Gabe face and Lana face&quot; src=&quot;/images/posts/2014/Sept/gabe-me.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Another big step was adding two more to the team. &lt;a href=&quot;https://twitter.com/gabescholz&quot;&gt;Gabe&lt;/a&gt; was a welcome addition. He is an amazing developer, specializing in AngularJS. We now have the capacity to bring on more customers, and tackle more work with our products.&lt;/p&gt;

&lt;p&gt;Adding &lt;a href=&quot;https://twitter.com/MsTopham&quot;&gt;Lana&lt;/a&gt; (aka, Me) to the team was more of a leap. Having someone who wasn’t a developer or a designer – someone who read copy from a whole different perspective. That was big. We’re no longer just “techies”. We’re now a bonafide business with multi-functions and roles to help us grow.&lt;/p&gt;

&lt;h2 id=&quot;its-custom-baby&quot;&gt;It’s Custom, Baby&lt;/h2&gt;

&lt;p&gt;
  &lt;img class=&quot;img-responsive&quot; alt=&quot;Brewhouse HQ office view&quot; src=&quot;/images/posts/2014/Sept/office.jpg&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;Our 1,400 square ft. space is roomy – too big for six but egging us on to grow. It boasts a fully stocked kitchen of snacks, a deep selection of coffee and tea (it’s kinda our thing!) and small features which make it feel custom: like beanbag chairs, art created by &lt;a href=&quot;https://twitter.com/ChuckBergeron&quot;&gt;Chuck&lt;/a&gt; and our whiteboard on wheels, moonlighting as a Visual Timeline.&lt;/p&gt;

&lt;p&gt;
  &lt;img class=&quot;img-responsive&quot; alt=&quot;Vanruby event&quot; src=&quot;/images/posts/2014/Sept/vanruby.jpg&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;This large space calls for multi-purpose use. We’re fond of the startup community and feel it is our duty to share our space to allow others to host small meetups or &lt;a href=&quot;http://vanruby.org/2014-heroes.html&quot;&gt;larger events&lt;/a&gt;. This is our home, but we love to open the doors so others can enjoy our beautiful spread as much as we do.&lt;/p&gt;

&lt;p&gt;If you’re interested in working with us, stop by for a cup &lt;img src=&quot;/images/posts/2014/Sept/coffee-emoji.png&quot; alt=&quot;&quot; /&gt; or &lt;a href=&quot;http://brewhouse.io/#contact&quot;&gt;get in touch&lt;/a&gt;.&lt;/p&gt;
</content>

            
              <content type="image" src="http://blog.goodbits.io/images/posts/2014/Sept/brewsquare.jpg" />
            
        </entry>
      
    
      
        <entry>
            <title>Ruby Kaigi 2014: Day 3</title>
            <author>
              <name>Godfrey Chan</name>
              <email>godfrey@brewhouse.io</email>
            </author>
            <link href="http://brewhouse.io/blog/2014/09/26/ruby-kaigi-2014-day-3.html"/>
            <updated>2014-09-26T11:00:00-07:00</updated>
            <id>http://brewhouse.io/blog/2014/09/26/ruby-kaigi-2014-day-3</id>
            <content type="html">&lt;p&gt;
  &lt;a href=&quot;/images/posts/ruby-kaigi-2014/the-end.jpg&quot;&gt;
    &lt;img class=&quot;img-responsive&quot; alt=&quot;#rubykaigi has finally come to an end!&quot; src=&quot;/images/posts/ruby-kaigi-2014/the-end.jpg&quot; /&gt;
  &lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;Continuing from &lt;a href=&quot;/blog/2014/09/18/ruby-kaigi-2014-day-1&quot;&gt;part 1&lt;/a&gt; and &lt;a href=&quot;/blog/2014/09/19/ruby-kaigi-2014-day-2&quot;&gt;part 2&lt;/a&gt;,
of my Ruby Kaigi blog posts, here is the final day at Ruby Kaigi!&lt;/p&gt;

&lt;!-- break --&gt;

&lt;h2 id=&quot;talks-will-be-available-soon&quot;&gt;Talks will be available soon™&lt;/h2&gt;

&lt;p&gt;Good news everyone! It looks like the wait is almost over – the official Ruby
Kaigi account has &lt;a href=&quot;https://twitter.com/rubykaigi/status/513917550128660481&quot;&gt;tweeted&lt;/a&gt;
that the talks will be made available on YouTube soon™. Follow them to get
notified when that happens!&lt;/p&gt;

&lt;h2 id=&quot;brief-notes-on-the-day-3-talks&quot;&gt;Brief notes on the day 3 talks&lt;/h2&gt;

&lt;p&gt;To be honest, I didn’t go to as many talks on the third day, not because they
weren’t great (those I attended was excellent), but because I was spending time
hanging out with the #rubyfriends I made at the conference. With that said, here
are some highlights of my last conference day:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Speeding up Rails 4.2&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;The &lt;a href=&quot;https://twitter.com/tenderlove&quot;&gt;@tenderlover&lt;/a&gt; session, in Japanese! Here
Aaron showed off his adequate Japanese skillz by delivering a full talk in
fluent Japanese; he even made a few puns in Japanese! For those who couldn’t
wait for the talk to become available (or those who don’t speak Japanese), you
can catch watch &lt;a href=&quot;http://www.confreaks.com/videos/4142-cascadiaruby2014-speed-up-rails-speed-up-your-code&quot;&gt;a similar talk&lt;/a&gt;
Aaron gave at &lt;a href=&quot;http://cascadiaruby.com/&quot;&gt;Cascadia Ruby&lt;/a&gt; today.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;The Ruby Challenge&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;In this session, &lt;a href=&quot;https://twitter.com/sikachu&quot;&gt;@sikachu&lt;/a&gt; hosted an interactive
Ruby game show. The contestants were picked from the audience randomly (we
were given a card with a unique number when we walked in) to answer five
questions about the performance characteristics of 10 pair of Ruby snippets
that performs the same task.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Tending the Ruby ecosystem&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;https://twitter.com/_zzak&quot;&gt;@_zzak&lt;/a&gt; shared his journey of becoming a open-
source contributor in the Ruby ecosystem, why it is important to give back
to the community and some pointers on how you can start contributing.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Ruby 2.1 in Production&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;In this closing keynote, the legendary &lt;a href=&quot;https://twitter.com/tmm1&quot;&gt;@tmm1&lt;/a&gt; shed
some light on Github’s experience on rolling out Ruby 2.1 in production, how
it improved the performance on their site, as well as his history with Ruby,
the story of him becoming a Ruby committer and more.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As always, there are many more great talks at the conference, so be sure to
check out the full &lt;a href=&quot;http://rubykaigi.org/2014/schedule&quot;&gt;conference schedule&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;see-you-next-year&quot;&gt;See you next year?&lt;/h2&gt;

&lt;p&gt;Overall, Ruby Kaigi has been a great conference for me. Here, you will find some
in-depth technical talks that you won’t find in other conferences.&lt;/p&gt;

&lt;p&gt;In addition to being an excellent platform for facilitating the exchange of
technical knowledge, it is also an incredible platform for cultural exchange. It
was a breath of fresh air for me to attend a conference outside of my “bubble”
in North America. It was a such a great learning experience for me to see some
of the Japanese Rubyist (and other Rubyist coming from around the world) are
using the language to solve problems in ways that I am not used to (or to solve
problems that I didn’t even think of before).&lt;/p&gt;

&lt;p&gt;
  &lt;a href=&quot;/images/posts/ruby-kaigi-2014/matz-lunch-box.jpg&quot;&gt;
    &lt;img class=&quot;img-responsive&quot; alt=&quot;Matz handing out lunch boxes&quot; src=&quot;/images/posts/ruby-kaigi-2014/matz-lunch-box.jpg&quot; /&gt;
  &lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;It also reminded me of why I loved being part of the Ruby community. Ruby Kaigi
is the conference where the creator of the language hands you your lunch box,
where the core committers hold signs at the door and greet you as you walk into
the conference venue every morning, where English and Japanese-speking Rubyists
learn and deliver talks in each other’s native language.&lt;/p&gt;

&lt;p&gt;
  &lt;a href=&quot;/images/posts/ruby-kaigi-2014/ruby-friends.jpg&quot;&gt;
    &lt;img class=&quot;img-responsive&quot; alt=&quot;My #rubyfriends!&quot; src=&quot;/images/posts/ruby-kaigi-2014/ruby-friends.jpg&quot; /&gt;
  &lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;I am very greatful to be part of this amazing conference and the greater Ruby
community. I am looking forward to coming back to Ruby Kaigi in the future – and
I hope see you there too!&lt;/p&gt;
</content>

            
              <content type="image" src="http://brewhouse.io/images/brewhouse-symbol-large-200x200.png" />
            
        </entry>
      
    
      
        <entry>
            <title>Writing Rails-flavored AngularJS</title>
            <author>
              <name>Gabe Scholz</name>
              <email>gabe@brewhouse.io</email>
            </author>
            <link href="http://brewhouse.io/blog/2014/09/23/writing-rails-flavored-angularjs.html"/>
            <updated>2014-09-23T11:00:00-07:00</updated>
            <id>http://brewhouse.io/blog/2014/09/23/writing-rails-flavored-angularjs</id>
            <content type="html">&lt;p&gt;When I think about Ruby on Rails and AngularJS in the same codebase, I kind of cringe. After
spending more than a year trying to reconcile how Rails plays with Angular, not only
have I been unsuccessful, but I have not been satisfied with any of the suggested
solutions. There is a ton of material on the numerous Rails hacks you should employ
so that Rails and AngularJS feel compatible; however, I’m beginning to
wonder whether this problem is being approached from the wrong direction.
Instead, how can we hack AngularJS so that it plays nice with Rails?&lt;/p&gt;

&lt;!-- break --&gt;

&lt;p&gt;As a Ruby on Rails developer, I want to feel that I’m writing a Rails
application. I’m OK with a page refresh when I’m browsing between features. I don’t
want to feel like I have to submit to the ‘Single Page Application’ paradigm.
I want my JavaScript to be sprinkled on the page to augment my application. I
don’t want my JavaScript to consume the entire thing. AngularJS has a tendency
to pull you out of developing Rails in the Rails way.&lt;/p&gt;

&lt;p&gt;Rails comes bundled with vanilla jQuery, which is very easy to get started with,
but it is difficult to maintain. I love how Angular encapsulates, localizes and contains
JavaScript functionality. It’s maintainable, modular, and easier to understand
than a sputtering of jQuery files. It would be nice if I could focus on writing
JavaScript for components and leave the application bit to my Rails server.&lt;/p&gt;

&lt;p&gt;My solution to solve this problem is appropriately called
&lt;a href=&quot;https://github.com/BrewhouseTeam/angular_sprinkles&quot;&gt;Angular Sprinkles&lt;/a&gt;.
This gem hides all of the usual setup required for a tranditional AngularJS
application while dynamically generating one at run time. Developers use Rails
helper methods to enable two-way binding, render directives, and call evented
functions. It’s a cleaner approach to JavaScript in your Rails application.
Let’s take a look.&lt;/p&gt;

&lt;h2 id=&quot;binding-attributes&quot;&gt;Binding attributes&lt;/h2&gt;

&lt;p&gt;Two-way binding works right out of the box with Sprinkles. Wrapping objects
with the &lt;code&gt;bindable&lt;/code&gt; controller helper gives them the &lt;code&gt;bind&lt;/code&gt; method.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# app/controllers/user_controller.rb&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;UserController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ApplicationController&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;show&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@user&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bindable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And then in the view, you can either bind to the entire JSONified object with &lt;code&gt;@user.bind&lt;/code&gt;,
or just a single attribute with an argument.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-erb&quot; data-lang=&quot;erb&quot;&gt;&lt;span class=&quot;x&quot;&gt;&amp;lt;!-- app/views/users/show.html.erb --&amp;gt;&lt;/span&gt;

&lt;span class=&quot;x&quot;&gt;&amp;lt;p&amp;gt;My name is: {{ &lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;%=&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;%&amp;gt;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; }}&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;&amp;lt;input type=&amp;quot;text&amp;quot; ng-model=&amp;quot;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;%=&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;%&amp;gt;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&amp;quot; /&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;inlined-directives&quot;&gt;Inlined directives&lt;/h2&gt;

&lt;p&gt;We’ll take this a step further by creating a directive to make our name blink very rapidly (obviously).
Let’s first write the directive.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// app/assets/javascripts/directives/blink.js&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;sprinkles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;directive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;blink&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$timeout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;restrict&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;A&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;transclude&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;scope&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;period&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;=&amp;#39;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;link&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;opacity&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

      &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;blink&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;$timeout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;nx&quot;&gt;opacity&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;opacity&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
          &lt;span class=&quot;nx&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;css&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;opacity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;opacity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
          &lt;span class=&quot;nx&quot;&gt;blink&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;period&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

      &lt;span class=&quot;nx&quot;&gt;blink&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And now we can include the directive in our view with the &lt;code&gt;directive&lt;/code&gt; helper.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-erb&quot; data-lang=&quot;erb&quot;&gt;&lt;span class=&quot;x&quot;&gt;&amp;lt;!-- app/views/users/show.html.erb --&amp;gt;&lt;/span&gt;

&lt;span class=&quot;cp&quot;&gt;&amp;lt;%=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;directive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:blink&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;period&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;250&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;%&amp;gt;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;  &amp;lt;p&amp;gt;My name is: {{ &lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;%=&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;%&amp;gt;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; }}&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;&amp;lt;%&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;%&amp;gt;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;&amp;lt;input type=&amp;quot;text&amp;quot; ng-model=&amp;quot;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;%=&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;%&amp;gt;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&amp;quot; /&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;BOOM! Annoying blinking tag!&lt;/p&gt;

&lt;h2 id=&quot;evented-javascript-functions&quot;&gt;Evented JavaScript functions&lt;/h2&gt;

&lt;p&gt;Finally, it’s very important to be able to still use Angular’s built-in event
bindings. For example, clicking a button and showing an alert box. Sprinkles
solves this by allowing developers to inline Angular services with the &lt;code&gt;service&lt;/code&gt;
helper method.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// app/assets/javascripts/services/alert_me.js&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;sprinkles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;service&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;alertMe&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;alert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;My name is: &amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And then in the view,&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-erb&quot; data-lang=&quot;erb&quot;&gt;&lt;span class=&quot;x&quot;&gt;&amp;lt;!-- app/views/users/show.html.erb --&amp;gt;&lt;/span&gt;

&lt;span class=&quot;x&quot;&gt;&amp;lt;button ng-click=&amp;quot;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;%=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;service&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:alert_me&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;%&amp;gt;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&amp;quot;&amp;gt;CLICK ME!&amp;lt;/button&amp;gt;&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;&amp;lt;input type=&amp;quot;text&amp;quot; ng-model=&amp;quot;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;%=&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;%&amp;gt;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&amp;quot; /&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;In all of these examples there was no additional setup involved. An Angular application
is generated behind the scenes, allowing the developer to keep focused on smaller
JavaScript components. Focused on the… sprinkles.&lt;/p&gt;

&lt;h2 id=&quot;let-us-know-what-you-think&quot;&gt;Let us know what you think&lt;/h2&gt;

&lt;p&gt;Angular Sprinkles is a new approach to Angular-Rails development. It’s for those of us
that love both of these great technologies and want to see them work together pleasantly.
Please &lt;a href=&quot;https://github.com/BrewhouseTeam/angular_sprinkles&quot;&gt;have a look at the gem&lt;/a&gt;
for more information on setup and leave some feedback. We would love to know what you think.&lt;/p&gt;
</content>

            
              <content type="image" src="http://brewhouse.io/images/brewhouse-symbol-large-200x200.png" />
            
        </entry>
      
    
      
    
      
        <entry>
            <title>Ruby Kaigi 2014: Day 2</title>
            <author>
              <name>Godfrey Chan</name>
              <email>godfrey@brewhouse.io</email>
            </author>
            <link href="http://brewhouse.io/blog/2014/09/19/ruby-kaigi-2014-day-2.html"/>
            <updated>2014-09-19T11:00:00-07:00</updated>
            <id>http://brewhouse.io/blog/2014/09/19/ruby-kaigi-2014-day-2</id>
            <content type="html">&lt;p&gt;
  &lt;a href=&quot;/images/posts/ruby-kaigi-2014/i-feel-happy.jpg&quot;&gt;
    &lt;img class=&quot;img-responsive&quot; alt=&quot;I feel happy!&quot; src=&quot;/images/posts/ruby-kaigi-2014/i-feel-happy.jpg&quot; /&gt;
  &lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;Continuing from &lt;a href=&quot;/blog/2014/09/18/ruby-kaigi-2014-day-1&quot;&gt;my last post&lt;/a&gt;, here is
day 2 at Ruby Kaigi!&lt;/p&gt;

&lt;p&gt;(The talks are being &lt;a href=&quot;http://rubykaigi.org/2014&quot;&gt;live streamed&lt;/a&gt; on the Internet,
you can find the links at the middle of the Ruby Kaigi homepage.)&lt;/p&gt;

&lt;h2 id=&quot;matzs-keynote&quot;&gt;Matz’s Keynote&lt;/h2&gt;

&lt;p&gt;
  &lt;a href=&quot;/images/posts/ruby-kaigi-2014/matz.jpg&quot;&gt;
    &lt;img class=&quot;img-responsive&quot; alt=&quot;It&#39;s Matz!&quot; src=&quot;/images/posts/ruby-kaigi-2014/matz.jpg&quot; /&gt;
  &lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://twitter.com/yukihiro_matz&quot;&gt;Matsumoto-san&lt;/a&gt; gave a keynote address in the
morning to kick off the second day of Ruby Kaigi 2014.&lt;/p&gt;

&lt;!-- break --&gt;

&lt;p&gt;In the first half of the keynote, Matz did a very detailed analysis of all the
keynotes he has given in previous years at Ruby Kaigi, RubyConf and elsewhere –
a meta-keynote, perhaps. Matz recounted all the new ideas that he proposed at
the previous keynotes vs. when they were actually implemented and shipped, if at
all.&lt;/p&gt;

&lt;p&gt;For example, Matz talked about “staby lambda” (i.e. &lt;code&gt;-&amp;gt;{ ... }&lt;/code&gt;) in the RubyConf
2005 keynote and was implemented in Ruby 1.9 that shipped in 2007. (Matz
recalled that the feature was initially met with some backlash when he first
proposed it but turned out to be one of the most liked features when it was
finally shipped.) Similarly, keyword arguments and a redesign of local variables
scoping was proposed in 2004. The former made it 9 years later in Ruby 2.0, and
the latter was ultimately abandoned due to backwards-compatibility concerns.&lt;/p&gt;

&lt;p&gt;As you can see, some of these ideas took a long time to complete. Some of them
never made it. So far, 7 out of the 22 ideas that were proposed still haven’t
been implemented, yielding a “false rate” of ~32%.&lt;/p&gt;

&lt;p&gt;Perhaps partly due to this, Matz took a break from announcing new feature ideas
in his keynotes from 2011 to 2014. Meanwhile, the Ruby core team has focused on
stabilizing the 2.x release series (and have been doing that amazingly well).&lt;/p&gt;

&lt;p&gt;However, Matz said that “OSS community is like a shark, must move forward or we
will die”. With Ruby 2.x cruising along a stable and steady trajectory, Matz
thinks that it’s about time to dream big again and start thinking about the
features that would ultimately lead us to Ruby 3.0. This might take 10 years
again, but we must fuel ourselves with the desire to move forward because without it
Ruby 3.0 will not happen.&lt;/p&gt;

&lt;p&gt;With that said, Matz proposed some grand ideas: concurrency, a JIT compiler
(and potentially adopt the LLVM infrastructure) and static typing.&lt;/p&gt;

&lt;h3 id=&quot;static-typing&quot;&gt;Static Typing&lt;/h3&gt;

&lt;p&gt;The first two of those probably aren’t very controversial, but &lt;em&gt;static typing&lt;/em&gt;
…?!&lt;/p&gt;

&lt;p&gt;Well, all the new kids in the street these days, like Scala, TypeScript, Dart
and Go, they are all static typed language, so why not Ruby?&lt;/p&gt;

&lt;p&gt;This was proposed by Davide D’Agostino as feature &lt;a href=&quot;https://bugs.ruby-lang.org/issues/9999&quot;&gt;#9999&lt;/a&gt;
under the name “Type Annotation”. It looks like this:&lt;/p&gt;

&lt;pre&gt;def connect(r -&amp;gt; Stream, c -&amp;gt; Client) -&amp;gt; Fiber
  ...
end&lt;/pre&gt;

&lt;p&gt;It turns out that our long-time rival Python has a similar proposal under PEP
&lt;a href=&quot;http://legacy.python.org/dev/peps/pep-3107/&quot;&gt;#3107&lt;/a&gt; called Function Annotations.
It looks like this:&lt;/p&gt;

&lt;pre&gt;def connect(r: Stream, c: Client) -&amp;gt; Fiber:
  ...&lt;/pre&gt;

&lt;p&gt;As you can see, the two proposals are quite similar in their syntax (the Python
syntax conflicts with keyword arguments in Ruby, so the &lt;code&gt;-&amp;gt;&lt;/code&gt; form was proposed).&lt;/p&gt;

&lt;p&gt;It is worth noting that in the Python proposal, this is purely a form of
documentation – the specification does not require the implementations to
enforce the types at runtime (Dart doesn’t either). There is also an optional
type checker called “mypy” that uses these annotations to perform static type
checking.&lt;/p&gt;

&lt;h3 id=&quot;why-static-typing&quot;&gt;Why static typing?&lt;/h3&gt;

&lt;p&gt;Before going any deeper into this, perhaps it would be worthwhile to understand
the problems that static typing is supposed to solve. The follow reasons are
usually thrown around to support static typing:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;em&gt;Performance&lt;/em&gt;: the type information will allow the implementations to perform
more optimization which would lead to increased performance.&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;Compile-time check&lt;/em&gt;: to discover bugs early on.&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;Documentation&lt;/em&gt;: the type information is important to the consumer of the APIs
so it is better to have this explicitly conveyed rather than implied from the
method/argument names and so on.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;performance&quot;&gt;Performance&lt;/h4&gt;

&lt;p&gt;While no one would complain about a faster Ruby, Matz noted that we don’t really
need static typing for good performance. For example, V8 and LuaJIT are both
highly performant VMs for dynamically typed languages (JavaScript and Lua,
respectively).&lt;/p&gt;

&lt;p&gt;While it is true that techniques such as specialization can help improve
performance, it is possible to achieve that to a certain degree without explicit
type information, and we still haven’t explored that (and many other kind of
possible optimizations) yet.&lt;/p&gt;

&lt;p&gt;So overall, performance alone is not a good reason for introducing static typing
to Ruby.&lt;/p&gt;

&lt;h4 id=&quot;compile-time-check&quot;&gt;Compile-time check&lt;/h4&gt;

&lt;p&gt;Having the type information available allows for static analysis of the code and
would make refactoring easier as well.&lt;/p&gt;

&lt;p&gt;(Matz made a comment about test coverage here, but after translation I wasn’t
sure if it was sarcastic or not :P)&lt;/p&gt;

&lt;h4 id=&quot;documentation&quot;&gt;Documentation&lt;/h4&gt;

&lt;p&gt;Matz thinks that there is a value to the self-documenting nature of the type
annotation. It is much better than comments, because it will not get out of sync
with the code and contradicts how the code actually works. Furthermore, when
learning to use a library or when debugging &lt;a href=&quot;https://twitter.com/pcreux/status/481154970364825600&quot;&gt;some code that you didn’t write
(this morning)&lt;/a&gt;, it spares
you from having to dig deep into the internals just to figure out what the
method returns.&lt;/p&gt;

&lt;p&gt;This point is the primary intention of PEP #3107 as well.&lt;/p&gt;

&lt;h3 id=&quot;why-not-static-typing&quot;&gt;Why not static typing?&lt;/h3&gt;

&lt;p&gt;With all that said, are there any reasons to not introduce static typing? Matz
gave a few things to consider:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;It works™ without it&lt;/li&gt;
  &lt;li&gt;It is against duck typing&lt;/li&gt;
  &lt;li&gt;It will be optional&lt;/li&gt;
  &lt;li&gt;DRY&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;duck-typing&quot;&gt;Duck typing&lt;/h4&gt;

&lt;p&gt;Perhaps one of the biggest drawback with static typing is that it works against
duck typing. Currently, it is possible to pass a string-like object that doesn’t
inherit from &lt;code&gt;String&lt;/code&gt;. With static typing, this is not possible.&lt;/p&gt;

&lt;p&gt;A Ruby without duck typing… is that really still Ruby?&lt;/p&gt;

&lt;h4 id=&quot;optional&quot;&gt;Optional&lt;/h4&gt;

&lt;p&gt;Naturally, if such a feature is introduced, it will have to be optional to
maintain backwards compatibility with existing code. However, Matz asserts that
optional typing has no use as the compiler’s hands are tied as soon as you call
into an untyped method. (TypeScript has the same problem.)&lt;/p&gt;

&lt;h4 id=&quot;dry&quot;&gt;DRY&lt;/h4&gt;

&lt;p&gt;Rubist, especially Rails developers, like to avoid duplication. To Matz, the
type information seems like a lot of duplication (between the code and the
declaration, a problem that is more evident in small functions). Matz hates
writing types.&lt;/p&gt;

&lt;h3 id=&quot;soft-typing--type-inference&quot;&gt;Soft-typing / Type inference&lt;/h3&gt;

&lt;p&gt;Matz also mentioned a related technique that is perhaps more suitable for
Ruby.&lt;/p&gt;

&lt;p&gt;Soft-typing is a kind of best-effort type checker that works based on the code
structure and duck typing, so no declaration is required.&lt;/p&gt;

&lt;p&gt;For example, consider the follow code:&lt;/p&gt;

&lt;pre&gt;a = 1 # type of a is integer

def foo(a)
  print a.to_int
end

foo(1) # OK: 1 has to_int
food(&quot;a&quot;) # NG: &quot;a&quot; doesn&#39;t have to_int&lt;/pre&gt;

&lt;p&gt;As you can see, the compiler can deduce from the code structure that anything
passed into &lt;code&gt;foo&lt;/code&gt; must respond to &lt;code&gt;to_int&lt;/code&gt; and can reject anything that doesn’t
have that method.&lt;/p&gt;

&lt;p&gt;In this case, a “type” is really a represented by classes as well as a set of
methods (name + aguments type + return value type). This is going to be very
difficult to do in Ruby because of dynamic requires (&lt;code&gt;require some_variable&lt;/code&gt;),
dynamicly defined methods (&lt;code&gt;defined_method&lt;/code&gt;) and meta-programming features like
&lt;code&gt;method_missing&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;subset&quot;&gt;Subset&lt;/h3&gt;

&lt;p&gt;It is possible to target this feature for just a subset of the Ruby language
(for example, exclude programs that use dynamic &lt;code&gt;require&lt;/code&gt;s). This fits nicely
into Ruby’s philosophy as backwards compatibility is valued very highly by Matz
and the Ruby team.&lt;/p&gt;

&lt;p&gt;With that, we will have “two languages in one” – a soft-typed language (the
“subset”) and the dynamically typed language (the “superset”). The use of the
former will be highly encouraged, but it could fall back into the superset if
necessary.&lt;/p&gt;

&lt;h3 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;All of these things mentioned here are just ideas that might or might not
happen. However, it is time to start building new things that would pave the way
to Ruby 3.0.&lt;/p&gt;

&lt;p&gt;You can read more about this in Matz interview in the next volume of the Japan
Linux magazine. I highly recommend that you watch this talk when it becomes
available!&lt;/p&gt;

&lt;h2 id=&quot;other-talks&quot;&gt;Other talks&lt;/h2&gt;

&lt;p&gt;Besides Matz’s keynote, there are many other talks worth watching too. Here are
some of the talks I attended today.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;A Just in Time compiler for CRuby&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;In this talk, &lt;a href=&quot;https://twitter.com/imasahiro&quot;&gt;@imasahiro&lt;/a&gt; showed us how he
built an experimental JIT compiler called &lt;a href=&quot;https://github.com/imasahiro/rujit&quot;&gt;RuJIT&lt;/a&gt;.&lt;/p&gt;

    &lt;p&gt;&lt;em&gt;RuJIT&lt;/em&gt; is a Trace-based JIT compiler, similar to the approach taken by
Firefox’s JS VM. It is based on the current version of CRuby, and resulted in
~2-5X speedup compared to trunk (and up to 100X in some cases).&lt;/p&gt;

    &lt;p&gt;In his talk, @imasahiro covered the details of his design, so if this sounds
interesting to you, definitely go catch it online when it becomes available.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Archeology of Ruby: Removed Features&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;This is a short (and sweet!) talk from &lt;a href=&quot;https://twitter.com/znz&quot;&gt;@znz&lt;/a&gt; that
tells us about the history of Ruby by going through the features that were
removed from the Ruby language.&lt;/p&gt;

    &lt;p&gt;Attending this talk was like learning about a city’s history in a museum. If
that’s something you enjoy doing, I think you will probably like this talk
too!&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Going the distance&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;https://twitter.com/schneems&quot;&gt;@schneems&lt;/a&gt; talked about how he learned to use
the Levenshtein distance algorithm to solve his typo problem, which resulted
in a &lt;a href=&quot;https://github.com/rails/rails/pull/15497&quot;&gt;pull request&lt;/a&gt; to Rails that
gives helpful suggestions when you mistyped a command.&lt;/p&gt;

    &lt;p&gt;If you always wondered what “algorithms” are about and were afraid to learn
them, this talk is for you!&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;wrapping-up&quot;&gt;Wrapping Up&lt;/h2&gt;

&lt;p&gt;That about wraps up my notes for Day 2 of Ruby Kaigi 2014. Of course, there are
many other talks that are equally interesting. I encourage you to check out the
&lt;a href=&quot;http://rubykaigi.org/2014/schedule&quot;&gt;conference schedule&lt;/a&gt; for a full list of
talks.&lt;/p&gt;

&lt;p&gt;Stay tuned for part 3!&lt;/p&gt;
</content>

            
              <content type="image" src="http://brewhouse.io/images/brewhouse-symbol-large-200x200.png" />
            
        </entry>
      
    
      
        <entry>
            <title>Ruby Kaigi 2014: Day 1</title>
            <author>
              <name>Godfrey Chan</name>
              <email>godfrey@brewhouse.io</email>
            </author>
            <link href="http://brewhouse.io/blog/2014/09/18/ruby-kaigi-2014-day-1.html"/>
            <updated>2014-09-18T11:00:00-07:00</updated>
            <id>http://brewhouse.io/blog/2014/09/18/ruby-kaigi-2014-day-1</id>
            <content type="html">&lt;p&gt;
  &lt;a href=&quot;/images/posts/ruby-kaigi-2014/japan.jpg&quot;&gt;
    &lt;img class=&quot;img-responsive&quot; alt=&quot;I&#39;m in Japan!&quot; src=&quot;/images/posts/ruby-kaigi-2014/japan.jpg&quot; /&gt;
  &lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;ZOMG! I’m in Japan!&lt;/p&gt;

&lt;p&gt;This year, I am fortunate enough to be one of the 750 attendees at Ruby Kaigi in
Tokyo. If you are among one of them, I’d love to meet you and chat about Ruby,
Rails, etc. Just look for my name tag!&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;img-responsive img-right&quot; alt=&quot;My name tag&quot; src=&quot;/images/posts/ruby-kaigi-2014/name-tag.jpg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;For those of you who couldn’t make it this year, don’t feel left out! I’ll be
writing a three-part blog post (one for each day) to cover the things I’ve
learned here, so you can watch the talks online that interestes you when they
become available. (You can also watch the &lt;a href=&quot;http://rubykaigi.org/2014&quot;&gt;live streams&lt;/a&gt;!)&lt;/p&gt;

&lt;p&gt;Without further ado, here is day 1 at Ruby Kaigi!&lt;/p&gt;

&lt;!-- break --&gt;

&lt;h2 id=&quot;cool-stuff&quot;&gt;Cool Stuff&lt;/h2&gt;

&lt;p&gt;
  &lt;a href=&quot;/images/posts/ruby-kaigi-2014/headset.jpg&quot;&gt;
    &lt;img class=&quot;img-responsive&quot; alt=&quot;Translation headset&quot; src=&quot;/images/posts/ruby-kaigi-2014/headset.jpg&quot; /&gt;
  &lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;All the talks are real-time translated into English and Japanese via these
headsets.&lt;/p&gt;

&lt;p&gt;
  &lt;a href=&quot;/images/posts/ruby-kaigi-2014/goodies.jpg&quot;&gt;
    &lt;img class=&quot;img-responsive&quot; alt=&quot;This machine sells the goodies&quot; src=&quot;/images/posts/ruby-kaigi-2014/goodies.jpg&quot; /&gt;
  &lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;You can purchase some Ruby Kaigi goodies from this veding machine.&lt;/p&gt;

&lt;p&gt;
  &lt;a href=&quot;/images/posts/ruby-kaigi-2014/bento-box.jpg&quot;&gt;
    &lt;img class=&quot;img-responsive&quot; alt=&quot;A bento box!&quot; src=&quot;/images/posts/ruby-kaigi-2014/bento-box.jpg&quot; /&gt;
  &lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;Bento boxes for lunch!&lt;/p&gt;

&lt;p&gt;
  &lt;a href=&quot;/images/posts/ruby-kaigi-2014/ios8.jpg&quot;&gt;
    &lt;img class=&quot;img-responsive&quot; alt=&quot;iOS 8: The biggest release ever.&quot; src=&quot;/images/posts/ruby-kaigi-2014/ios8.jpg&quot; /&gt;
  &lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;Rule #1 and #2 of Ruby Kaigi – don’t upgrade your iPhone with the conference wifi!&lt;/p&gt;

&lt;h2 id=&quot;cruby-committers-whos-who-in-2014&quot;&gt;CRuby Committers Who’s Who in 2014&lt;/h2&gt;

&lt;p&gt;
  &lt;a href=&quot;/images/posts/ruby-kaigi-2014/zzak.jpg&quot;&gt;
    &lt;img class=&quot;img-responsive&quot; alt=&quot;It&#39;s @_zzak!&quot; src=&quot;/images/posts/ruby-kaigi-2014/zzak.jpg&quot; /&gt;
  &lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://twitter.com/nagachika&quot;&gt;@nogachika&lt;/a&gt;, who is known for his &lt;a href=&quot;http://d.hatena.ne.jp/nagachika/searchdiary?word=%2A%5Bchanges%5D&quot;&gt;ruby-trunk-changes&lt;/a&gt;
commentary (it’s like &lt;a href=&quot;http://rails-weekly.goodbits.io&quot;&gt;Rails weekly&lt;/a&gt; but for
Ruby trunk), gave a behind-the-scene view of CRuby development.&lt;/p&gt;

&lt;p&gt;There are 84 registered accounts on SVN (including a bot), 50 of which who had
at least one commit since Ruby Kaigi 2013. @nogachika introduced some of them in
his talk, including:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://twitter.com/yukihiro_matz&quot;&gt;@matz&lt;/a&gt; who invented Ruby (and
&lt;a href=&quot;https://github.com/mruby/mruby&quot;&gt;mruby&lt;/a&gt;), whose only commit of the year was to
&lt;a href=&quot;https://github.com/ruby/ruby/commit/ae9bda718da8181d47f379a243e384f892448c50&quot;&gt;bump the Ruby version&lt;/a&gt;
(Matz focuses more on the design aspect of Ruby as well as mruby development
these days).&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://twitter.com/koichisasada&quot;&gt;@ko1&lt;/a&gt; who introduced incremental GC in Ruby 2.2&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://twitter.com/nari3&quot;&gt;@nari&lt;/a&gt; who introduced Symbol GC, which played a key role in Rails’ plan to target 2.2+ exclusively in Rails 5&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://twitter.com/tmm1&quot;&gt;@tmm1&lt;/a&gt; who introduced many performance optimizations, including speeding up &lt;code&gt;Hash#[]&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://twitter.com/znz&quot;&gt;@kazu&lt;/a&gt; the typo fixer&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Watch the talk online to get to know more of these people who built the language
we love!&lt;/p&gt;

&lt;h2 id=&quot;building-the-ruby-interpreter--what-is-easy-and-what-is-difficult&quot;&gt;Building the Ruby interpreter – What is easy and what is difficult?&lt;/h2&gt;

&lt;p&gt;
  &lt;a href=&quot;/images/posts/ruby-kaigi-2014/ko1.jpg&quot;&gt;
    &lt;img class=&quot;img-responsive&quot; alt=&quot;@ko1 giving his talk&quot; src=&quot;/images/posts/ruby-kaigi-2014/ko1.jpg&quot; /&gt;
  &lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://twitter.com/koichisasada&quot;&gt;@ko1&lt;/a&gt; works on Matz’s Ruby team at Heroku.
Over the years, he has accumulated an impressive list of contributions to the
Ruby language/implementation, including native thread locking, fibers, the new
method cache, flonum, RGenGC and incremental GC in Ruby 2.2 (more about it in
vol 0048 of the &lt;a href=&quot;http://magazine.rubyist.net/&quot;&gt;Rubyist Magazine&lt;/a&gt; and his talk
at the upcoming &lt;a href=&quot;http://rubyconf.org/&quot;&gt;RubyConf 2014&lt;/a&gt;).&lt;/p&gt;

&lt;h3 id=&quot;tradeoffs&quot;&gt;Tradeoffs&lt;/h3&gt;

&lt;p&gt;The overarching theme of his talk is about making tradeoffs. Like many things in
life, most decisions we make as programmers are tradeoffs that affects multiple
intertwined goals that are often in conflict with each other. As engineers, it
is our job to understand about these tradeoffs, carefully consider the factors
in-play and overcome these challenges.&lt;/p&gt;

&lt;h3 id=&quot;parallel-execution&quot;&gt;Parallel Execution&lt;/h3&gt;

&lt;p&gt;One of the specific example @ko1 talked about is the problem of supporting
parallel execution in Ruby.&lt;/p&gt;

&lt;p&gt;Simply providing parallel threads (i.e. getting rid of the GVL) to enable
parallel execution is actually a relatively easy task. The difficulties here is
to maintain good programming experience, good serial execution performance (due
to increased synchronization) and CRuby source code quality/maintainability.&lt;/p&gt;

&lt;p&gt;Running multiple threads in parallel under the typical “share everything”
programming model often results in subtle bugs that falls under the following
categories: race conditions, atomicity violation and order violation. Making
matters worse, the non-deterministic nature of parallel execution make these bugs
very difficult to reproduce. All of these problems contribute negatively to the
“programmer happiness”, which is a very important cornerstone of the Ruby
language.&lt;/p&gt;

&lt;p&gt;
  &lt;a href=&quot;/images/posts/ruby-kaigi-2014/thread-wizards.jpg&quot;&gt;
    &lt;img class=&quot;img-responsive&quot; alt=&quot;Wizards use threads&quot; src=&quot;/images/posts/ruby-kaigi-2014/thread-wizards.jpg&quot; /&gt;
  &lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;@ko1 believes that the tradeoff here is not unlike other problems we faced in
the past, such as the safety/performance tradeoff of garbage collection vs
manual memory management. In this case, parallel threads is like manual memory
management – while it’s highly performant and flexible, it’s also extremely
error-prone and very difficult to reason about. He believes that Ruby’s job is
to provide an alternative programming model for parallel execution that is safe
and programmer-friendly, as well as good debugging tools. Ultimately these will
be preferred over utilizing threads directly for most applications, just like
how garbage collection is now preferred by many programmers.&lt;/p&gt;

&lt;p&gt;He then briefly introduced a few ideas for implementing such models in Ruby and
some academic research on making parallel execution deterministic.&lt;/p&gt;

&lt;h3 id=&quot;gc-benchmarking-community-and-more&quot;&gt;GC, Benchmarking, Community and more!&lt;/h3&gt;

&lt;p&gt;In the rest of his talk, @ko1 did a similar analysis on other topics such as
Ruby garbage collection, making measurements and becoming a CRuby committer. If
those topics interests you, be sure to check out this talk!&lt;/p&gt;

&lt;h2 id=&quot;symbol-gc&quot;&gt;Symbol GC&lt;/h2&gt;

&lt;p&gt;
  &lt;a href=&quot;/images/posts/ruby-kaigi-2014/symbols.jpg&quot;&gt;
    &lt;img class=&quot;img-responsive&quot; alt=&quot;@nari talking about symbol GC&quot; src=&quot;/images/posts/ruby-kaigi-2014/symbols.jpg&quot; /&gt;
  &lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://twitter.com/nari3&quot;&gt;@nari&lt;/a&gt; is a CRuby committer from NaCl. He gave an
overview of the “Symbol GC” feature he implemented for Ruby 2.2.&lt;/p&gt;

&lt;p&gt;As I mentioned earlier, this is one of the key drivers for the Rails team to
target Ruby 2.2 in Rails 5. A common misconception about this feature is to
think that all symbols will be GC-ed so we don’t have to worry about it anymore.
As @nari shows us in this talk, it turns out this is not entirely correct.&lt;/p&gt;

&lt;p&gt;To understand this, we first have to understand the problems associated with
using symbols in CRuby 2.1 and below. Currently, once a symbol is allocated,
they are associated with a fixed numeric ID internally, and are never garbage
collected. This includes symbol literals (&lt;code&gt;:a_literal&lt;/code&gt; in Ruby code), dynamic
symbols created in Ruby land (e.g. &lt;code&gt;&quot;a string&quot;.to_sym&lt;/code&gt;) and other side-effects
(e.g. defining a method “foo” allocates a symbol &lt;code&gt;:foo&lt;/code&gt; for use in the methods
table).&lt;/p&gt;

&lt;p&gt;The pitfall associated with this approach is that over the execution time of
your program, you could accumulate many symbols that you no longer need, thus
leaking memory. This is particularly problematic for programs that have a long
lifetime and handles a lot of user inputs, as it has the potential to be
exploited by malicious users and cause DOS attacks.&lt;/p&gt;

&lt;p&gt;Web applications written in Ruby (e.g. Rails applications) happens to fit this
description perfectly. For example, the following piece of pseudo-code is bad:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
value = store.fetch(params[:key].to_sym)
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;As you can see, a user supplied string is being converted into a symbol (a
dynamic symbol allocation). This is problematic, because an attack could send
a bunch of different strings under this parameter and eventually cause the
server to crash when it runs out of memory. In fact, this has been a common
source of security issue in Rails (e.g. CVE-2012-3424), which explains the
desire to require Ruby 2.2 in Rails 5.&lt;/p&gt;

&lt;p&gt;Currently, symbols cannot be GC’ed because they need to maintain the same ID
for the C code that depends on it (for example, if the corresponding symbol has
been GC’ed as the C code looks it up via &lt;code&gt;ID2SYM&lt;/code&gt;, then things would break).&lt;/p&gt;

&lt;p&gt;To solve this problem, symbols are now classified into two categories – immortal
symbols and mortal symbols. As the name implies, immortal symbols are not
garbage collected by the runtime and have a stable ID, so baiscally how symbols
work today. Mortal symbols, on the other hand, can be garbage collected by the
runtime just like any other objects. They don’t have an ID, so they are usually
only useful in Ruby-land.&lt;/p&gt;

&lt;p&gt;As it becomes necessary, mortal symbols will be “pinned-down” by the runtime and
becomes immortal symbols. Because they are marked as “uncollectable”, their
memory address becomes their IDs and hence they can be used in C code. For
example, consider this piece of code:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
define_method(method_name.to_sym) { ... }
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Here, the runtime first allocates a mortal symbol (from &lt;code&gt;method_name.to_sym&lt;/code&gt;)
that can be garbage collected. As it is passed into &lt;code&gt;define_method&lt;/code&gt;, however,
the runtime would convert it into a immortal symbol so that it could be used in
the methods table. Once this happens, the symbol can no longer be garbage
collected – it is impossible to convert an immortal symbol back into a mortal
symbol. Also, if an immortal symbol with the same name has previously been
allocated from a different place, the same symbol will be reused here instead.&lt;/p&gt;

&lt;p&gt;While this approach eliminates a entire class of potential bugs, it also
introduces some new pitfalls. In particular, if a dynamic symbol (mortal by
default) is converted into an immortal symbol, your program will suffer from the
same vulnerability as before.&lt;/p&gt;

&lt;p&gt;Therefore, as application programmers, we still need to be mindful of when a
dynamic symbol might be converted into an immortal symbol. While you probably
aren’t defining dynamic methods based on user inputs (if you are, you might
have bigger problems to worry about!), it is possible that passing a dynamic
symbol into a C function might cause it to become immortalized (e.g. when the C
code calls &lt;code&gt;SYM2ID&lt;/code&gt; on it). While most of the CRuby C code has been refactored
to avoid this landmine, it is still a common problem in third-party extensions.
@nari noted that our ecosystem is still undergoing a transition period, and
things would get better overtime (Rails 5 is probably going to help accelerate
that as well).&lt;/p&gt;

&lt;p&gt;I highly recommend that you watch this talk, especially if you maintain a gem
and/or C-extension.&lt;/p&gt;

&lt;h2 id=&quot;transactional-memory-and-ruby&quot;&gt;Transactional Memory and Ruby&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://twitter.com/ReiOdaira&quot;&gt;@ReiOdaira&lt;/a&gt; and &lt;a href=&quot;https://twitter.com/brucehsu&quot;&gt;@brucehsu&lt;/a&gt;
did two different talks on how transactional memory can benefit the Ruby
language.&lt;/p&gt;

&lt;p&gt;Transactional memory is similar to how a database transaction works. It allows
the programmer to place a block of code inside a memory transaction, during
which all memory operations will be perceived as a single atomic operation from
other threads (or fails and the operations are rolledback and aren’t observable
from outside of the thread that requested the transaction).&lt;/p&gt;

&lt;p&gt;@ReiOdaira’s talk focuses on his research at IBM that utilize hardware-based
transactional memory to reduce Ruby’s dependency on the global VM lock (GVL)
thus improving the degree of achievable parallization.&lt;/p&gt;

&lt;p&gt;@brucehsu’s talk focuses on software-based transactional memory techniques, and
showed the world how it could be done by writing a new Ruby VM in Go, aptly
called &lt;a href=&quot;https://github.com/brucehsu/GobiesVM&quot;&gt;Gobies&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you are interested in how these cutting edge technologies can be used in
Ruby, these talks are for you!&lt;/p&gt;

&lt;h2 id=&quot;wrapping-up&quot;&gt;Wrapping Up&lt;/h2&gt;

&lt;p&gt;That about wraps up my notes for Day 1 of Ruby Kaigi 2014. Of course, there are
many other talks that are equally interesting. However, it’s already 3AM here in
Japan and I should probably get some rest ;) I encourage you to check out the
&lt;a href=&quot;http://rubykaigi.org/2014/schedule&quot;&gt;conference schedule&lt;/a&gt; for a full list of
talks.&lt;/p&gt;

&lt;p&gt;Stay tuned for part 2 &amp;amp; 3!&lt;/p&gt;
</content>

            
              <content type="image" src="http://brewhouse.io/images/brewhouse-symbol-large-200x200.png" />
            
        </entry>
      
    
      
        <entry>
            <title>Say Hello to Roundup Roger</title>
            <author>
              <name>Jenn Cooper</name>
              <email>cooper.jennl@gmail.com</email>
            </author>
            <link href="http://brewhouse.io/2014/06/27/say-hello-to-roundup-roger.html"/>
            <updated>2014-06-27T15:36:00-07:00</updated>
            <id>http://brewhouse.io/2014/06/27/say-hello-to-roundup-roger</id>
            <content type="html">&lt;p&gt;
  &lt;a href=&quot;https://github.com/BrewhouseTeam/roundup-roger&quot;&gt;
    &lt;img class=&quot;img-right img-responsive&quot; alt=&quot;This Week in Rails Logo&quot; src=&quot;https://s3.amazonaws.com/roundup-roger/roundup_roger_logo1.png&quot; /&gt;
  &lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;At Brewhouse, we spend Fridays doing creative work. During these wonderful days, we focus on interesting hacks and innovative projects. Over the last 10 weeks, I’ve been able to spend my Fridays working on a project with &lt;a href=&quot;https://github.com/pcreux&quot;&gt;Philippe Creux&lt;/a&gt; called &lt;a href=&quot;https://github.com/BrewhouseTeam/roundup-roger&quot;&gt;Roundup Roger&lt;/a&gt;. Roundup Roger is an open source tool to wrap-up a team’s day via email. A wrap-up is quite similar to an agile standup (or scrum), but at the end of the business day.&lt;/p&gt;

&lt;p&gt;You’re probably thinking, “How anti-social of you!”.  Yes, you’re right, we’re endorsing email correspondence over face-to-face interaction. But we’re talking about wrap-up meetings here, not beer Fridays.&lt;/p&gt;

&lt;p&gt;The point of a wrap-up is to educate the team on:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;What you’ve accomplished during the last business day&lt;/li&gt;
  &lt;li&gt;What you’ll be working on next&lt;/li&gt;
  &lt;li&gt;Whether you’ve hit any blockers that are impeding your progress&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- break --&gt;

&lt;p&gt;Email works well in this situation because it prevents &lt;em&gt;Chatty Carls&lt;/em&gt; from commandeering your meeting, and allows concise discourse that can be re-visited later if needed. Also, for those of us who have trouble with &lt;a href=&quot;http://www.joelonsoftware.com/articles/fog0000000022.html&quot;&gt;context switching&lt;/a&gt;, it can be easier to communicate the work you’ve accomplished by writing it out as opposed to communicating verbally.&lt;/p&gt;

&lt;p&gt;Another benefit of an email wrap-up is a flexible response time. Some of our team members finish later in the day than others, and often accomplish a lot after the in-person wrap-up happens. With Roundup Roger, team members have the flexibility to respond to the reminder email at any time. As long as they send their email before the roundup is sent in the morning, their contributions will be included.&lt;/p&gt;

&lt;h2 id=&quot;how-does-roundup-roger-work&quot;&gt;How Does Roundup Roger Work?&lt;/h2&gt;

&lt;p&gt;Reminder emails are sent out daily at a scheduled time. Each team member responds to the reminder email:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/reminder-email.png&quot; alt=&quot;reminder email&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;The following day, a roundup email is sent to the entire team with each member’s contributions from the previous day:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/roundup-email.png&quot; alt=&quot;roundup email&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;technical-details&quot;&gt;Technical Details&lt;/h2&gt;

&lt;p&gt;Roundup Roger is a &lt;a href=&quot;http://www.sinatrarb.com/&quot;&gt;Sinatra&lt;/a&gt; app, that capitalizes on &lt;a href=&quot;https://github.com/jeremyevans/sequel&quot;&gt;Sequel’s&lt;/a&gt; ORM layer.&lt;/p&gt;

&lt;p&gt;After using &lt;a href=&quot;http://rubyonrails.org/&quot;&gt;Rails&lt;/a&gt; over the last couple of years, I had become soft. It’s not the best realization to find you’ve become accustomed to having everything done for you. It took me a few weeks to stop trying to use &lt;a href=&quot;http://guides.rubyonrails.org/active_record_querying.html&quot;&gt;ActiveRecord&lt;/a&gt; when querying the database and in the end, I had a good cry and got over myself. I then became much better at using the Sequel gem’s ORM layer.&lt;/p&gt;

&lt;p&gt;I’ve also realized that Sinatra is not really a framework at all, but more of a library. I suppose this is why people call it a ‘micro-framework’.&lt;/p&gt;

&lt;p&gt;“Hey Sinatra! Thanks for nothing!”&lt;/p&gt;

&lt;p&gt;Jokes aside, Sinatra ended up being a great tool to solve this problem. As it turns out, we didn’t really need much of the ‘good stuff’ that comes along with Rails. The app itself doesn’t have a web UI and is meant to be run solely via scheduled tasks in production.&lt;/p&gt;

&lt;h3 id=&quot;building-emails&quot;&gt;Building Emails&lt;/h3&gt;

&lt;p&gt;To build emails, we used &lt;a href=&quot;https://github.com/solnic/virtus&quot;&gt;Virtus&lt;/a&gt; to create a common interface for defining attributes. It allowed us to do things like this:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;no&quot;&gt;OutboundEmail&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;recipients&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;subject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;subject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;When a user replies to a reminder email, we retrieve the payload passed from &lt;a href=&quot;https://www.mandrill.com/&quot;&gt;Mandrill&lt;/a&gt;, and grab the name, email and body, such that we can later apply these to the roundup email.&lt;/p&gt;

&lt;p&gt;When we build the roundup email, we strip each email body to remove signatures. This was somewhat tricky, as different email clients apply signatures differently.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;no&quot;&gt;PATTERNS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;—\n+Sent&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;--&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;&amp;gt;? ?On&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;freeze&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;stripped_body&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;PATTERNS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pattern&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
      &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;body&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strip_pattern&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pattern&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strip&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;strip_pattern&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pattern&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gsub&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/\n(&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pattern&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;| [^\n]+\n?[^\n]+\n+\&amp;gt;).*/m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We then separate each person’s contribution with a random ascii separator, because, WHY NOT?&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;separator&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;
      &lt;span class=&quot;s2&quot;&gt;&amp;quot;█║▌│ █│║▌ ║││█║▌ │║║█║ │║║█║ █│║▌&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;s2&quot;&gt;&amp;quot;▇ ▅ █ ▅ ▇ ▂ ▃ ▁ ▁ ▅ ▃ ▅ ▅ ▄ ▅&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;s2&quot;&gt;&amp;quot;★★★★★★★★★★★★★★★★★★&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;s2&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sample&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;sending-emails&quot;&gt;Sending Emails&lt;/h3&gt;

&lt;p&gt;We use &lt;a href=&quot;https://github.com/benprew/pony&quot;&gt;Pony&lt;/a&gt; to send emails. This is where the magic happens…&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SendOutboundEmail&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;email&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;Pony&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mail&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
      &lt;span class=&quot;ss&quot;&gt;:to&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;email&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;ss&quot;&gt;:from&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ENV&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;EMAIL_FROM&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;ss&quot;&gt;:subject&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;email&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;ss&quot;&gt;:html_body&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;email&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;ss&quot;&gt;:via&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:smtp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;ss&quot;&gt;:via_options&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;ss&quot;&gt;:address&lt;/span&gt;        &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ENV&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;SMTP_ADDRESS&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;ss&quot;&gt;:port&lt;/span&gt;           &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ENV&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;SMTP_PORT&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;ss&quot;&gt;:enable_starttls_auto&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;ss&quot;&gt;:user_name&lt;/span&gt;      &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ENV&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;SMTP_USER_NAME&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;ss&quot;&gt;:password&lt;/span&gt;       &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ENV&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;SMTP_PASSWORD&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;ss&quot;&gt;:authentication&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:plain&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;scheduling-and-business-time&quot;&gt;Scheduling and Business Time&lt;/h3&gt;

&lt;p&gt;We use the &lt;a href=&quot;https://github.com/bokmann/business_time&quot;&gt;Business Time&lt;/a&gt; gem to prevent reminders and roundups from being sent on weekends. Perhaps this item should be configurable for those of you who like to work on weekends (why??).&lt;/p&gt;

&lt;p&gt;The Heroku Scheduler plans our tasks for daily execution.&lt;/p&gt;

&lt;p&gt;We’d like to think setup is pretty simple. Just schedule the following two rake tasks based on your team’s needs:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;rake&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;send_reminders&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;rake&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;send_roundup&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;There is also a &lt;code&gt;send_test_email&lt;/code&gt; rake task to test whether SMTP settings are configured correctly.&lt;/p&gt;

&lt;h2 id=&quot;we-use-this&quot;&gt;We Use This&lt;/h2&gt;

&lt;p&gt;Since we like to &lt;a href=&quot;http://brewhouse.io/blog/2014/04/24/this-week-in-rails-the-backstory.html#dogfooding&quot;&gt;eat our own dog food&lt;/a&gt; at Brewhouse, we’ve been using Roundup Roger as part of our daily efforts for the last couple of months. Our hope is that others will find the same value that we’ve found. The more teams that try this out, the more we’ll know about how to improve it. As always, feedback and contributions are welcome.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/BrewhouseTeam/roundup-roger&quot;&gt;Give it a try!&lt;/a&gt;&lt;/p&gt;

</content>

            
              <content type="image" src="http://brewhouse.io/images/brewhouse-symbol-large-200x200.png" />
            
        </entry>
      
    
      
        <entry>
            <title>Gourmet Service Objects</title>
            <author>
              <name>Philippe Creux</name>
              <email>philippe@brewhouse.io</email>
            </author>
            <link href="http://brewhouse.io/blog/2014/04/30/gourmet-service-objects.html"/>
            <updated>2014-04-30T12:37:00-07:00</updated>
            <id>http://brewhouse.io/blog/2014/04/30/gourmet-service-objects</id>
            <content type="html">&lt;p&gt;Is your Rails app’s business logic hidden in ugly controllers with 10+ lines long method and fat models powered by Linguini callbacks? Are your tests getting out of control and you spend most of your days looking at green dots? Do you want to impress your coworkers with Unicorn level code?&lt;/p&gt;

&lt;p&gt;You need Gourmet Service Objects™!&lt;/p&gt;

&lt;p&gt;I have been using service objects for the past three years and they reconciled my take on Rails (as much as automated testing reconciled my feelings for software programming!).&lt;/p&gt;

&lt;!-- break --&gt;

&lt;h2 id=&quot;a-service-object-does-one-thing&quot;&gt;A service object &lt;em&gt;does one thing&lt;/em&gt;&lt;/h2&gt;

&lt;p&gt;A service object (aka method object) performs one action. It holds the business logic to perform that action. Here is an example:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# app/services/accept_invite.rb&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;AcceptInvite&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;invite&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;invite&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;accept!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;UserMailer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;invite_accepted&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;invite&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;deliver&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The three conventions I follow are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Services go under the &lt;code&gt;app/services&lt;/code&gt; directory. I encourage you to use subdirectories for business logic-heavy domains. For instance:
    &lt;ul&gt;
      &lt;li&gt;The file &lt;code&gt;app/services/invite/accept.rb&lt;/code&gt; will define &lt;code&gt;Invite::Accept&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;while &lt;code&gt;app/services/invite/create.rb&lt;/code&gt; will define &lt;code&gt;Invite::Create&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Services start with a verb (and do not end with Service): &lt;code&gt;ApproveTransaction&lt;/code&gt;, &lt;code&gt;SendTestNewsletter&lt;/code&gt;, &lt;code&gt;ImportUsersFromCsv&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Services respond to the &lt;code&gt;call&lt;/code&gt; method. I found using another verb makes it a bit redundant: &lt;code&gt;ApproveTransaction.approve()&lt;/code&gt; does not read well. Also, the &lt;code&gt;call&lt;/code&gt; method is the de facto method for lambda, procs, and method objects.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;benefits&quot;&gt;Benefits&lt;/h2&gt;

&lt;h3 id=&quot;service-objects-show-what-my-application-does&quot;&gt;Service objects show what my application &lt;em&gt;does&lt;/em&gt;&lt;/h3&gt;

&lt;p&gt;I can just glance over the &lt;code&gt;services&lt;/code&gt; directory to see what my application &lt;strong&gt;does&lt;/strong&gt;: &lt;code&gt;ApproveTransaction&lt;/code&gt;, &lt;code&gt;CancelTransaction&lt;/code&gt;, &lt;code&gt;BlockAccount&lt;/code&gt;, &lt;code&gt;SendTransactionApprovalReminder&lt;/code&gt;…&lt;/p&gt;

&lt;p&gt;A quick look into a service object and I know what business logic is involved. I don’t have to go through the controllers, ActiveRecord model callbacks and observers to understand what “approving a transaction” involves.&lt;/p&gt;

&lt;h3 id=&quot;clean-up-models-and-controllers&quot;&gt;Clean-up models and controllers&lt;/h3&gt;

&lt;p&gt;Controllers turn the request (params, session, cookies) into arguments, pass them down to the service and redirect or render according to the service response.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;InviteController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ApplicationController&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;accept&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;invite&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Invite&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;find_by_token!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:token&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;AcceptInvite&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;invite&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;current_user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;redirect_to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;invite&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;notice&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Welcome!&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;redirect_to&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;alert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Oopsy!&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Models only deal with associations, scopes, validations and persistence.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Invite&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ActiveRecord&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Base&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;accept!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;update_attributes!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;ss&quot;&gt;accepted_by_user_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;ss&quot;&gt;accepted_at&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This makes models and controllers much easier to test and maintain!&lt;/p&gt;

&lt;h3 id=&quot;dry-and-embrace-change&quot;&gt;DRY and Embrace change&lt;/h3&gt;

&lt;p&gt;I keep service objects as simple and small as I can. I compose service
objects with other service objects, and I reuse them. My code is quite
modular and I’m ready to Embrace Change™.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SendTestNewsletter&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;newsletter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;campaign&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;CreateMailchimpCampaign&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;newsletter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;DeliverTestEmail&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;campaign&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;DeleteCampaign&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;campaign&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# Don&amp;#39;t keep the test campaign around&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SendNewsletter&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;newsletter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;campaign&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;CreateMailchimpCampaign&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;newsletter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;DeliverCampaign&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;campaign&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# Could easily delete here as well, but we want to retain the legit campaigns&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;clean-up-and-speed-up-your-test-suite&quot;&gt;Clean up and speed up your test suite&lt;/h3&gt;

&lt;p&gt;Services are easy and fast to test since they are small ruby objects with one point of entry (the &lt;code&gt;call&lt;/code&gt; method). Complex services are composed with other services, so you can split up your tests easily.&lt;/p&gt;

&lt;p&gt;I tend not to use any mocks or stub to test services that deal with ActiveRecord objects. &lt;a href=&quot;https://github.com/pcreux/rspec-set&quot;&gt;rspec-set&lt;/a&gt; helps me keep the running time quite low while having simple and robusts test. Once again, service objects are small and do one thing, so they tend to have a limited amount of dependencies.&lt;/p&gt;

&lt;h3 id=&quot;call-them-from-anywhere&quot;&gt;Call them from anywhere&lt;/h3&gt;

&lt;p&gt;Service objects are likely to be called from controllers as well as:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Other service objects:&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BatchSyncUsers&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;users&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;users&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;SyncUser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;DelayedJob / Rescue / Sidekiq Jobs:&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SyncInvoicesJob&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;work&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;SyncInvoices&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;call&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Rake tasks:&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;task&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:sync&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;no&quot;&gt;SyncInvoices&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;call&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;The console:&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;vg&quot;&gt;$&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ApproveTransaction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;transaction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;days&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ago&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Even from test helpers to setup my integration tests!&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;create_approved_transaction&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;transaction&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;FactoryGirl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:transaction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;no&quot;&gt;ApproveTransaction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;transaction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;FactoryGirl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;transaction&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;real-world-services&quot;&gt;Real world services&lt;/h2&gt;

&lt;p&gt;I like to use instances of service objects to take advantage of private methods. I add Virtus into the mix to handle parameters. For instance:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;AcceptInvite&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kp&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;call&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;kp&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Virtus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;attribute&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:invite&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;no&quot;&gt;Invite&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;attribute&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;    &lt;span class=&quot;no&quot;&gt;User&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;attribute&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:account&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Account&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;attribute&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;    &lt;span class=&quot;no&quot;&gt;Time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;   &lt;span class=&quot;ss&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;proc&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;now&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;unless&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;invite_already_accepted?&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;accept_invite&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;send_notification_to_inviter&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;kp&quot;&gt;private&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;invite_already_accepted?&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;accept_invite&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;send_notification_to_inviter&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I extracted the &lt;code&gt;def self.call&lt;/code&gt; into a helper module &lt;code&gt;Service&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Service&lt;/span&gt;
  &lt;span class=&quot;kp&quot;&gt;extend&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ActiveSupport&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Concern&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;included&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;kp&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;call&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;AcceptInvite&lt;/span&gt;

  &lt;span class=&quot;kp&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Service&lt;/span&gt;
  &lt;span class=&quot;kp&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Virtus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;attribute&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:invite&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Invite&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;attribute&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;User&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;attribute&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:account&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Account&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;attribute&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;proc&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;now&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;unless&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;invite_already_accepted?&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;accept_invite&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;send_notification_to_inviter&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;kp&quot;&gt;private&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I sometimes inject dependencies to test services that orchestrate
complex operations. Since services respond to the &lt;code&gt;call&lt;/code&gt; method, a
simple &lt;code&gt;proc&lt;/code&gt; does the job.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Trumpet&lt;/span&gt;
  &lt;span class=&quot;kp&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Service&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Bass&lt;/span&gt;
  &lt;span class=&quot;kp&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Service&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;OutOfTuneError&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;StandardError&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Conductor&lt;/span&gt;
  &lt;span class=&quot;kp&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Service&lt;/span&gt;
  &lt;span class=&quot;kp&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Virtus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;attribute&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:trumpet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Trumpet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;proc&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Trumpet&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;attribute&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:bass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;    &lt;span class=&quot;no&quot;&gt;Bass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;    &lt;span class=&quot;ss&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;proc&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Bass&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;trumpet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;C4 .. G4&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;bass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;C2 D2 E2 E2&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;rescue&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;OutOfTuneError&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;


&lt;span class=&quot;n&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Conductor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;ss&quot;&gt;trumpet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;  &lt;span class=&quot;nb&quot;&gt;proc&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;onk! onk!&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;ss&quot;&gt;bass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;     &lt;span class=&quot;nb&quot;&gt;proc&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;raise&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;OutOfTuneError&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sound_awful&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;values-the-return&quot;&gt;Values: The Return&lt;/h2&gt;

&lt;p&gt;The services I write have three flavours when it comes to communicating back to the caller.&lt;/p&gt;

&lt;h3 id=&quot;flavour-1-fail-loudly&quot;&gt;Flavour #1: Fail loudly&lt;/h3&gt;

&lt;p&gt;Most services are not supposed to fail. They do not return anything (meaningful) but they raise an exception when something goes wrong. Those services are likely to use methods that fail loudly such as &lt;code&gt;Hash#fetch&lt;/code&gt;, &lt;code&gt;create!&lt;/code&gt;, &lt;code&gt;save!&lt;/code&gt;, &lt;code&gt;find_by_name!&lt;/code&gt; etc.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ContractController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;LoggedInController&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sign&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;contract&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;current_user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;contracts&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;SignContract&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;contract&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;contract&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;current_user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;flash&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:notice&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Contract signed!&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;redirect_to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;contract&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;flavour-2-return-a-persisted-activerecord-model&quot;&gt;Flavour #2: Return a persisted ActiveRecord model&lt;/h3&gt;

&lt;p&gt;The caller can check if an AR instance is persisted and then has access to its errors.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;InviteController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;LoggedInController&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;create&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;attributes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;invite_params&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;merge&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;creator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;current_user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@invite&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;CreateInvite&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;attributes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@invite&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;persisted?&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;redirect_to&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@invite&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;render&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;alert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;errors_for_humans&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vi&quot;&gt;@invite&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;errors&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;kp&quot;&gt;private&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;invite_params&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:invite&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;permit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:token&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;flavour-3-response-object&quot;&gt;Flavour #3: Response object&lt;/h3&gt;

&lt;p&gt;Some services have several outcomes and complex error handling. They return a response object which responds to &lt;code&gt;success?&lt;/code&gt; and &lt;code&gt;error(s)&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;InviteController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;LoggedInController&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;accept&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;AcceptInvitation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;ss&quot;&gt;invite&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Invite&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;find_by_token!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:token&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
      &lt;span class=&quot;ss&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;current_user&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;success?&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;redirect_to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;root_path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;notice&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Welcome!&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;redirect_to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;root_path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;alert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;That’s it for service objects for now. Experiment with them, as I
believe they will make your codebase more expressive and easier to
maintain!&lt;/p&gt;

&lt;p&gt;I’m happy to respond to any question or concern you guys might have. Feel free to
leave a comment below. &amp;lt;3 &amp;lt;3 &amp;lt;3&lt;/p&gt;

</content>

            
              <content type="image" src="http://brewhouse.io/images/brewhouse-symbol-large-200x200.png" />
            
        </entry>
      
    
      
        <entry>
            <title>This Week in Rails: the Backstory</title>
            <author>
              <name>Godfrey Chan</name>
              <email>godfrey@brewhouse.io</email>
            </author>
            <link href="http://brewhouse.io/blog/2014/04/24/this-week-in-rails-the-backstory.html"/>
            <updated>2014-04-24T09:04:00-07:00</updated>
            <id>http://brewhouse.io/blog/2014/04/24/this-week-in-rails-the-backstory</id>
            <content type="html">&lt;p&gt;
  &lt;a href=&quot;http://brewhouse.io/blog/2014/04/24/this-week-in-rails-the-backstory.html&quot;&gt;
    &lt;img class=&quot;img-right img-responsive&quot; alt=&quot;This Week in Rails Logo&quot; src=&quot;/images/2014-04-24-this-week-in-rails-backstory.jpg&quot; /&gt;
  &lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;I recently started a newsletter called &lt;a href=&quot;http://rails-weekly.goodbits.io&quot;&gt;&lt;em&gt;This week in Rails&lt;/em&gt;&lt;/a&gt;
(you may have &lt;a href=&quot;http://ruby5.envylabs.com/episodes/495-episode-458-april-22nd-2014#story-3&quot;&gt;heard&lt;/a&gt;
about it) – a weekly digest of notable commits, issues, pull-requests and other
interesting things happening around the Rails ecosystem. I’d like to share my
motivations behind the newsletter and some of the things I’ve learned along the way.&lt;/p&gt;

&lt;!-- break --&gt;

&lt;h2 id=&quot;knowledge-sharing&quot;&gt;Knowledge Sharing&lt;/h2&gt;

&lt;p&gt;My biggest goal of the newsletter is to share knowledge. Since I &lt;a href=&quot;https://twitter.com/bitsweat/status/413014212303024128&quot;&gt;joined&lt;/a&gt;
the Rails committer team last year, I had the opportunity to follow the
development of Rails very closely. This helped me to gain a much better
understanding of the tools I use at work and greatly enhanced my productivity.
It also forced me to read a lot of code written by other people, which is a
great way to learn and improve my craft as a programmer.&lt;/p&gt;

&lt;p&gt;Despite the tremendous benefits, following a project as large as Rails could be
quite overwhelming. On average, I receive about 40 email notifications from
GitHub every day, most of them from new comments on issues and pull-requests.
At times, it could also be quite difficult to understand the background of a
commit or pull-request just by reading the code.&lt;/p&gt;

&lt;p&gt;In my newsletter I attempt to unlock these learning opportunities for more
people by filtering out most of the noise and presenting the tidbits in an
easy-to-digest format. I also try to provide a little bit of background to help
my readers understand the context of the code.&lt;/p&gt;

&lt;h2 id=&quot;highlighting--encouraging-contributions&quot;&gt;Highlighting &amp;amp; Encouraging Contributions&lt;/h2&gt;

&lt;p&gt;If you aren’t paying close attention, you often only hear about the shiniest new
features on every major/minor release of Rails. However, open-source work is all
about the non-shiny, seemingly unimportant changes. Every week there are
countless individual contributors pouring hours upon hours of their personal
time to quietly improve rails – one bug report, one bug fix, one
documentation change, one small feature at a time. The stability you enjoy on
Rails today is a battle fought and won by &lt;a href=&quot;http://contributors.rubyonrails.org/&quot;&gt;literally thousands&lt;/a&gt;
of nameless heroes.&lt;/p&gt;

&lt;p&gt;By highlighting these smaller patches in my newsletter, my goal is to demystify
the process of contributing to Rails and hopefully encourage more contributions
(to Rails and other open-source projects) over time.&lt;/p&gt;

&lt;h2 id=&quot;dogfooding&quot;&gt;Dogfooding&lt;/h2&gt;

&lt;p&gt;I am also a big believer of &lt;a href=&quot;http://en.wikipedia.org/wiki/Eating_your_own_dog_food&quot;&gt;eating your own dogfood&lt;/a&gt;.
At Brewhouse, we are working on an in-house product called &lt;a href=&quot;https://goodbits.io/?utm_source=brewhouse-blog-backstory&quot;&gt;Goodbits&lt;/a&gt;
(you can read more about it &lt;a href=&quot;http://blog.goodbits.io/2014/04/15/we-built-goodbits/&quot;&gt;here&lt;/a&gt;).
The Rails newsletter gave me the perfect opportunity to use the product the same
way our customers would. This is a great way to learn about the need of our
customers needs and experience the quirks in the product first-hand.&lt;/p&gt;

&lt;p&gt;This effort has already paid off a few times by now. As an example, one of the
early issues of my newsletter tipped off the wrong wires inside Gmail’s spam
filter and never made it to my subscribers’ inbox. After a lot of
trial-and-error, we determined that it was because I hotlinked my custom logo
image from a public Dropbox folder. Following our findings, we implemented a
more robust image hosting solution before we officially rolled out the custom
logo feature for our customers.&lt;/p&gt;

&lt;h2 id=&quot;the-results&quot;&gt;The Results&lt;/h2&gt;

&lt;p&gt;The newsletter has been very well-received. In the span of a few weeks, over 450
readers subscribed to my newsletter. Except for the one issue that went into the
spam folder, the newsletter had consistently logged an open rate of over 80% and
over 40% click rate. (This is &lt;a href=&quot;http://mailchimp.com/resources/research/email-marketing-benchmarks/&quot;&gt;well above&lt;/a&gt;
typical “marketing” emails.)&lt;/p&gt;

&lt;p&gt;To be honest, this completely exceeded any expectations I had when I started
this as a &lt;a href=&quot;http://brewhouse.io/2014/04/04/welcome-to-brewhouse.html#staying-creative&quot;&gt;Friday afternoon project&lt;/a&gt;.
While not very “sexy”, it turns out that email newsletters could be a very
powerful medium to engage with your readers.&lt;/p&gt;

&lt;p&gt;If you haven’t already, you should &lt;a href=&quot;http://rails-weekly.goodbits.io/archive&quot;&gt;check out my newsletter&lt;/a&gt;
and consider &lt;a href=&quot;http://rails-weekly.goodbits.io&quot;&gt;subscribing&lt;/a&gt;! Got some
interesting niche content to share with your customers, coworkers or your
community? Give &lt;a href=&quot;https://goodbits.io/?utm_source=brewhouse-blog-backstory&quot;&gt;Goodbits&lt;/a&gt;
a spin and let us know what you think!&lt;/p&gt;
</content>

            
              <content type="image" src="http://brewhouse.io/images/brewhouse-symbol-large-200x200.png" />
            
        </entry>
      
    
      
        <entry>
            <title>Welcome to Brewhouse</title>
            <author>
              <name>Kalvir Sandhu</name>
              <email>kalv@brewhouse.io</email>
            </author>
            <link href="http://brewhouse.io/2014/04/04/welcome-to-brewhouse.html"/>
            <updated>2014-04-04T16:34:00-07:00</updated>
            <id>http://brewhouse.io/2014/04/04/welcome-to-brewhouse</id>
            <content type="html">&lt;p&gt;Hello, we’re Brewhouse. We are a group of creative developers who have come together to continue building great products for ourselves and others.&lt;/p&gt;

&lt;p&gt;We love building applications. This has made us learn and evolve our techniques to best deliver great software products. Products that deliver value, fun, and are backed by quality code and tests.&lt;/p&gt;

&lt;p&gt;I want to expand a little – to those that know us, those that don’t, who we are and what we do.&lt;/p&gt;

&lt;!-- break --&gt;

&lt;h2 id=&quot;full-transparency&quot;&gt;Full Transparency&lt;/h2&gt;

&lt;p&gt;When I first started talking about Brewhouse I took everything I learned
from working with my friends at &lt;a href=&quot;http://gofreerange.com&quot;&gt;GoFreeRange&lt;/a&gt;.
The one thing I wanted to bring to this business was full transparency
internally and with clients. We’ve implemented this and are very happy with the results.&lt;/p&gt;

&lt;p&gt;As an example, in the early months, the team proposed to discount their salaries for a month so we could buy nice chairs for the office (yep, those lovely beauties in the picture below). That was important because we sit in them all day. The key learning here was that at the time, I didn’t know this was so important and without the transparency on the decision, this suggestion would not have been made.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/chairs.jpg&quot; alt=&quot;Our office chairs&quot; title=&quot;Our office chairs&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Our team has full visibility on everything. This includes data like our budget, salaries, cashflow, cap table and conversations with potential clients. We really want to continue this as we grow but understand that it is going to be challenging, however, we’re excited to learn more about this.&lt;/p&gt;

&lt;h2 id=&quot;staying-creative&quot;&gt;Staying Creative&lt;/h2&gt;

&lt;p&gt;Every week we meet for a “weekly brew”. As we work with different clients and internal projects on rotation, we find it important to have a meeting outside of the office to do a roundup and plan things for the weeks ahead.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/weekly-brew.jpg&quot; alt=&quot;Weekly brew at Timbertrain, Vancouver&quot; title=&quot;Weekly brew at Timbertrain, Vancouver&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We only charge out 30 hours of development time a week so that leaves a day to work on internal hacks, creative projects or to prepare for the week ahead. It’s very difficult to work for clients and on the company at the same time. Godfrey, for example, contributes his time to the &lt;a href=&quot;http://rubyonrails.org/&quot;&gt;Rails&lt;/a&gt; open source project and collects content for a &lt;a href=&quot;http://rails-weekly.goodbits.io&quot;&gt;rails weekly roundup&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Community is important to us and we gain value from others all the time. We help organize &lt;a href=&quot;http://vanruby.org/&quot;&gt;#vanruby&lt;/a&gt;’s meetups and hack nights. This is now baked into what we do at Brewhouse and is no longer something I do on my own. We’re going to brew as much tech here in Vancouver as we can.&lt;/p&gt;

&lt;h2 id=&quot;code-curation-and-mentorship&quot;&gt;Code Curation and Mentorship&lt;/h2&gt;

&lt;p&gt;With some of our clients-to-date, we’ve trialed the notion of CTO-for-hire, as well as code curation workshops. The results have been interesting and deserves another post.&lt;/p&gt;

&lt;p&gt;We are going to continue code curating services in a workshop format and will soon be providing these services part-time for some of our existing clients.&lt;/p&gt;

&lt;h2 id=&quot;product-amp-service&quot;&gt;Product &amp;amp; Service&lt;/h2&gt;

&lt;p&gt;Yep, we do product, as well as service. It’s hard but we’re doing it.&lt;/p&gt;

&lt;p&gt;In the past, I’ve worked with clients for long periods of time and then try to buy back time to then work on products – 4 months on service; 1 month on product. This didn’t work. It was very hard to keep momentum and the pace up. To ship &lt;a href=&quot;http://caliper.io&quot;&gt;Caliper&lt;/a&gt; last year, I found momentum helped keep focus and drive the solution to best fit the problem our customers were having.&lt;/p&gt;

&lt;p&gt;At Brewhouse, we’ll always be working on product. This has enabled us to start sending out invites to our new service, &lt;a href=&quot;https://goodbits.io&quot;&gt;Goodbits&lt;/a&gt;. This time split is working well for our business.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://goodbits.io&quot;&gt;&lt;img src=&quot;/images/posts/goodbits.jpg&quot; alt=&quot;Goodbits&quot; title=&quot;Goodbits&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;That’s all for now. We’ll be writing about some of the themes I touched on in this post and web development learnings in the future. If this is interesting to you, subscribe to our blog for new articles or our newsletter, where we’ll also be sharing what we read during the week.&lt;/p&gt;
</content>

            
              <content type="image" src="http://brewhouse.io/images/brewhouse-symbol-large-200x200.png" />
            
        </entry>
      
    
      
        <entry>
            <title>What's new in Rails 4.1</title>
            <author>
              <name>Godfrey Chan</name>
              <email>godfrey@brewhouse.io</email>
            </author>
            <link href="http://brewhouse.io/blog/2013/12/17/whats-new-in-rails-4-1.html"/>
            <updated>2013-12-17T02:32:40-08:00</updated>
            <id>http://brewhouse.io/blog/2013/12/17/whats-new-in-rails-4-1</id>
            <content type="html">&lt;blockquote&gt;&lt;em&gt;This was originally published on the Coherence blog on December 17th, 2013. It has been migrated here for historical purposes.&lt;/em&gt;&lt;/blockquote&gt;

&lt;p&gt;In case you haven’t been paying attention, Rails 4.1 beta &lt;a href=&quot;http://weblog.rubyonrails.org/&quot;&gt;was released today&lt;/a&gt;!
While this is a minor release, there are still plenty of handy new features
that’s worth getting excited about. Here are a few of my favourites, along with
some thoughts on why I think they are useful.&lt;/p&gt;

&lt;!-- break --&gt;

&lt;p&gt;(This post is based on my lightning talk at &lt;a href=&quot;http://vanruby.org/&quot;&gt;#VANRUBY&lt;/a&gt;, the original
slides can be found &lt;a href=&quot;http://www.slideshare.net/godfreykfc/rails-41&quot;&gt;here&lt;/a&gt;.)&lt;/p&gt;

&lt;h2 id=&quot;action-mailer-previews&quot;&gt;Action Mailer Previews&lt;/h2&gt;

&lt;p&gt;Testing email templates in Rails has always been pretty painful. My current
workflow involves:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Make changes to the email template&lt;/li&gt;
  &lt;li&gt;Deliver the email via the rails console&lt;/li&gt;
  &lt;li&gt;Check the output in the browser&lt;/li&gt;
  &lt;li&gt;Rinse and repeat&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The &lt;a href=&quot;https://github.com/ryanb/letter_opener&quot;&gt;Letter Opener&lt;/a&gt; gem makes this easier, but this is still far
from ideal. Fortunately for us, &lt;a href=&quot;https://github.com/pixeltrix&quot;&gt;@pixeltrix&lt;/a&gt; did
the hard work to integrate the &lt;a href=&quot;https://github.com/37signals/mail_view&quot;&gt;MailView&lt;/a&gt; gem into Rails 4.1. You
can now easily create previews for your mailers and view them in the browser
from &lt;code&gt;http://localhost:3000/rails/mailers&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# In /test/mailers/previews/notifier_preview.rb&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;NotifierPreview&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ActionMailer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Preview&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;welcome&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# Mock up some data for the preview&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;FactoryGirl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# Return a Mail::Message here (but don&amp;#39;t deliver it!)&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;Notifier&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;welcome&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;It should be noted that although the preview files live under the test
directory by default (which can be changed via &lt;code&gt;config.action_mailer.preview_path&lt;/code&gt;),
it is actually run inside the development environment. So if you need to use
gems like &lt;code&gt;FactoryGirl&lt;/code&gt; to generate fake data, you’ll need to make sure they
are added to the development group in your Gemfile as well.&lt;/p&gt;

&lt;p&gt;If your app doesn’t currently have a &lt;code&gt;test&lt;/code&gt; folder (i.e. &lt;code&gt;rspec&lt;/code&gt; users), it
might be tempting to change the default &lt;code&gt;config.action_mailer.preview_path&lt;/code&gt;
to something like &lt;code&gt;/app/mailer/previews&lt;/code&gt;. However, please be aware that the
&lt;code&gt;/app&lt;/code&gt; folder is eager-loaded in production, so that’s probably not the best
place to put these preview files.&lt;/p&gt;

&lt;p&gt;Read more about this feature:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://edgeguides.rubyonrails.org/4_1_release_notes.html#action-mailer-previews&quot;&gt;Release notes&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://edgeapi.rubyonrails.org/classes/ActionMailer/Base.html&quot;&gt;Documentation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Pull request: &lt;a href=&quot;https://github.com/rails/rails/pull/13332&quot;&gt;#13332&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;active-record-enums&quot;&gt;Active Record Enums&lt;/h2&gt;

&lt;p&gt;Have you ever used multiple &lt;code&gt;boolean&lt;/code&gt; columns to compose a single complex state
on your models? I’ve definitely done this before and things get out of
hand really quickly.&lt;/p&gt;

&lt;p&gt;Enums to the rescue!&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Bug&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ActiveRecord&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Base&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# Relevant schema change looks like this:&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;#&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# create_table :bugs do |t|&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;#   t.column :status, :integer, default: 0 # defaults to the first value (i.e. :new)&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# end&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:assigned&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:in_progress&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:resolved&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:rejected&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:reopened&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;belongs_to&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:assignee&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;class_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;Developer&amp;#39;&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;assignee&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;developer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;developer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new?&lt;/span&gt;
      &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;status&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:assigned&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
      &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;status&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:new&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;Bug&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;resolved&lt;/span&gt;           &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; a scope to find all resolved bugs&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;bug&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;resolved?&lt;/span&gt;          &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; check if bug has the status :resolved&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;bug&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;resolved!&lt;/span&gt;          &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; update! the bug with status set to :resolved&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;bug&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;             &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; a symbol describing the bug&amp;#39;s status&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;bug&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;status&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:resolved&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; set the bug&amp;#39;s status to :resolved&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Internally, these states are mapped to integers in the database to
save space. It’s also worth mentioning that the methods added by the &lt;code&gt;enum&lt;/code&gt;
macro are mixed-in via a module. This means you can easily override them in
your model and use &lt;code&gt;super&lt;/code&gt; to reach the original implementation.&lt;/p&gt;

&lt;p&gt;There are a few caveats you should keep in mind when using this feature:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;I&lt;/strong&gt;. Despite its name, this feature doesn’t actually use the &lt;code&gt;ENUM&lt;/code&gt; type that is
   implemented in certain databases. The mapping between states
   and their corresponding integers are maintained in the Ruby model file.
   This means that you should not change the order of the &lt;code&gt;enum&lt;/code&gt; symbols once
   they are added. To remove unused states, you can use an explicit mapping:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Bug&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ActiveRecord&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Base&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kp&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;ss&quot;&gt;in_progress&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;ss&quot;&gt;resolved&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;ss&quot;&gt;rejected&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;ss&quot;&gt;reopened&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;II&lt;/strong&gt;. Avoid using the same names inside different enums in the same class!
   Doing so will leave Active Record very confused!&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Bug&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ActiveRecord&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Base&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;code_review_status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# WARNING: Don&amp;#39;t do this!&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;III&lt;/strong&gt;. If you need to write custom scopes to query the enum columns, you would have
   to pass the integers instead of the symbols. You can access the enum-integer
   mapping via a constant added by the macro:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Bug&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ActiveRecord&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Base&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;scope&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;where&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;status &amp;lt;&amp;gt; ? OR status &amp;lt;&amp;gt; ?&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;STATUS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:resolved&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;STATUS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:rejected&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;IV&lt;/strong&gt;. Currently, the dirty tracking methods (e.g. &lt;code&gt;status_was?&lt;/code&gt;) have not been
   updated to work with enums yet (they currently return the mapped integer
   instead of the symbols). This should be fixed before the final release. (See
   &lt;a href=&quot;https://github.com/rails/rails/pull/13267&quot;&gt;#13267&lt;/a&gt; for the progress.)&lt;/p&gt;

&lt;p&gt;Read more about this feature:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://edgeguides.rubyonrails.org/4_1_release_notes.html#active-record-enums&quot;&gt;Release notes&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://edgeapi.rubyonrails.org/classes/ActiveRecord/Enum.html&quot;&gt;Documentation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Original commit: &lt;a href=&quot;https://github.com/rails/rails/commit/db41eb8a6ea88b854bf5cd11070ea4245e1639c5&quot;&gt;db41eb8a&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;action-pack-variants&quot;&gt;Action Pack Variants&lt;/h2&gt;

&lt;p&gt;As web developers, we are well aware that we have fully transitioned into the
&lt;a href=&quot;http://en.wikipedia.org/wiki/Post-PC_era&quot;&gt;post-PC era&lt;/a&gt;. As much as I love &lt;a href=&quot;http://alistapart.com/article/responsive-web-design&quot;&gt;responsive design&lt;/a&gt;,
it is not a silver bullet for the multi-device web. In many cases, it is more
appropiate to tailor your views to serve the most relevant content and workflow
for specific device categories.&lt;/p&gt;

&lt;p&gt;With &lt;strong&gt;Action Pack Variants&lt;/strong&gt;, this will become much easier in Rails 4.1:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ApplicationController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ActionController&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Base&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;before_action&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:detect_device_variant&lt;/span&gt;

  &lt;span class=&quot;kp&quot;&gt;private&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;detect_device_variant&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user_agent&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;/iPad/i&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;variant&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:tablet&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;/iPhone/i&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;variant&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:phone&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;PostController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ApplicationController&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;show&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@post&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Post&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;respond_to&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
      &lt;span class=&quot;nb&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;json&lt;/span&gt;
      &lt;span class=&quot;nb&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;html&lt;/span&gt;               &lt;span class=&quot;c1&quot;&gt;# /app/views/posts/show.html.erb&lt;/span&gt;
      &lt;span class=&quot;nb&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;phone&lt;/span&gt;         &lt;span class=&quot;c1&quot;&gt;# /app/views/posts/show.html+phone.erb&lt;/span&gt;
      &lt;span class=&quot;nb&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tablet&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
        &lt;span class=&quot;vi&quot;&gt;@show_edit_link&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;false&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This example sets up a &lt;code&gt;before_action&lt;/code&gt; filter to match the &lt;code&gt;User-Agent&lt;/code&gt; HTTP
header against certain keywords, and assign the &lt;code&gt;request.variant&lt;/code&gt; accordingly.
By specifying the supported variants in the &lt;code&gt;respond_to&lt;/code&gt; block, Rails will
render the appropiate template for the specific format and variant combination.
It also allows you to run additional variant-specific code by passing a block.&lt;/p&gt;

&lt;p&gt;In fact, you can even skip the declaration - if you have the appropiate
template in your &lt;code&gt;views&lt;/code&gt; directory, Rails will automatically pick it up. On the
other hand, if a variant does not have a specialized template, Rails will
fallback to the default template for the format (i.e. &lt;code&gt;show.html.erb&lt;/code&gt;). This
allows you to share a template between two variants. In this example, the
&lt;code&gt;tablet&lt;/code&gt; variant will reuse the default template if &lt;code&gt;/app/views/posts/show.html+phone.erb&lt;/code&gt;
is absent.&lt;/p&gt;

&lt;p&gt;Although most examples use the &lt;code&gt;User-Agent&lt;/code&gt; header to showcase this feature,
it’s worth noting that the actual implementation in Rails is completely
agnostic from that. &lt;code&gt;request.variant&lt;/code&gt; can be assigned any time before the
template is rendered based on arbitrary conditions, such as the request
(sub)domain, HTTP headers, session data, or even the result of a coin flip.&lt;/p&gt;

&lt;p&gt;This makes the feature very flexible, and can potentially be used for many
things such as API versioning, A/B testing, or even feature rollouts!&lt;/p&gt;

&lt;p&gt;Read more about this feature:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://edgeguides.rubyonrails.org/4_1_release_notes.html#variants&quot;&gt;Release notes&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://edgeapi.rubyonrails.org/classes/ActionController/MimeResponds.html#method-i-respond_to&quot;&gt;Documentation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Pull requests: &lt;a href=&quot;https://github.com/rails/rails/pull/12977&quot;&gt;#12977&lt;/a&gt;, &lt;a href=&quot;https://github.com/rails/rails/pull/13290&quot;&gt;#13290&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;application-message-verifier&quot;&gt;Application Message Verifier&lt;/h2&gt;

&lt;p&gt;Rails 4.1 also included a built-in helper to generate signed messages with
&lt;a href=&quot;http://en.wikipedia.org/wiki/Hash-based_message_authentication_code&quot;&gt;HMAC&lt;/a&gt;. The message verifier was previously used to power things like
signed cookies, but it is now much easier to use it for other purposes.&lt;/p&gt;

&lt;p&gt;For example, you can implement a stateless “reset password” feature without
having to store any tokens in the database:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;User&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ActiveRecord&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Base&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;verifier_for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;purpose&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;vi&quot;&gt;@verifiers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
      &lt;span class=&quot;vi&quot;&gt;@verifiers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;purpose&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
        &lt;span class=&quot;vi&quot;&gt;@verifiers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Rails&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;application&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;message_verifier&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to_s&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;reset_password_token&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;verifier&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;verifier_for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;reset-password&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# Unique for each type of messages&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;verifier&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;generate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;reset_password!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;token&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;new_password&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;new_password_confirmation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# This raises an exception if the message is modified&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;user_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;timestamp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;verifier_for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;reset-password&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;verify&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;token&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;timestamp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;day&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ago&lt;/span&gt;
      &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;password&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;new_password&lt;/span&gt;
      &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;password_confirmation&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;new_password_confirmation&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;save!&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;# Token expired&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Notifier&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ActionMailer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Base&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;reset_password&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@user&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@reset_password_url&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;password_reset_url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;token&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reset_password_token&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;mail&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;email&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;subject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Your have requested to reset your password&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;That way, everything that is required to fufill the password reset request is
included in the link, nothing need to be stored in the database. This can also
be used for things like &lt;code&gt;OAuth&lt;/code&gt; (the &lt;code&gt;state&lt;/code&gt; parameter).&lt;/p&gt;

&lt;p&gt;When using this feature, it is important to conisder possible &lt;a href=&quot;http://en.wikipedia.org/wiki/Replay_attack&quot;&gt;replay attacks&lt;/a&gt;.
In the example above, if we did not include a timestamp to check for expiration,
the same URL can be used to reset the user’s password at any time if the email
ended up in the wrong hands!&lt;/p&gt;

&lt;p&gt;Also, the key used to sign the message is derived from your application’s
&lt;code&gt;secret_key_base&lt;/code&gt; and the “salt” you passed (&lt;code&gt;&quot;User-reset-password&quot;&lt;/code&gt; in the
example). Changing either will invalidate any previously signed messages.&lt;/p&gt;

&lt;h2 id=&quot;spring&quot;&gt;Spring&lt;/h2&gt;

&lt;p&gt;Depending on the gems you use, an average Rails app probably take around ~5
seconds to boot. That’s 5 seconds wasted every time you run your tests, even
when you are just running a single isolated test case! If you are following
&lt;a href=&quot;http://en.wikipedia.org/wiki/Test-driven_development&quot;&gt;TDD&lt;/a&gt;, you are probably doing this 50 times a day. That’s &lt;a href=&quot;http://xkcd.com/1205/&quot;&gt;5 days wasted&lt;/a&gt;
in the last five years!&lt;/p&gt;

&lt;p&gt;Luckily for all of us, new applications generated with Rails 4.1 comes with
built-in integration with the &lt;a href=&quot;https://github.com/jonleighton/spring&quot;&gt;Spring&lt;/a&gt; application preloader.&lt;/p&gt;

&lt;p&gt;Spring works by keeping your application running in the background so you
don’t need to boot it every time you run a test, rake task or migration. If
you are familiar with &lt;a href=&quot;https://github.com/burke/zeus&quot;&gt;Zeus&lt;/a&gt; gem or the &lt;a href=&quot;https://github.com/sporkrb/spork&quot;&gt;Spork&lt;/a&gt; gem, this should
sound famaliar. However, it transparently wraps common Rails commands
(&lt;code&gt;rake&lt;/code&gt; and &lt;code&gt;rails&lt;/code&gt; by default) with binstubs, so if you have &lt;code&gt;./bin&lt;/code&gt;
in your &lt;code&gt;PATH&lt;/code&gt;, things should automagically become much faster for you, no
actions required!&lt;/p&gt;

&lt;p&gt;I tried this on the &lt;a href=&quot;https://caliper.io/&quot;&gt;Caliper&lt;/a&gt; dashboard, and we can save almost 5
seconds between test runs when spring is loaded. Can I get my 5 extra days
off now? ;)&lt;/p&gt;

&lt;p&gt;You can read about how it works in the &lt;a href=&quot;https://github.com/jonleighton/spring#readme&quot;&gt;Spring README&lt;/a&gt; as
well as how to install this for existing applications.&lt;/p&gt;

&lt;p&gt;Read more about this feature:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://edgeguides.rubyonrails.org/4_1_release_notes.html#spring-application-preloader&quot;&gt;Release notes&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://edgeguides.rubyonrails.org/upgrading_ruby_on_rails.html#spring&quot;&gt;Upgrading guide&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/jonleighton/spring#readme&quot;&gt;Documentation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Pull request: &lt;a href=&quot;https://github.com/rails/rails/pull/12958&quot;&gt;#12958&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;even-more-features&quot;&gt;Even More Features&lt;/h2&gt;

&lt;p&gt;This is just scratching the surface of this release. There are many other
features that you might find useful, such as
&lt;a href=&quot;http://edgeguides.rubyonrails.org/4_1_release_notes.html#config-secrets-yml&quot;&gt;a &lt;code&gt;secrets.yml&lt;/code&gt; for all your secrets&lt;/a&gt;,
&lt;a href=&quot;https://github.com/rails/rails/pull/12824&quot;&gt;time travelling in tests&lt;/a&gt;,
&lt;a href=&quot;https://github.com/rails/rails/pull/12183&quot;&gt;better JSON handling&lt;/a&gt;,
&lt;a href=&quot;http://edgeguides.rubyonrails.org/4_1_release_notes.html#module-concerning&quot;&gt;&lt;code&gt;Module#concerning&lt;/code&gt;&lt;/a&gt;,
&lt;a href=&quot;https://github.com/rails/rails/pull/12891&quot;&gt;&lt;code&gt;to_param&lt;/code&gt; macro&lt;/a&gt; and more.
I encourage you to checkout the &lt;a href=&quot;http://edgeguides.rubyonrails.org/4_1_release_notes.html&quot;&gt;release notes&lt;/a&gt;
for a full list of changes!&lt;/p&gt;

&lt;h2 id=&quot;vanruby-upgrade-clinic&quot;&gt;#VANRUBY Upgrade Clinic&lt;/h2&gt;

&lt;p&gt;We will be running our &lt;a href=&quot;http://www.meetup.com/vancouver-ruby/messages/61805312/&quot;&gt;4.1 upgrade clinic&lt;/a&gt;
again at the &lt;a href=&quot;http://www.meetup.com/vancouver-ruby/events/154207602/&quot;&gt;#VANRUBY hack night&lt;/a&gt;
today. Stop by and say hi if you are in town!&lt;/p&gt;

</content>

            
              <content type="image" src="http://brewhouse.io/images/brewhouse-symbol-large-200x200.png" />
            
        </entry>
      
    
</feed>
